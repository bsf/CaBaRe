/******************************************************************************/
/***          Generated by IBExpert 2012.03.13 06.09.2012 19:59:49          ***/
/******************************************************************************/

SET SQL DIALECT 3;

SET NAMES WIN1251;

SET CLIENTLIB 'D:\PRJ\BSF\CaBaRe\Output\gds32.dll';

CONNECT 'D:\PRJ\BSF\CaBaRe\Output\DB\CaBaRe.gdb' USER 'SYSDBA';



/******************************************************************************/
/***                               Generators                               ***/
/******************************************************************************/

CREATE GENERATOR CBR_GEN;
CREATE GENERATOR CBR_GEN_DOC;


/******************************************************************************/
/***                               Exceptions                               ***/
/******************************************************************************/

CREATE EXCEPTION RAISE 'тест';



SET TERM ^ ; 



/******************************************************************************/
/***                           Stored Procedures                            ***/
/******************************************************************************/

CREATE OR ALTER PROCEDURE CBR_EV_KORD_CREATE (
    ORD_ID_ INTEGER)
RETURNS (
    ID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE OR ALTER PROCEDURE CBR_EV_MENU_ITEM (
    ID_ INTEGER)
RETURNS (
    ID INTEGER,
    NAME VARCHAR(50),
    GRP_ID INTEGER,
    STATE_ID INTEGER,
    UNT VARCHAR(10))
AS
BEGIN
  SUSPEND;
END^





CREATE OR ALTER PROCEDURE CBR_EV_MENU_ITEM_U (
    ID INTEGER,
    NAME VARCHAR(50),
    GRP_ID INTEGER,
    STATE_ID INTEGER,
    UNT VARCHAR(10))
AS
BEGIN
  EXIT;
END^





CREATE OR ALTER PROCEDURE CBR_EV_MENU_LIST (
    ID_ INTEGER,
    SHOW_CLOSED_ INTEGER)
RETURNS (
    ID INTEGER,
    GRP VARCHAR(50),
    NAME VARCHAR(50),
    UNT VARCHAR(10),
    STATE VARCHAR(50),
    UI_ROW_STYLE VARCHAR(50))
AS
BEGIN
  SUSPEND;
END^





CREATE OR ALTER PROCEDURE CBR_EV_MENU_NEW
RETURNS (
    ID INTEGER,
    NAME VARCHAR(50),
    GRP_ID INTEGER,
    UNT VARCHAR(10))
AS
BEGIN
  SUSPEND;
END^





CREATE OR ALTER PROCEDURE CBR_EV_MENU_NEW_U (
    ID INTEGER,
    NAME VARCHAR(50),
    GRP_ID INTEGER,
    UNT VARCHAR(10))
AS
BEGIN
  EXIT;
END^





CREATE OR ALTER PROCEDURE CBR_EV_ORD_DESK_ORD_CREATE (
    TBL_ID_ INTEGER)
RETURNS (
    ID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE OR ALTER PROCEDURE CBR_EV_ORD_DESK_ORDI (
    HID_ INTEGER,
    MENU_ID_ INTEGER)
RETURNS (
    ID INTEGER,
    HID INTEGER,
    RECNO INTEGER,
    MENU_ID INTEGER,
    DISH VARCHAR(50),
    UNT VARCHAR(10),
    QTY DOUBLE PRECISION,
    PRICE DOUBLE PRECISION,
    SUMM DOUBLE PRECISION,
    FKORD INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE OR ALTER PROCEDURE CBR_EV_ORD_DESK_ORDI_I (
    HID_ INTEGER,
    MENU_ID_ INTEGER)
RETURNS (
    ID INTEGER,
    HID INTEGER,
    MENU_ID INTEGER,
    DISH VARCHAR(50),
    UNT VARCHAR(10),
    QTY DOUBLE PRECISION,
    PRICE DOUBLE PRECISION,
    SUMM DOUBLE PRECISION,
    FKORD INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE OR ALTER PROCEDURE CBR_EV_ORD_JRN (
    ID_ INTEGER,
    STATE_ID_ INTEGER,
    DBEG_ DATE,
    DEND_ DATE)
RETURNS (
    ID INTEGER,
    DAT DATE,
    ROOM VARCHAR(50),
    TBL VARCHAR(50),
    IDAT TIMESTAMP)
AS
BEGIN
  SUSPEND;
END^





CREATE OR ALTER PROCEDURE CBR_EV_ORD_JRN_ (
    ID_ INTEGER,
    STATE_ID_ INTEGER,
    DBEG_ DATE,
    DEND_ DATE)
RETURNS (
    ID INTEGER,
    DAT DATE,
    STATE_ID INTEGER,
    TBL_ID INTEGER,
    IDAT TIMESTAMP)
AS
BEGIN
  SUSPEND;
END^





CREATE OR ALTER PROCEDURE CBR_EV_ORD_PRECHECK (
    ID INTEGER)
AS
BEGIN
  EXIT;
END^





CREATE OR ALTER PROCEDURE CBR_EV_PRICE_LIST (
    DAT_ DATE,
    TYP_ID_ INTEGER)
RETURNS (
    MENU_ID INTEGER,
    DAT DATE,
    TYP_ID INTEGER,
    GRP VARCHAR(50),
    DISH VARCHAR(50),
    UNT VARCHAR(10),
    PRICE DOUBLE PRECISION,
    PRICE_NEW DOUBLE PRECISION)
AS
BEGIN
  SUSPEND;
END^





CREATE OR ALTER PROCEDURE CBR_EV_PRICE_LIST_SEL (
    DAT_ DATE,
    TYP_ID_ INTEGER)
RETURNS (
    DAT DATE,
    TYP_ID INTEGER,
    INFO VARCHAR(250))
AS
BEGIN
  SUSPEND;
END^





CREATE OR ALTER PROCEDURE CBR_EV_PRICE_LIST_U (
    MENU_ID INTEGER,
    DAT DATE,
    TYP_ID INTEGER,
    PRICE_NEW DOUBLE PRECISION)
AS
BEGIN
  EXIT;
END^





CREATE OR ALTER PROCEDURE INF_SP_ENUM_GET (
    TABLENAME_ VARCHAR(50),
    FIELDNAME_ VARCHAR(50),
    ID_ INTEGER)
RETURNS (
    ID INTEGER,
    NAME VARCHAR(50),
    CODE VARCHAR(50))
AS
BEGIN
  SUSPEND;
END^





CREATE OR ALTER PROCEDURE INF_SP_ENUM_LOOKUP (
    TABLENAME_ VARCHAR(50),
    FIELDNAME_ VARCHAR(50),
    SHOWNONE_ INTEGER)
RETURNS (
    ID INTEGER,
    NAME VARCHAR(50))
AS
BEGIN
  SUSPEND;
END^





CREATE OR ALTER PROCEDURE INF_SP_STATES_GET (
    TABLENAME_ VARCHAR(50),
    ID_ INTEGER)
RETURNS (
    ID INTEGER,
    NAME VARCHAR(50),
    CODE VARCHAR(50),
    DRANGE INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE OR ALTER PROCEDURE INF_SP_STATES_LIST (
    TABLE_NAME_ VARCHAR(50))
RETURNS (
    ID INTEGER,
    NAME VARCHAR(50),
    CODE VARCHAR(50),
    DRANGE INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE OR ALTER PROCEDURE UTL_EV_JRN_SELECTOR (
    DATE1_ DATE,
    DATE2_ DATE)
RETURNS (
    DATE1 DATE,
    DATE2 DATE)
AS
BEGIN
  SUSPEND;
END^





CREATE OR ALTER PROCEDURE UTL_EV_JRN_SELECTORINFO (
    USE_DRANGE_ INTEGER,
    DATE1_ DATE,
    DATE2_ DATE)
RETURNS (
    INFO VARCHAR(250))
AS
BEGIN
  SUSPEND;
END^






SET TERM ; ^



/******************************************************************************/
/***                                 Tables                                 ***/
/******************************************************************************/



CREATE TABLE CBR_KORD (
    ID    INTEGER NOT NULL,
    DAT   DATE NOT NULL,
    IDAT  TIMESTAMP DEFAULT 'NOW'
);


CREATE TABLE CBR_KORDI (
    ID       INTEGER NOT NULL,
    HID      INTEGER NOT NULL,
    ORDI_ID  INTEGER NOT NULL
);


CREATE TABLE CBR_MENU (
    ID        INTEGER NOT NULL,
    NAME      VARCHAR(50) NOT NULL,
    GRP_ID    INTEGER,
    STATE_ID  INTEGER DEFAULT 0 NOT NULL,
    UNT       VARCHAR(10)
);


CREATE TABLE CBR_MENU_GRP (
    ID    INTEGER NOT NULL,
    NAME  VARCHAR(50) NOT NULL
);


CREATE TABLE CBR_ORD (
    ID             INTEGER NOT NULL,
    DAT            DATE NOT NULL,
    STATE_ID       INTEGER DEFAULT 0 NOT NULL,
    IUSR           VARCHAR(50) DEFAULT USER,
    IDAT           DATE DEFAULT 'NOW',
    PUSR           VARCHAR(50),
    PDAT           DATE,
    TBL_ID         INTEGER NOT NULL,
    PRICE_TYP_ID   INTEGER NOT NULL,
    LAST_ACT_TIME  TIMESTAMP DEFAULT 'NOW'
);


CREATE TABLE CBR_ORDI (
    ID       INTEGER NOT NULL,
    HID      INTEGER NOT NULL,
    MENU_ID  INTEGER NOT NULL,
    QTY      DOUBLE PRECISION NOT NULL,
    PRICE    DOUBLE PRECISION NOT NULL,
    KORD_ID  INTEGER
);


CREATE TABLE CBR_PRICE (
    ID       INTEGER NOT NULL,
    MENU_ID  INTEGER NOT NULL,
    TYP_ID   INTEGER NOT NULL,
    DAT      DATE NOT NULL,
    PRICE    DOUBLE PRECISION NOT NULL
);


CREATE TABLE CBR_PRICE_TYP (
    ID    INTEGER NOT NULL,
    NAME  VARCHAR(50) NOT NULL
);


CREATE TABLE CBR_ROOMS (
    ID    INTEGER NOT NULL,
    NAME  VARCHAR(25) NOT NULL
);


CREATE TABLE CBR_TBL (
    ID        INTEGER NOT NULL,
    NAME      VARCHAR(25) NOT NULL,
    ROOM_ID   INTEGER NOT NULL,
    STATE_ID  INTEGER DEFAULT 0 NOT NULL
);


CREATE TABLE INF_ENUM (
    TABLENAME  VARCHAR(50) NOT NULL,
    FIELDNAME  VARCHAR(50) NOT NULL,
    ID         INTEGER NOT NULL,
    NAME       VARCHAR(50) NOT NULL,
    CODE       VARCHAR(50)
);


CREATE TABLE INF_MSG (
    CODE  VARCHAR(50) NOT NULL,
    MSG   VARCHAR(70) NOT NULL
);


CREATE TABLE INF_STATES (
    TABLENAME  VARCHAR(50) NOT NULL,
    ID         INTEGER NOT NULL,
    CODE       VARCHAR(50),
    NAME       VARCHAR(50) NOT NULL,
    DRANGE     INTEGER DEFAULT 0 NOT NULL
);


INSERT INTO INF_ENUM (TABLENAME, FIELDNAME, ID, NAME, CODE) VALUES ('CBR_MENU', 'STATE_ID', 0, 'Новое', NULL);
INSERT INTO INF_ENUM (TABLENAME, FIELDNAME, ID, NAME, CODE) VALUES ('CBR_MENU', 'STATE_ID', 1, 'Активно', NULL);
INSERT INTO INF_ENUM (TABLENAME, FIELDNAME, ID, NAME, CODE) VALUES ('CBR_MENU', 'STATE_ID', 2, 'Не активно', NULL);
INSERT INTO INF_ENUM (TABLENAME, FIELDNAME, ID, NAME, CODE) VALUES ('CBR_MENU', 'STATE_ID', 3, 'Закрыто', '');
INSERT INTO INF_ENUM (TABLENAME, FIELDNAME, ID, NAME, CODE) VALUES ('CBR_ORD', 'STATE_ID', 1, 'Обслуживается', NULL);
INSERT INTO INF_ENUM (TABLENAME, FIELDNAME, ID, NAME, CODE) VALUES ('CBR_ORD', 'STATE_ID', 2, 'Пречек', NULL);
INSERT INTO INF_ENUM (TABLENAME, FIELDNAME, ID, NAME, CODE) VALUES ('CBR_ORD', 'STATE_ID', 3, 'Закрыт', NULL);
INSERT INTO INF_ENUM (TABLENAME, FIELDNAME, ID, NAME, CODE) VALUES ('CBR_ORD', 'STATE_ID', 0, 'Открыт', NULL);
INSERT INTO INF_ENUM (TABLENAME, FIELDNAME, ID, NAME, CODE) VALUES ('CBR', '-', 0, 'Новая', NULL);
INSERT INTO INF_ENUM (TABLENAME, FIELDNAME, ID, NAME, CODE) VALUES ('CBR', '-', 1, 'Активная', NULL);
INSERT INTO INF_ENUM (TABLENAME, FIELDNAME, ID, NAME, CODE) VALUES ('CBR', '-', 2, 'Не активная', NULL);
INSERT INTO INF_ENUM (TABLENAME, FIELDNAME, ID, NAME, CODE) VALUES ('CBR', '-', 3, 'Закрытая', NULL);

COMMIT WORK;

INSERT INTO INF_STATES (TABLENAME, ID, CODE, NAME, DRANGE) VALUES ('CBR_ORD', 0, NULL, 'Открытые', 0);
INSERT INTO INF_STATES (TABLENAME, ID, CODE, NAME, DRANGE) VALUES ('CBR_ORD', 1, NULL, 'Обслуживаются', 0);
INSERT INTO INF_STATES (TABLENAME, ID, CODE, NAME, DRANGE) VALUES ('CBR_ORD', 2, NULL, 'Пречек', 0);
INSERT INTO INF_STATES (TABLENAME, ID, CODE, NAME, DRANGE) VALUES ('CBR_ORD', 3, NULL, 'Закрытые', 1);

COMMIT WORK;

INSERT INTO BFW_ENT (ENTITYNAME, SCHEMENAME, IS_SCHEME, DESCRIPTION) VALUES ('CBR_MENU', NULL, 0, 'Меню');
INSERT INTO BFW_ENT (ENTITYNAME, SCHEMENAME, IS_SCHEME, DESCRIPTION) VALUES ('CBR_UI', NULL, 0, 'CaBaRe UI');
INSERT INTO BFW_ENT (ENTITYNAME, SCHEMENAME, IS_SCHEME, DESCRIPTION) VALUES ('CBR_MENU_GRP', NULL, 0, 'Группы меню');
INSERT INTO BFW_ENT (ENTITYNAME, SCHEMENAME, IS_SCHEME, DESCRIPTION) VALUES ('CBR_TBL', NULL, 0, 'Столы');
INSERT INTO BFW_ENT (ENTITYNAME, SCHEMENAME, IS_SCHEME, DESCRIPTION) VALUES ('CBR_ROOM', NULL, 0, 'Залы');
INSERT INTO BFW_ENT (ENTITYNAME, SCHEMENAME, IS_SCHEME, DESCRIPTION) VALUES ('CBR_PRICE', NULL, 0, 'Прайс');
INSERT INTO BFW_ENT (ENTITYNAME, SCHEMENAME, IS_SCHEME, DESCRIPTION) VALUES ('CBR_PRICE_TYP', NULL, 0, 'Виды цен');
INSERT INTO BFW_ENT (ENTITYNAME, SCHEMENAME, IS_SCHEME, DESCRIPTION) VALUES ('CBR_WD_VIEW', NULL, 0, 'WaiterDeskView');
INSERT INTO BFW_ENT (ENTITYNAME, SCHEMENAME, IS_SCHEME, DESCRIPTION) VALUES ('CBR_ORD_DESK', NULL, 0, 'OrderDeskView');
INSERT INTO BFW_ENT (ENTITYNAME, SCHEMENAME, IS_SCHEME, DESCRIPTION) VALUES ('CBR_KORD', NULL, 0, 'KitchenOrder');
INSERT INTO BFW_ENT (ENTITYNAME, SCHEMENAME, IS_SCHEME, DESCRIPTION) VALUES ('CBR_ORD', NULL, 0, 'Заказ');
INSERT INTO BFW_ENT (ENTITYNAME, SCHEMENAME, IS_SCHEME, DESCRIPTION) VALUES ('UTL_JRN', NULL, 0, NULL);

COMMIT WORK;

INSERT INTO BFW_ENT_FIELDS (ENTITYNAME, VIEWNAME, FIELDNAME, BAND, TITLE, VISIBLE, READONLY, EDITOR, EDITOR_OPTIONS, OPTIONS, REQ) VALUES ('-', '-', 'ID', NULL, 'Код', 0, 1, NULL, NULL, NULL, 0);
INSERT INTO BFW_ENT_FIELDS (ENTITYNAME, VIEWNAME, FIELDNAME, BAND, TITLE, VISIBLE, READONLY, EDITOR, EDITOR_OPTIONS, OPTIONS, REQ) VALUES ('CBR_MENU', 'New', 'NAME', NULL, 'Название блюда', 1, 0, NULL, NULL, NULL, 1);
INSERT INTO BFW_ENT_FIELDS (ENTITYNAME, VIEWNAME, FIELDNAME, BAND, TITLE, VISIBLE, READONLY, EDITOR, EDITOR_OPTIONS, OPTIONS, REQ) VALUES ('CBR_MENU', 'List', 'NAME', NULL, 'Блюдо', 1, 0, NULL, NULL, NULL, 0);
INSERT INTO BFW_ENT_FIELDS (ENTITYNAME, VIEWNAME, FIELDNAME, BAND, TITLE, VISIBLE, READONLY, EDITOR, EDITOR_OPTIONS, OPTIONS, REQ) VALUES ('-', '-', 'STATE_ID', NULL, 'Статус', 1, 0, NULL, NULL, NULL, 0);
INSERT INTO BFW_ENT_FIELDS (ENTITYNAME, VIEWNAME, FIELDNAME, BAND, TITLE, VISIBLE, READONLY, EDITOR, EDITOR_OPTIONS, OPTIONS, REQ) VALUES ('-', '-', 'STATE', NULL, 'Статус', 1, 0, NULL, NULL, NULL, 0);
INSERT INTO BFW_ENT_FIELDS (ENTITYNAME, VIEWNAME, FIELDNAME, BAND, TITLE, VISIBLE, READONLY, EDITOR, EDITOR_OPTIONS, OPTIONS, REQ) VALUES ('CBR_MENU', 'New', 'STATE_ID', NULL, 'Статус', 1, 0, 'Lookup', 'Entity=CBR_MENU;EView=Lookup', '', 0);
INSERT INTO BFW_ENT_FIELDS (ENTITYNAME, VIEWNAME, FIELDNAME, BAND, TITLE, VISIBLE, READONLY, EDITOR, EDITOR_OPTIONS, OPTIONS, REQ) VALUES ('CBR_MENU', 'Item', 'NAME', NULL, 'Название блюда', 1, 0, NULL, NULL, NULL, 1);
INSERT INTO BFW_ENT_FIELDS (ENTITYNAME, VIEWNAME, FIELDNAME, BAND, TITLE, VISIBLE, READONLY, EDITOR, EDITOR_OPTIONS, OPTIONS, REQ) VALUES ('CBR_MENU', 'Item', 'STATE_ID', NULL, 'Статус', 1, 0, 'Lookup', 'Entity=CBR_MENU;EView=States', NULL, 0);
INSERT INTO BFW_ENT_FIELDS (ENTITYNAME, VIEWNAME, FIELDNAME, BAND, TITLE, VISIBLE, READONLY, EDITOR, EDITOR_OPTIONS, OPTIONS, REQ) VALUES ('-', '-', 'NAME', NULL, 'Наименование', 1, 0, NULL, NULL, NULL, 0);
INSERT INTO BFW_ENT_FIELDS (ENTITYNAME, VIEWNAME, FIELDNAME, BAND, TITLE, VISIBLE, READONLY, EDITOR, EDITOR_OPTIONS, OPTIONS, REQ) VALUES ('CBR_MENU', 'New', 'GRP_ID', NULL, 'Группа', 1, 0, 'Lookup', 'Entity=CBR_MENU_GRP;EView=Lookup', NULL, 1);
INSERT INTO BFW_ENT_FIELDS (ENTITYNAME, VIEWNAME, FIELDNAME, BAND, TITLE, VISIBLE, READONLY, EDITOR, EDITOR_OPTIONS, OPTIONS, REQ) VALUES ('CBR_MENU', 'Item', 'GRP_ID', NULL, 'Группа', 1, 0, 'Lookup', 'Entity=CBR_MENU_GRP;EView=Lookup', NULL, 1);
INSERT INTO BFW_ENT_FIELDS (ENTITYNAME, VIEWNAME, FIELDNAME, BAND, TITLE, VISIBLE, READONLY, EDITOR, EDITOR_OPTIONS, OPTIONS, REQ) VALUES ('CBR_MENU', 'List', 'GRP', NULL, 'Группа', 1, 0, NULL, NULL, NULL, 0);
INSERT INTO BFW_ENT_FIELDS (ENTITYNAME, VIEWNAME, FIELDNAME, BAND, TITLE, VISIBLE, READONLY, EDITOR, EDITOR_OPTIONS, OPTIONS, REQ) VALUES ('CBR_MENU', 'Item', 'UNT', '', 'Единица порции', 1, 0, NULL, NULL, NULL, 0);
INSERT INTO BFW_ENT_FIELDS (ENTITYNAME, VIEWNAME, FIELDNAME, BAND, TITLE, VISIBLE, READONLY, EDITOR, EDITOR_OPTIONS, OPTIONS, REQ) VALUES ('CBR_PRICE', 'List', 'MENU_ID', NULL, 'Код', 0, 1, NULL, NULL, NULL, 0);
INSERT INTO BFW_ENT_FIELDS (ENTITYNAME, VIEWNAME, FIELDNAME, BAND, TITLE, VISIBLE, READONLY, EDITOR, EDITOR_OPTIONS, OPTIONS, REQ) VALUES ('CBR_MENU', 'New', 'UNT', '', 'Единица порции', 1, 0, NULL, NULL, NULL, 1);
INSERT INTO BFW_ENT_FIELDS (ENTITYNAME, VIEWNAME, FIELDNAME, BAND, TITLE, VISIBLE, READONLY, EDITOR, EDITOR_OPTIONS, OPTIONS, REQ) VALUES ('CBR_PRICE', 'List', 'DAT', NULL, NULL, -1, 0, NULL, NULL, NULL, 0);
INSERT INTO BFW_ENT_FIELDS (ENTITYNAME, VIEWNAME, FIELDNAME, BAND, TITLE, VISIBLE, READONLY, EDITOR, EDITOR_OPTIONS, OPTIONS, REQ) VALUES ('CBR_PRICE', 'List', 'TYP_ID', NULL, NULL, -1, 0, NULL, NULL, NULL, 0);
INSERT INTO BFW_ENT_FIELDS (ENTITYNAME, VIEWNAME, FIELDNAME, BAND, TITLE, VISIBLE, READONLY, EDITOR, EDITOR_OPTIONS, OPTIONS, REQ) VALUES ('CBR_PRICE', 'List', 'DISH', NULL, 'Блюдо', 1, 1, NULL, NULL, NULL, 0);
INSERT INTO BFW_ENT_FIELDS (ENTITYNAME, VIEWNAME, FIELDNAME, BAND, TITLE, VISIBLE, READONLY, EDITOR, EDITOR_OPTIONS, OPTIONS, REQ) VALUES ('CBR_PRICE', 'List', 'UNT', NULL, 'Порция', 1, 1, NULL, NULL, NULL, 0);
INSERT INTO BFW_ENT_FIELDS (ENTITYNAME, VIEWNAME, FIELDNAME, BAND, TITLE, VISIBLE, READONLY, EDITOR, EDITOR_OPTIONS, OPTIONS, REQ) VALUES ('CBR_PRICE', 'List', 'PRICE', NULL, 'Цена', 1, 1, NULL, NULL, NULL, 0);
INSERT INTO BFW_ENT_FIELDS (ENTITYNAME, VIEWNAME, FIELDNAME, BAND, TITLE, VISIBLE, READONLY, EDITOR, EDITOR_OPTIONS, OPTIONS, REQ) VALUES ('CBR_PRICE', 'List', 'PRICE_NEW', NULL, 'Новая цена', 1, 0, NULL, NULL, NULL, 0);
INSERT INTO BFW_ENT_FIELDS (ENTITYNAME, VIEWNAME, FIELDNAME, BAND, TITLE, VISIBLE, READONLY, EDITOR, EDITOR_OPTIONS, OPTIONS, REQ) VALUES ('CBR_ORD', 'Journal', 'ID', NULL, '№', 1, 0, NULL, NULL, NULL, 0);
INSERT INTO BFW_ENT_FIELDS (ENTITYNAME, VIEWNAME, FIELDNAME, BAND, TITLE, VISIBLE, READONLY, EDITOR, EDITOR_OPTIONS, OPTIONS, REQ) VALUES ('CBR_ORD', 'Journal', 'DAT', NULL, 'Дата', 1, 0, NULL, NULL, NULL, 0);
INSERT INTO BFW_ENT_FIELDS (ENTITYNAME, VIEWNAME, FIELDNAME, BAND, TITLE, VISIBLE, READONLY, EDITOR, EDITOR_OPTIONS, OPTIONS, REQ) VALUES ('CBR_ORD', 'Journal', 'ROOM', NULL, 'Зал', 1, 0, NULL, NULL, NULL, 0);
INSERT INTO BFW_ENT_FIELDS (ENTITYNAME, VIEWNAME, FIELDNAME, BAND, TITLE, VISIBLE, READONLY, EDITOR, EDITOR_OPTIONS, OPTIONS, REQ) VALUES ('CBR_ORD', 'Journal', 'TBL', NULL, 'Стол', 1, 0, NULL, NULL, NULL, 0);
INSERT INTO BFW_ENT_FIELDS (ENTITYNAME, VIEWNAME, FIELDNAME, BAND, TITLE, VISIBLE, READONLY, EDITOR, EDITOR_OPTIONS, OPTIONS, REQ) VALUES ('CBR_TBL', 'List', 'ROOM', NULL, 'Зал', 1, 0, NULL, NULL, NULL, 0);
INSERT INTO BFW_ENT_FIELDS (ENTITYNAME, VIEWNAME, FIELDNAME, BAND, TITLE, VISIBLE, READONLY, EDITOR, EDITOR_OPTIONS, OPTIONS, REQ) VALUES ('CBR_TBL', 'New', 'ROOM_ID', NULL, 'Зал', 1, 0, 'Lookup', 'Entity=CBR_ROOM;EView=Lookup', NULL, 1);
INSERT INTO BFW_ENT_FIELDS (ENTITYNAME, VIEWNAME, FIELDNAME, BAND, TITLE, VISIBLE, READONLY, EDITOR, EDITOR_OPTIONS, OPTIONS, REQ) VALUES ('CBR_PRICE', 'List', 'GRP', NULL, 'Группа', 1, 1, NULL, NULL, NULL, 0);
INSERT INTO BFW_ENT_FIELDS (ENTITYNAME, VIEWNAME, FIELDNAME, BAND, TITLE, VISIBLE, READONLY, EDITOR, EDITOR_OPTIONS, OPTIONS, REQ) VALUES ('CBR_TBL', 'Item', 'ROOM_ID', NULL, 'Зал', 1, 0, 'Lookup', 'Entity=CBR_ROOM;EView=Lookup', NULL, 1);
INSERT INTO BFW_ENT_FIELDS (ENTITYNAME, VIEWNAME, FIELDNAME, BAND, TITLE, VISIBLE, READONLY, EDITOR, EDITOR_OPTIONS, OPTIONS, REQ) VALUES ('CBR_TBL', 'Item', 'STATE_ID', NULL, 'Статус', 1, 0, 'Lookup', 'Entity=CBR_TBL;EView=States', NULL, 0);
INSERT INTO BFW_ENT_FIELDS (ENTITYNAME, VIEWNAME, FIELDNAME, BAND, TITLE, VISIBLE, READONLY, EDITOR, EDITOR_OPTIONS, OPTIONS, REQ) VALUES ('CBR_ORD', 'Journal', 'IDAT', NULL, 'Время открытия', 1, 0, NULL, NULL, NULL, 0);
INSERT INTO BFW_ENT_FIELDS (ENTITYNAME, VIEWNAME, FIELDNAME, BAND, TITLE, VISIBLE, READONLY, EDITOR, EDITOR_OPTIONS, OPTIONS, REQ) VALUES ('CBR_PRICE', 'Selector', 'DAT', NULL, 'Дата', 1, 0, NULL, NULL, NULL, 0);
INSERT INTO BFW_ENT_FIELDS (ENTITYNAME, VIEWNAME, FIELDNAME, BAND, TITLE, VISIBLE, READONLY, EDITOR, EDITOR_OPTIONS, OPTIONS, REQ) VALUES ('CBR_PRICE', 'Selector', 'TYP_ID', NULL, 'Тип цен', 1, 0, 'Lookup', 'Entity=CBR_PRICE_TYP;EView=Lookup', NULL, 0);
INSERT INTO BFW_ENT_FIELDS (ENTITYNAME, VIEWNAME, FIELDNAME, BAND, TITLE, VISIBLE, READONLY, EDITOR, EDITOR_OPTIONS, OPTIONS, REQ) VALUES ('CBR_MENU', 'List', 'UNT', NULL, 'Порция', 1, 0, NULL, NULL, NULL, 0);
INSERT INTO BFW_ENT_FIELDS (ENTITYNAME, VIEWNAME, FIELDNAME, BAND, TITLE, VISIBLE, READONLY, EDITOR, EDITOR_OPTIONS, OPTIONS, REQ) VALUES ('CBR_ORD', 'Head', 'ID', NULL, '№', 1, 0, NULL, NULL, NULL, 0);
INSERT INTO BFW_ENT_FIELDS (ENTITYNAME, VIEWNAME, FIELDNAME, BAND, TITLE, VISIBLE, READONLY, EDITOR, EDITOR_OPTIONS, OPTIONS, REQ) VALUES ('CBR_ORD', 'Head', 'DAT', NULL, 'Дата', 1, 0, NULL, NULL, NULL, 0);
INSERT INTO BFW_ENT_FIELDS (ENTITYNAME, VIEWNAME, FIELDNAME, BAND, TITLE, VISIBLE, READONLY, EDITOR, EDITOR_OPTIONS, OPTIONS, REQ) VALUES ('CBR_ORD', 'Head', 'ROOM', NULL, 'Зал', 1, 0, NULL, NULL, NULL, 0);
INSERT INTO BFW_ENT_FIELDS (ENTITYNAME, VIEWNAME, FIELDNAME, BAND, TITLE, VISIBLE, READONLY, EDITOR, EDITOR_OPTIONS, OPTIONS, REQ) VALUES ('CBR_ORD', 'Head', 'TBL', NULL, 'Стол', 1, 0, NULL, NULL, NULL, 0);

COMMIT WORK;

INSERT INTO BFW_ENT_VIEWS (ENTITYNAME, VIEWNAME, SQL_SELECT, SQL_INSERT, SQL_UPDATE, SQL_DELETE, SQL_REFRESH, READONLY, PKEY, OPTIONS, IS_EXEC, SQL_INSERTDEF) VALUES ('CBR_MENU', 'List', 'select * from cbr_ev_menu_list(null, 1)', NULL, NULL, 'delete from cbr_menu where id = :id', 'select * from cbr_ev_menu_list(:id, 1)', 1, NULL, NULL, 0, NULL);
INSERT INTO BFW_ENT_VIEWS (ENTITYNAME, VIEWNAME, SQL_SELECT, SQL_INSERT, SQL_UPDATE, SQL_DELETE, SQL_REFRESH, READONLY, PKEY, OPTIONS, IS_EXEC, SQL_INSERTDEF) VALUES ('CBR_PRICE_TYP', 'List', 'select id, name from cbr_price_typ order by name', NULL, NULL, 'delete from cbr_price_typ where id = :id', 'select * from cbr_price_typ where id = :id', 1, NULL, NULL, 0, NULL);
INSERT INTO BFW_ENT_VIEWS (ENTITYNAME, VIEWNAME, SQL_SELECT, SQL_INSERT, SQL_UPDATE, SQL_DELETE, SQL_REFRESH, READONLY, PKEY, OPTIONS, IS_EXEC, SQL_INSERTDEF) VALUES ('CBR_MENU', 'New', 'select * from cbr_ev_menu_new', '', 'execute procedure cbr_ev_menu_new_u(:id, :name, :grp_id, :unt)', NULL, NULL, 0, NULL, NULL, 0, '');
INSERT INTO BFW_ENT_VIEWS (ENTITYNAME, VIEWNAME, SQL_SELECT, SQL_INSERT, SQL_UPDATE, SQL_DELETE, SQL_REFRESH, READONLY, PKEY, OPTIONS, IS_EXEC, SQL_INSERTDEF) VALUES ('CBR_PRICE_TYP', 'New', 'select id, name from cbr_price_typ where id is null', 'insert into cbr_price_typ(id, name) values(:id, :name)', NULL, NULL, NULL, 0, NULL, NULL, 0, 'select gen_id(cbr_gen, 1) id from rdb$database');
INSERT INTO BFW_ENT_VIEWS (ENTITYNAME, VIEWNAME, SQL_SELECT, SQL_INSERT, SQL_UPDATE, SQL_DELETE, SQL_REFRESH, READONLY, PKEY, OPTIONS, IS_EXEC, SQL_INSERTDEF) VALUES ('CBR_PRICE_TYP', 'Item', 'select id, name from cbr_price_typ where id = :id', NULL, 'update cbr_price_typ set name = :name where id = :id', NULL, NULL, 0, NULL, NULL, 0, NULL);
INSERT INTO BFW_ENT_VIEWS (ENTITYNAME, VIEWNAME, SQL_SELECT, SQL_INSERT, SQL_UPDATE, SQL_DELETE, SQL_REFRESH, READONLY, PKEY, OPTIONS, IS_EXEC, SQL_INSERTDEF) VALUES ('CBR_PRICE', 'List', 'select * from cbr_ev_price_list(:dat, :typ_id)', NULL, 'execute procedure cbr_ev_price_list_u(:menu_id, :dat, :typ_id, :price_new)', NULL, NULL, 0, 'MENU_ID', NULL, 0, NULL);
INSERT INTO BFW_ENT_VIEWS (ENTITYNAME, VIEWNAME, SQL_SELECT, SQL_INSERT, SQL_UPDATE, SQL_DELETE, SQL_REFRESH, READONLY, PKEY, OPTIONS, IS_EXEC, SQL_INSERTDEF) VALUES ('CBR_MENU', 'States', 'select * from inf_sp_enum_lookup(''CBR'', ''-'', 1)', NULL, NULL, NULL, NULL, 1, NULL, NULL, 0, NULL);
INSERT INTO BFW_ENT_VIEWS (ENTITYNAME, VIEWNAME, SQL_SELECT, SQL_INSERT, SQL_UPDATE, SQL_DELETE, SQL_REFRESH, READONLY, PKEY, OPTIONS, IS_EXEC, SQL_INSERTDEF) VALUES ('CBR_MENU', 'Item', 'select * from cbr_ev_menu_item(:id)', NULL, 'execute procedure cbr_ev_menu_item_u(:id, :name, :grp_id, :state_id, :unt)', NULL, NULL, 0, NULL, NULL, 0, NULL);
INSERT INTO BFW_ENT_VIEWS (ENTITYNAME, VIEWNAME, SQL_SELECT, SQL_INSERT, SQL_UPDATE, SQL_DELETE, SQL_REFRESH, READONLY, PKEY, OPTIONS, IS_EXEC, SQL_INSERTDEF) VALUES ('CBR_UI', 'MainMenu', 'select  u.uri, u.title from bfw_ui u 
where u.pkg = ''CBR'' and coalesce(u.grp, '''') <> '''' and u.menuidx <> -1
order by u.menuidx', NULL, NULL, NULL, NULL, 0, NULL, NULL, 0, NULL);
INSERT INTO BFW_ENT_VIEWS (ENTITYNAME, VIEWNAME, SQL_SELECT, SQL_INSERT, SQL_UPDATE, SQL_DELETE, SQL_REFRESH, READONLY, PKEY, OPTIONS, IS_EXEC, SQL_INSERTDEF) VALUES ('CBR_MENU_GRP', 'List', 'select g.id, g.name from cbr_menu_grp g order  by g.name', NULL, NULL, 'delete from cbr_menu_grp where id = :id', 'select g.id, g.name from cbr_menu_grp g where g.id = :id', 1, NULL, NULL, 0, NULL);
INSERT INTO BFW_ENT_VIEWS (ENTITYNAME, VIEWNAME, SQL_SELECT, SQL_INSERT, SQL_UPDATE, SQL_DELETE, SQL_REFRESH, READONLY, PKEY, OPTIONS, IS_EXEC, SQL_INSERTDEF) VALUES ('CBR_MENU_GRP', 'New', 'select id, name from cbr_menu_grp where id is null', 'insert into cbr_menu_grp(id, name) values(:id, :name)', NULL, NULL, NULL, 0, NULL, NULL, 0, 'select gen_id(cbr_gen, 1) id from rdb$database');
INSERT INTO BFW_ENT_VIEWS (ENTITYNAME, VIEWNAME, SQL_SELECT, SQL_INSERT, SQL_UPDATE, SQL_DELETE, SQL_REFRESH, READONLY, PKEY, OPTIONS, IS_EXEC, SQL_INSERTDEF) VALUES ('CBR_MENU_GRP', 'Item', 'select id, name from cbr_menu_grp where id = :id', NULL, 'update cbr_menu_grp set name = :name where id = :id', NULL, NULL, 0, NULL, NULL, 0, NULL);
INSERT INTO BFW_ENT_VIEWS (ENTITYNAME, VIEWNAME, SQL_SELECT, SQL_INSERT, SQL_UPDATE, SQL_DELETE, SQL_REFRESH, READONLY, PKEY, OPTIONS, IS_EXEC, SQL_INSERTDEF) VALUES ('CBR_MENU_GRP', 'Lookup', 'select id, name from cbr_menu_grp order by name', NULL, NULL, NULL, NULL, 1, NULL, NULL, 0, NULL);
INSERT INTO BFW_ENT_VIEWS (ENTITYNAME, VIEWNAME, SQL_SELECT, SQL_INSERT, SQL_UPDATE, SQL_DELETE, SQL_REFRESH, READONLY, PKEY, OPTIONS, IS_EXEC, SQL_INSERTDEF) VALUES ('CBR_TBL', 'List', 'select t.id, t.name, r.name room, 
(select e.name from inf_sp_enum_get(''cbr'', ''-'', t.state_id) e)  state
from  cbr_tbl t left join cbr_rooms r on (r.id = t.room_id)', NULL, NULL, 'delete from cbr_tbl where id = :id', 'select t.id, t.name, r.name room, 
(select e.name from inf_sp_enum_get(''cbr'', ''-'', t.state_id) e)  state
from  cbr_tbl t  left join cbr_rooms r on (r.id = t.room_id) where t.id = :id', 1, 'ID', NULL, 0, NULL);
INSERT INTO BFW_ENT_VIEWS (ENTITYNAME, VIEWNAME, SQL_SELECT, SQL_INSERT, SQL_UPDATE, SQL_DELETE, SQL_REFRESH, READONLY, PKEY, OPTIONS, IS_EXEC, SQL_INSERTDEF) VALUES ('CBR_TBL', 'New', 'select id, name, room_id from cbr_tbl where id is null', 'insert into cbr_tbl(id, name, room_id, state_id) values(:id, :name, :room_id, 1)', NULL, NULL, NULL, 0, NULL, NULL, 0, 'select gen_id(cbr_gen, 1) id from rdb$database');
INSERT INTO BFW_ENT_VIEWS (ENTITYNAME, VIEWNAME, SQL_SELECT, SQL_INSERT, SQL_UPDATE, SQL_DELETE, SQL_REFRESH, READONLY, PKEY, OPTIONS, IS_EXEC, SQL_INSERTDEF) VALUES ('CBR_ROOM', 'Lookup', 'select id, name from cbr_rooms order by name', NULL, NULL, NULL, NULL, 1, NULL, NULL, 0, NULL);
INSERT INTO BFW_ENT_VIEWS (ENTITYNAME, VIEWNAME, SQL_SELECT, SQL_INSERT, SQL_UPDATE, SQL_DELETE, SQL_REFRESH, READONLY, PKEY, OPTIONS, IS_EXEC, SQL_INSERTDEF) VALUES ('CBR_ROOM', 'List', 'select id, name from cbr_rooms', NULL, NULL, 'delete from cbr_rooms where id = :id', 'select id, name from cbr_rooms where id = :id', 1, 'ID', NULL, 0, NULL);
INSERT INTO BFW_ENT_VIEWS (ENTITYNAME, VIEWNAME, SQL_SELECT, SQL_INSERT, SQL_UPDATE, SQL_DELETE, SQL_REFRESH, READONLY, PKEY, OPTIONS, IS_EXEC, SQL_INSERTDEF) VALUES ('CBR_ROOM', 'New', 'select id, name from cbr_rooms where id is null', 'insert into cbr_rooms(id, name) values(:id, :name)', NULL, NULL, NULL, 0, NULL, NULL, 0, 'select gen_id(cbr_gen, 1) id from rdb$database');
INSERT INTO BFW_ENT_VIEWS (ENTITYNAME, VIEWNAME, SQL_SELECT, SQL_INSERT, SQL_UPDATE, SQL_DELETE, SQL_REFRESH, READONLY, PKEY, OPTIONS, IS_EXEC, SQL_INSERTDEF) VALUES ('CBR_TBL', 'Item', 'select id, name, room_id, state_id from cbr_tbl where id = :id', NULL, 'update cbr_tbl set name = :name, room_id = :room_id, state_id = :state_id where id = :id', NULL, NULL, 0, NULL, NULL, 0, NULL);
INSERT INTO BFW_ENT_VIEWS (ENTITYNAME, VIEWNAME, SQL_SELECT, SQL_INSERT, SQL_UPDATE, SQL_DELETE, SQL_REFRESH, READONLY, PKEY, OPTIONS, IS_EXEC, SQL_INSERTDEF) VALUES ('CBR_TBL', 'States', 'select * from inf_sp_enum_lookup(''CBR'', ''-'', 1)', NULL, NULL, NULL, NULL, 1, NULL, NULL, 0, NULL);
INSERT INTO BFW_ENT_VIEWS (ENTITYNAME, VIEWNAME, SQL_SELECT, SQL_INSERT, SQL_UPDATE, SQL_DELETE, SQL_REFRESH, READONLY, PKEY, OPTIONS, IS_EXEC, SQL_INSERTDEF) VALUES ('CBR_ROOM', 'Item', 'select id, name from cbr_rooms where id = :id', NULL, 'update cbr_rooms set name = :name where id = :id', NULL, NULL, 0, NULL, NULL, 0, NULL);
INSERT INTO BFW_ENT_VIEWS (ENTITYNAME, VIEWNAME, SQL_SELECT, SQL_INSERT, SQL_UPDATE, SQL_DELETE, SQL_REFRESH, READONLY, PKEY, OPTIONS, IS_EXEC, SQL_INSERTDEF) VALUES ('CBR_PRICE_TYP', 'Lookup', 'select id, name from cbr_price_typ order by name', NULL, NULL, NULL, NULL, 1, NULL, NULL, 0, NULL);
INSERT INTO BFW_ENT_VIEWS (ENTITYNAME, VIEWNAME, SQL_SELECT, SQL_INSERT, SQL_UPDATE, SQL_DELETE, SQL_REFRESH, READONLY, PKEY, OPTIONS, IS_EXEC, SQL_INSERTDEF) VALUES ('CBR_PRICE', 'Selector', 'select * from cbr_ev_price_list_sel(:dat, :typ_id)', NULL, NULL, NULL, NULL, 0, NULL, NULL, 0, NULL);
INSERT INTO BFW_ENT_VIEWS (ENTITYNAME, VIEWNAME, SQL_SELECT, SQL_INSERT, SQL_UPDATE, SQL_DELETE, SQL_REFRESH, READONLY, PKEY, OPTIONS, IS_EXEC, SQL_INSERTDEF) VALUES ('CBR_WD_VIEW', 'Tables', 'select t.id, r.name room, t.name 
from cbr_tbl t left join cbr_rooms r on (r.id = t.room_id) 
where (t.room_id = :room_id) or (:room_id = -1)
order by r.name, t.name', NULL, NULL, NULL, NULL, 1, NULL, NULL, 0, NULL);
INSERT INTO BFW_ENT_VIEWS (ENTITYNAME, VIEWNAME, SQL_SELECT, SQL_INSERT, SQL_UPDATE, SQL_DELETE, SQL_REFRESH, READONLY, PKEY, OPTIONS, IS_EXEC, SQL_INSERTDEF) VALUES ('CBR_PRICE', 'SelectorInfo', 'select * from cbr_ev_price_list_sel(:dat, :typ_id)', NULL, NULL, NULL, NULL, 1, NULL, NULL, 0, NULL);
INSERT INTO BFW_ENT_VIEWS (ENTITYNAME, VIEWNAME, SQL_SELECT, SQL_INSERT, SQL_UPDATE, SQL_DELETE, SQL_REFRESH, READONLY, PKEY, OPTIONS, IS_EXEC, SQL_INSERTDEF) VALUES ('CBR_ORD_DESK', 'Menu', 'select id, name, grp_id from cbr_menu m where grp_id = :grp_id', NULL, NULL, NULL, NULL, 1, NULL, NULL, 0, NULL);
INSERT INTO BFW_ENT_VIEWS (ENTITYNAME, VIEWNAME, SQL_SELECT, SQL_INSERT, SQL_UPDATE, SQL_DELETE, SQL_REFRESH, READONLY, PKEY, OPTIONS, IS_EXEC, SQL_INSERTDEF) VALUES ('CBR_ORD', 'Journal', 'select *from cbr_ev_ord_jrn(null, :state_id, :date1, :date2)', NULL, NULL, 'execute procedure cbr_ev_ord_del(:id)', 'select *from cbr_ev_ord_jrn(:id, :state_id, :dend, :dbeg)', 1, NULL, NULL, 0, NULL);
INSERT INTO BFW_ENT_VIEWS (ENTITYNAME, VIEWNAME, SQL_SELECT, SQL_INSERT, SQL_UPDATE, SQL_DELETE, SQL_REFRESH, READONLY, PKEY, OPTIONS, IS_EXEC, SQL_INSERTDEF) VALUES ('CBR_ORD_DESK', 'Header', 'select h.id, t.name tbl, r.name room,  h.idat, 
          h.state_id,
          (select e.name from inf_sp_enum_get(''cbr_ord'', ''state_id'', h.state_id) e)  state,
         sum(i.qty * i.price) summ
from cbr_ord h
     left join cbr_tbl t on (h.tbl_id = t.id) 
     left join cbr_rooms r on (r.id = t.room_id)
     left join cbr_ordi i on (i.hid = h.id)
where h.id = :id
group by h.id, t.name, r.name, h.idat, h.state_id', NULL, NULL, NULL, NULL, 1, NULL, NULL, 0, NULL);
INSERT INTO BFW_ENT_VIEWS (ENTITYNAME, VIEWNAME, SQL_SELECT, SQL_INSERT, SQL_UPDATE, SQL_DELETE, SQL_REFRESH, READONLY, PKEY, OPTIONS, IS_EXEC, SQL_INSERTDEF) VALUES ('CBR_WD_VIEW', 'TableInfo', 'select t.id, r.name room, t.name from cbr_tbl t left join cbr_rooms r on (r.id = t.room_id)  where t.id = :tbl_id', NULL, NULL, NULL, NULL, 1, NULL, NULL, 0, NULL);
INSERT INTO BFW_ENT_VIEWS (ENTITYNAME, VIEWNAME, SQL_SELECT, SQL_INSERT, SQL_UPDATE, SQL_DELETE, SQL_REFRESH, READONLY, PKEY, OPTIONS, IS_EXEC, SQL_INSERTDEF) VALUES ('CBR_WD_VIEW', 'Orders', 'select h.id, 
         (select e.name from inf_sp_enum_get(''cbr_ord'', ''state_id'', h.state_id) e)  state,
        h.last_act_time, 
        sum(i.qty * i.price) summ
from cbr_ord h    
     left join cbr_ordi i on (i.hid = h.id)
where h.tbl_id = :tbl_id and h.state_id < 3
group by   h.last_act_time, h.state_id,  h.id', NULL, NULL, NULL, NULL, 1, NULL, NULL, 0, NULL);
INSERT INTO BFW_ENT_VIEWS (ENTITYNAME, VIEWNAME, SQL_SELECT, SQL_INSERT, SQL_UPDATE, SQL_DELETE, SQL_REFRESH, READONLY, PKEY, OPTIONS, IS_EXEC, SQL_INSERTDEF) VALUES ('CBR_ORD', 'States', 'select * from inf_sp_states_list(''CBR_ORD'')', NULL, NULL, NULL, NULL, 1, NULL, NULL, 0, NULL);
INSERT INTO BFW_ENT_VIEWS (ENTITYNAME, VIEWNAME, SQL_SELECT, SQL_INSERT, SQL_UPDATE, SQL_DELETE, SQL_REFRESH, READONLY, PKEY, OPTIONS, IS_EXEC, SQL_INSERTDEF) VALUES ('UTL_JRN', 'Selector', 'select * from utl_ev_jrn_selector(:date1, :date2)', NULL, NULL, NULL, NULL, 0, NULL, NULL, 0, NULL);
INSERT INTO BFW_ENT_VIEWS (ENTITYNAME, VIEWNAME, SQL_SELECT, SQL_INSERT, SQL_UPDATE, SQL_DELETE, SQL_REFRESH, READONLY, PKEY, OPTIONS, IS_EXEC, SQL_INSERTDEF) VALUES ('UTL_JRN', 'SelectorInfo', 'select * from utl_ev_jrn_selectorinfo(:use_drange, :date1, :date2)', NULL, NULL, NULL, NULL, 1, NULL, NULL, 0, NULL);
INSERT INTO BFW_ENT_VIEWS (ENTITYNAME, VIEWNAME, SQL_SELECT, SQL_INSERT, SQL_UPDATE, SQL_DELETE, SQL_REFRESH, READONLY, PKEY, OPTIONS, IS_EXEC, SQL_INSERTDEF) VALUES ('CBR_ORD_DESK', 'MenuGrp', 'select id, name from cbr_menu_grp order by name', NULL, NULL, NULL, NULL, 1, NULL, NULL, 0, NULL);
INSERT INTO BFW_ENT_VIEWS (ENTITYNAME, VIEWNAME, SQL_SELECT, SQL_INSERT, SQL_UPDATE, SQL_DELETE, SQL_REFRESH, READONLY, PKEY, OPTIONS, IS_EXEC, SQL_INSERTDEF) VALUES ('CBR_ORD_DESK', 'CreateHeader', 'select * from cbr_ev_ord_desk_ord_create(:tbl_id)', NULL, NULL, NULL, NULL, 1, NULL, NULL, 0, NULL);
INSERT INTO BFW_ENT_VIEWS (ENTITYNAME, VIEWNAME, SQL_SELECT, SQL_INSERT, SQL_UPDATE, SQL_DELETE, SQL_REFRESH, READONLY, PKEY, OPTIONS, IS_EXEC, SQL_INSERTDEF) VALUES ('UTL_JRN', 'States', 'select * from utl_ev_jrn_states(:tablename)', NULL, NULL, NULL, NULL, 1, NULL, NULL, 0, NULL);
INSERT INTO BFW_ENT_VIEWS (ENTITYNAME, VIEWNAME, SQL_SELECT, SQL_INSERT, SQL_UPDATE, SQL_DELETE, SQL_REFRESH, READONLY, PKEY, OPTIONS, IS_EXEC, SQL_INSERTDEF) VALUES ('CBR_ORD', 'Head', 'select h.id, h.dat, r.name room, t.name tbl
from cbr_ord h
left join cbr_tbl t on (h.tbl_id = t.id)
left join cbr_rooms r on (r.id = t.room_id)
where h.id = :id', NULL, NULL, NULL, NULL, 0, NULL, NULL, 0, NULL);
INSERT INTO BFW_ENT_VIEWS (ENTITYNAME, VIEWNAME, SQL_SELECT, SQL_INSERT, SQL_UPDATE, SQL_DELETE, SQL_REFRESH, READONLY, PKEY, OPTIONS, IS_EXEC, SQL_INSERTDEF) VALUES ('CBR_ORD_DESK', 'Items', 'select * from cbr_ev_ord_desk_ordi(:hid, :menu_id)', 'insert into cbr_ordi(id, hid, menu_id, qty, price) values(:id, :hid, :menu_id, :qty, :price)', 'update cbr_ordi set qty = :qty where id = :id', 'delete from cbr_ordi where id = :id', NULL, 0, NULL, NULL, 0, 'select * from cbr_ev_ord_desk_ordi_i(:hid, :menu_id)');
INSERT INTO BFW_ENT_VIEWS (ENTITYNAME, VIEWNAME, SQL_SELECT, SQL_INSERT, SQL_UPDATE, SQL_DELETE, SQL_REFRESH, READONLY, PKEY, OPTIONS, IS_EXEC, SQL_INSERTDEF) VALUES ('CBR_ORD_DESK', 'KOrd', 'select * from cbr_ev_kord_create(:ord_id)', NULL, NULL, NULL, NULL, 1, NULL, NULL, 0, NULL);
INSERT INTO BFW_ENT_VIEWS (ENTITYNAME, VIEWNAME, SQL_SELECT, SQL_INSERT, SQL_UPDATE, SQL_DELETE, SQL_REFRESH, READONLY, PKEY, OPTIONS, IS_EXEC, SQL_INSERTDEF) VALUES ('CBR_KORD', 'Create', 'select * from cbr_ev_kord_create(:ord_id)', NULL, NULL, NULL, NULL, 1, NULL, NULL, 0, NULL);
INSERT INTO BFW_ENT_VIEWS (ENTITYNAME, VIEWNAME, SQL_SELECT, SQL_INSERT, SQL_UPDATE, SQL_DELETE, SQL_REFRESH, READONLY, PKEY, OPTIONS, IS_EXEC, SQL_INSERTDEF) VALUES ('CBR_ORD', 'PreCheck', 'execute procedure cbr_ev_ord_precheck(:id)', NULL, NULL, NULL, NULL, 1, NULL, NULL, 1, NULL);
INSERT INTO BFW_ENT_VIEWS (ENTITYNAME, VIEWNAME, SQL_SELECT, SQL_INSERT, SQL_UPDATE, SQL_DELETE, SQL_REFRESH, READONLY, PKEY, OPTIONS, IS_EXEC, SQL_INSERTDEF) VALUES ('CBR_ORD', 'Details', 'select i.id from cbr_ordi i where hid = :hid', NULL, NULL, NULL, NULL, 1, NULL, NULL, 0, NULL);
INSERT INTO BFW_ENT_VIEWS (ENTITYNAME, VIEWNAME, SQL_SELECT, SQL_INSERT, SQL_UPDATE, SQL_DELETE, SQL_REFRESH, READONLY, PKEY, OPTIONS, IS_EXEC, SQL_INSERTDEF) VALUES ('CBR_ORD', 'Payt', 'update cbr_ord set state_id = 3 where id = :id', NULL, NULL, NULL, NULL, 1, NULL, NULL, 1, NULL);
INSERT INTO BFW_ENT_VIEWS (ENTITYNAME, VIEWNAME, SQL_SELECT, SQL_INSERT, SQL_UPDATE, SQL_DELETE, SQL_REFRESH, READONLY, PKEY, OPTIONS, IS_EXEC, SQL_INSERTDEF) VALUES ('CBR_WD_VIEW', 'Rooms', 'select id, name from cbr_rooms union select cast(-1 as integer) id, cast('' Все залы'' as varchar(50)) name from rdb$database order by 2 ', NULL, NULL, NULL, NULL, 1, NULL, NULL, 0, NULL);

COMMIT WORK;

INSERT INTO BFW_UI (URI, CLS, ENTITYNAME, VIEWNAME, TITLE, GRP, MENUIDX, OPTIONS, PARAMS, OUTS, USEPERM, PKG) VALUES ('views.CBR_MENU.List', 'IEntityListView', 'CBR_MENU', 'List', 'Меню', 'Система', 1, 'CanEdit', NULL, NULL, 0, 'CBR');
INSERT INTO BFW_UI (URI, CLS, ENTITYNAME, VIEWNAME, TITLE, GRP, MENUIDX, OPTIONS, PARAMS, OUTS, USEPERM, PKG) VALUES ('views.CBR_PRICE_TYP.List', 'IEntityListView', 'CBR_PRICE_TYP', 'List', 'Типы цен', NULL, 0, 'CanEdit', NULL, NULL, 0, 'CBR');
INSERT INTO BFW_UI (URI, CLS, ENTITYNAME, VIEWNAME, TITLE, GRP, MENUIDX, OPTIONS, PARAMS, OUTS, USEPERM, PKG) VALUES ('views.CBR_WAITER_DESK.view', 'views.CBR_WAITER_DESK.view', '-', NULL, 'Заказы', 'Система', 5, NULL, NULL, NULL, 0, 'CBR');
INSERT INTO BFW_UI (URI, CLS, ENTITYNAME, VIEWNAME, TITLE, GRP, MENUIDX, OPTIONS, PARAMS, OUTS, USEPERM, PKG) VALUES ('views.CBR_PRICE_TYP.New', 'IEntityNewView', 'CBR_PRICE_TYP', 'New', 'Новый тип цены', NULL, 0, NULL, NULL, NULL, 0, 'CBR');
INSERT INTO BFW_UI (URI, CLS, ENTITYNAME, VIEWNAME, TITLE, GRP, MENUIDX, OPTIONS, PARAMS, OUTS, USEPERM, PKG) VALUES ('views.CBR_PRICE_TYP.Item', 'IEntityItemView', 'CBR_PRICE_TYP', 'Item', 'Тип цены', NULL, 0, NULL, 'ID', NULL, 0, 'CBR');
INSERT INTO BFW_UI (URI, CLS, ENTITYNAME, VIEWNAME, TITLE, GRP, MENUIDX, OPTIONS, PARAMS, OUTS, USEPERM, PKG) VALUES ('views.CBR_MENU.New', 'IEntityNewView', 'CBR_MENU', 'New', 'Новое блюдо', NULL, 0, NULL, NULL, NULL, 0, 'CBR');
INSERT INTO BFW_UI (URI, CLS, ENTITYNAME, VIEWNAME, TITLE, GRP, MENUIDX, OPTIONS, PARAMS, OUTS, USEPERM, PKG) VALUES ('views.CBR_ORDER_DESK.Item', 'views.CBR_ORDER_DESK.Item', '-', NULL, 'Заказ', NULL, 0, NULL, 'ID', NULL, 0, NULL);
INSERT INTO BFW_UI (URI, CLS, ENTITYNAME, VIEWNAME, TITLE, GRP, MENUIDX, OPTIONS, PARAMS, OUTS, USEPERM, PKG) VALUES ('views.ENTITY.NewDef', 'IEntityNewDef', '-', '-', '-', NULL, 0, 'DefaultURI=views.%s.New', NULL, NULL, 0, NULL);
INSERT INTO BFW_UI (URI, CLS, ENTITYNAME, VIEWNAME, TITLE, GRP, MENUIDX, OPTIONS, PARAMS, OUTS, USEPERM, PKG) VALUES ('views.ENTITY.ItemDef', 'IEntityItemDef', '-', '-', '-', NULL, 0, 'DefaultURI=views.%s.Item;EViewURI=ItemURI;EViewURIField=URI', NULL, NULL, 0, NULL);
INSERT INTO BFW_UI (URI, CLS, ENTITYNAME, VIEWNAME, TITLE, GRP, MENUIDX, OPTIONS, PARAMS, OUTS, USEPERM, PKG) VALUES ('views.CBR_ORDER_DESK.New', 'views.CBR_ORDER_DESK.New', '-', NULL, 'Новый заказ', NULL, 0, NULL, 'TBL_ID', NULL, 0, NULL);
INSERT INTO BFW_UI (URI, CLS, ENTITYNAME, VIEWNAME, TITLE, GRP, MENUIDX, OPTIONS, PARAMS, OUTS, USEPERM, PKG) VALUES ('views.CBR_PRICE.List', 'IEntityListView', 'CBR_PRICE', 'List', 'Цены', 'Система', 2, 'UseSelector', NULL, NULL, 0, 'CBR');
INSERT INTO BFW_UI (URI, CLS, ENTITYNAME, VIEWNAME, TITLE, GRP, MENUIDX, OPTIONS, PARAMS, OUTS, USEPERM, PKG) VALUES ('views.CBR_PRICE.Selector', 'IEntitySelectorView', 'CBR_PRICE', 'Selector', 'Параметры', NULL, 0, NULL, 'DAT;TYP_ID', 'DAT;TYP_ID', 0, 'CBR');
INSERT INTO BFW_UI (URI, CLS, ENTITYNAME, VIEWNAME, TITLE, GRP, MENUIDX, OPTIONS, PARAMS, OUTS, USEPERM, PKG) VALUES ('views.CBR_MENU.Item', 'IEntityItemView', 'CBR_MENU', 'Item', 'Блюдо', NULL, 0, NULL, 'id', NULL, 0, 'CBR');
INSERT INTO BFW_UI (URI, CLS, ENTITYNAME, VIEWNAME, TITLE, GRP, MENUIDX, OPTIONS, PARAMS, OUTS, USEPERM, PKG) VALUES ('views.CBR_UI.MainMenu', 'IEntityDeskMenuView', 'CBR_UI', 'MainMenu', 'CaBaRe System', NULL, 0, NULL, NULL, NULL, 0, 'CBR');
INSERT INTO BFW_UI (URI, CLS, ENTITYNAME, VIEWNAME, TITLE, GRP, MENUIDX, OPTIONS, PARAMS, OUTS, USEPERM, PKG) VALUES ('views.CBR_MENU_GRP.List', 'IEntityListView', 'CBR_MENU_GRP', 'List', 'Группы меню', NULL, 0, 'CanEdit', NULL, NULL, 0, 'CBR');
INSERT INTO BFW_UI (URI, CLS, ENTITYNAME, VIEWNAME, TITLE, GRP, MENUIDX, OPTIONS, PARAMS, OUTS, USEPERM, PKG) VALUES ('views.CBR_MENU_GRP.New', 'IEntityNewView', 'CBR_MENU_GRP', 'New', 'Новая группа меню', NULL, 0, NULL, NULL, NULL, 0, 'CBR');
INSERT INTO BFW_UI (URI, CLS, ENTITYNAME, VIEWNAME, TITLE, GRP, MENUIDX, OPTIONS, PARAMS, OUTS, USEPERM, PKG) VALUES ('views.CBR_MENU_GRP.Item', 'IEntityItemView', 'CBR_MENU_GRP', 'Item', 'Группа меню', NULL, 0, NULL, 'ID', NULL, 0, 'CBR');
INSERT INTO BFW_UI (URI, CLS, ENTITYNAME, VIEWNAME, TITLE, GRP, MENUIDX, OPTIONS, PARAMS, OUTS, USEPERM, PKG) VALUES ('views.CBR_TBL.List', 'IEntityListView', 'CBR_TBL', 'List', 'Столы', 'Система', 3, 'CanEdit', NULL, NULL, 0, 'CBR');
INSERT INTO BFW_UI (URI, CLS, ENTITYNAME, VIEWNAME, TITLE, GRP, MENUIDX, OPTIONS, PARAMS, OUTS, USEPERM, PKG) VALUES ('views.CBR_TBL.New', 'IEntityNewView', 'CBR_TBL', 'New', 'Новый стол', NULL, 0, NULL, NULL, NULL, 0, 'CBR');
INSERT INTO BFW_UI (URI, CLS, ENTITYNAME, VIEWNAME, TITLE, GRP, MENUIDX, OPTIONS, PARAMS, OUTS, USEPERM, PKG) VALUES ('views.CBR_ROOM.List', 'IEntityListView', 'CBR_ROOM', 'List', 'Список залов', NULL, 0, 'CanEdit', NULL, NULL, 0, 'CBR');
INSERT INTO BFW_UI (URI, CLS, ENTITYNAME, VIEWNAME, TITLE, GRP, MENUIDX, OPTIONS, PARAMS, OUTS, USEPERM, PKG) VALUES ('views.CBR_ROOM.New', 'IEntityNewView', 'CBR_ROOM', 'New', 'Новый зал', NULL, 0, NULL, NULL, NULL, 0, 'CBR');
INSERT INTO BFW_UI (URI, CLS, ENTITYNAME, VIEWNAME, TITLE, GRP, MENUIDX, OPTIONS, PARAMS, OUTS, USEPERM, PKG) VALUES ('views.CBR_TBL.Item', 'IEntityItemView', 'CBR_TBL', 'Item', 'Стол', NULL, 0, NULL, 'ID', NULL, 0, 'CBR');
INSERT INTO BFW_UI (URI, CLS, ENTITYNAME, VIEWNAME, TITLE, GRP, MENUIDX, OPTIONS, PARAMS, OUTS, USEPERM, PKG) VALUES ('views.CBR_ROOM.Item', 'IEntityItemView', 'CBR_ROOM', 'Item', 'Зал', NULL, 0, NULL, 'id', NULL, 0, 'CBR');
INSERT INTO BFW_UI (URI, CLS, ENTITYNAME, VIEWNAME, TITLE, GRP, MENUIDX, OPTIONS, PARAMS, OUTS, USEPERM, PKG) VALUES ('activities.KORDER.Create', 'activities.KORDER.Create', '-', '-', '-', NULL, 0, NULL, 'ORD_ID', NULL, 0, '');
INSERT INTO BFW_UI (URI, CLS, ENTITYNAME, VIEWNAME, TITLE, GRP, MENUIDX, OPTIONS, PARAMS, OUTS, USEPERM, PKG) VALUES ('views.CBR_ORD.Journal', 'IEntityJournalView', 'CBR_ORD', 'Journal', 'Журанал заказов', 'Система', 4, 'CanOpen', NULL, NULL, 0, 'CBR');
INSERT INTO BFW_UI (URI, CLS, ENTITYNAME, VIEWNAME, TITLE, GRP, MENUIDX, OPTIONS, PARAMS, OUTS, USEPERM, PKG) VALUES ('views.UTL_JRN.Selector', 'IEntitySelectorView', 'UTL_JRN', 'Selector', 'Отбор', NULL, 0, '', 'DATE1;DATE2', 'DATE1;DATE2', 0, 'MISC');
INSERT INTO BFW_UI (URI, CLS, ENTITYNAME, VIEWNAME, TITLE, GRP, MENUIDX, OPTIONS, PARAMS, OUTS, USEPERM, PKG) VALUES ('views.CBR_ORD.Item', 'IEntityComplexView', 'CBR_ORD', 'Head', 'Заказ', NULL, 0, NULL, 'ID', NULL, 0, 'CBR');

COMMIT WORK;

INSERT INTO BFW_UI_CMD (URI, CMD, CAPTION, IDX, GRP, DEF, HANDLER, PARAMS, OUTS, OPTIONS) VALUES ('IEntityListView', 'commands.view.new', 'Добавить', 0, NULL, 0, 'views.ENTITY.NewDef', '', NULL, NULL);
INSERT INTO BFW_UI_CMD (URI, CMD, CAPTION, IDX, GRP, DEF, HANDLER, PARAMS, OUTS, OPTIONS) VALUES ('IEntityListView', 'commands.view.open', 'Открыть', 0, NULL, 0, 'views.ENTITY.ItemDef', 'ID=ITEM_ID', NULL, NULL);
INSERT INTO BFW_UI_CMD (URI, CMD, CAPTION, IDX, GRP, DEF, HANDLER, PARAMS, OUTS, OPTIONS) VALUES ('views.CBR_PRICE.List', 'cmd.PriceTypList', 'Типы цен', 0, NULL, 0, 'views.CBR_PRICE_TYP.List', NULL, NULL, NULL);
INSERT INTO BFW_UI_CMD (URI, CMD, CAPTION, IDX, GRP, DEF, HANDLER, PARAMS, OUTS, OPTIONS) VALUES ('IEntityJournalView', 'commands.view.open', 'Открыть', 0, NULL, 0, 'views.ENTITY.ItemDef', 'ID=ITEM_ID', NULL, NULL);
INSERT INTO BFW_UI_CMD (URI, CMD, CAPTION, IDX, GRP, DEF, HANDLER, PARAMS, OUTS, OPTIONS) VALUES ('views.CBR_MENU.List', 'cmd.Groups', 'Группы', 0, NULL, 0, 'views.CBR_MENU_GRP.List', NULL, NULL, NULL);
INSERT INTO BFW_UI_CMD (URI, CMD, CAPTION, IDX, GRP, DEF, HANDLER, PARAMS, OUTS, OPTIONS) VALUES ('views.CBR_TBL.List', 'cmd.Rooms', 'Список залов', 0, NULL, 0, 'views.CBR_ROOM.List', NULL, NULL, NULL);

COMMIT WORK;

INSERT INTO INF_MSG (CODE, MSG) VALUES ('ERROR.PRECHECK', 'Есть невыполненный заказ!');

COMMIT WORK;



/******************************************************************************/
/***                           Unique Constraints                           ***/
/******************************************************************************/

ALTER TABLE CBR_PRICE ADD CONSTRAINT UNQ1_CBR_PRICE UNIQUE (MENU_ID, TYP_ID, DAT);


/******************************************************************************/
/***                              Primary Keys                              ***/
/******************************************************************************/

ALTER TABLE CBR_KORD ADD CONSTRAINT PK_CBR_KORD PRIMARY KEY (ID);
ALTER TABLE CBR_KORDI ADD CONSTRAINT PK_CBR_KORDI PRIMARY KEY (ID);
ALTER TABLE CBR_MENU ADD CONSTRAINT PK_CBR_MENU PRIMARY KEY (ID);
ALTER TABLE CBR_MENU_GRP ADD CONSTRAINT PK_CBR_MENU_GRP PRIMARY KEY (ID);
ALTER TABLE CBR_ORD ADD CONSTRAINT PK_CBR_ORD PRIMARY KEY (ID);
ALTER TABLE CBR_ORDI ADD CONSTRAINT PK_CBR_ORDI PRIMARY KEY (ID);
ALTER TABLE CBR_PRICE ADD CONSTRAINT PK_CBR_PRICE PRIMARY KEY (ID);
ALTER TABLE CBR_PRICE_TYP ADD CONSTRAINT PK_CBR_PRICE_TYP PRIMARY KEY (ID);
ALTER TABLE CBR_ROOMS ADD CONSTRAINT PK_CBR_ROOMS PRIMARY KEY (ID);
ALTER TABLE CBR_TBL ADD CONSTRAINT PK_CBR_TBL PRIMARY KEY (ID);
ALTER TABLE INF_ENUM ADD CONSTRAINT PK_INF_ENUM PRIMARY KEY (TABLENAME, FIELDNAME, ID);
ALTER TABLE INF_MSG ADD CONSTRAINT PK_INF_MSG PRIMARY KEY (CODE);
ALTER TABLE INF_STATES ADD CONSTRAINT PK_INF_STATES PRIMARY KEY (TABLENAME, ID);


/******************************************************************************/
/***                              Foreign Keys                              ***/
/******************************************************************************/

ALTER TABLE CBR_MENU ADD CONSTRAINT FK_CBR_MENU_GRP FOREIGN KEY (GRP_ID) REFERENCES CBR_MENU_GRP (ID);
ALTER TABLE CBR_PRICE ADD CONSTRAINT FK_CBR_PRICE_MENU FOREIGN KEY (MENU_ID) REFERENCES CBR_MENU (ID);
ALTER TABLE CBR_PRICE ADD CONSTRAINT FK_CBR_PRICE_TYP FOREIGN KEY (TYP_ID) REFERENCES CBR_PRICE_TYP (ID);
ALTER TABLE CBR_TBL ADD CONSTRAINT FK_CBR_TBL_ROOM FOREIGN KEY (ROOM_ID) REFERENCES CBR_ROOMS (ID);


/******************************************************************************/
/***                           Stored Procedures                            ***/
/******************************************************************************/


SET TERM ^ ;

CREATE OR ALTER PROCEDURE CBR_EV_KORD_CREATE (
    ORD_ID_ INTEGER)
RETURNS (
    ID INTEGER)
AS
declare variable check_ integer;
declare variable const_state_active integer = 1;
declare variable const_state_precheck integer = 2;
declare variable ordi_id integer;
declare variable kordi_id integer;
begin
  id = null;

  select count(*)
  from cbr_ord h
       left join cbr_ordi i on (h.id = i.hid)
  where h.id = :ord_id_ and h.state_id < :const_state_precheck
        and i.kord_id is null
        and i.id is not null
  into :check_;

  if (coalesce(check_, 0) > 0) then
  begin
    update cbr_ord
    set state_id = :const_state_active
    where id = :ord_id_;

    id = gen_id(cbr_gen_doc, 1);
    insert into cbr_kord(id, dat)
    values(:id, 'today');

    for
      select i.id
      from cbr_ord h
           left join cbr_ordi i on (h.id = i.hid)
      where h.id = :ord_id_ and i.kord_id is null
      into :ordi_id
    do begin
      kordi_id = gen_id(cbr_gen_doc, 1);
      insert into cbr_kordi(id, hid, ordi_id)
      values(:kordi_id, :id, :ordi_id);

      update cbr_ordi
      set kord_id = :id
      where id = :ordi_id;

    end
  end
  suspend;
end^


CREATE OR ALTER PROCEDURE CBR_EV_MENU_ITEM (
    ID_ INTEGER)
RETURNS (
    ID INTEGER,
    NAME VARCHAR(50),
    GRP_ID INTEGER,
    STATE_ID INTEGER,
    UNT VARCHAR(10))
AS
begin
  select id, name, grp_id, state_id, unt
  from cbr_menu
  where id = :id_
  into :id, :name, :grp_id, :state_id, :unt;
  suspend;
end^


CREATE OR ALTER PROCEDURE CBR_EV_MENU_ITEM_U (
    ID INTEGER,
    NAME VARCHAR(50),
    GRP_ID INTEGER,
    STATE_ID INTEGER,
    UNT VARCHAR(10))
AS
begin
  update cbr_menu
  set name = :name,
      grp_id = :grp_id,
      state_id = :state_id,
      unt = :unt
  where id = :id;
end^


CREATE OR ALTER PROCEDURE CBR_EV_MENU_LIST (
    ID_ INTEGER,
    SHOW_CLOSED_ INTEGER)
RETURNS (
    ID INTEGER,
    GRP VARCHAR(50),
    NAME VARCHAR(50),
    UNT VARCHAR(10),
    STATE VARCHAR(50),
    UI_ROW_STYLE VARCHAR(50))
AS
declare variable state_id integer;
begin
  for
    select i.id, i.name, i.unt, g.name,
       (select e.name from inf_sp_enum_get('cbr_menu', 'state_id', i.state_id) e),
       i.state_id
    from cbr_menu i
         left join cbr_menu_grp g on (g.id = i.grp_id)
    where ((:id_ is not null and i.id = :id_) or (:id_ is null))
          and
            ((:show_closed_ = 1) or (:show_closed_ = 0 and i.state_id < 3))
    order by g.name, i.name
    into :id, :name, :unt, :grp, :state, :state_id
  do begin
    ui_row_style = null;
    if (state_id = 3) then
      ui_row_style = 'Style.Hidden';


    suspend;
  end
end^


CREATE OR ALTER PROCEDURE CBR_EV_MENU_NEW
RETURNS (
    ID INTEGER,
    NAME VARCHAR(50),
    GRP_ID INTEGER,
    UNT VARCHAR(10))
AS
begin
  id = gen_id(cbr_gen, 1);

  suspend;
end^


CREATE OR ALTER PROCEDURE CBR_EV_MENU_NEW_U (
    ID INTEGER,
    NAME VARCHAR(50),
    GRP_ID INTEGER,
    UNT VARCHAR(10))
AS
begin
  insert into cbr_menu(id, name, grp_id, unt, state_id)
  values(:id, :name, :grp_id, :unt, 1);

end^


CREATE OR ALTER PROCEDURE CBR_EV_ORD_DESK_ORD_CREATE (
    TBL_ID_ INTEGER)
RETURNS (
    ID INTEGER)
AS
declare variable price_typ_id integer;
begin
  select first 1 id from cbr_price_typ pt
  into :price_typ_id;

  id = gen_id(cbr_gen_doc, 1);
  insert into cbr_ord(id, dat, tbl_id, price_typ_id)
  values(:id, 'today', :tbl_id_, :price_typ_id);

  suspend;
end^


CREATE OR ALTER PROCEDURE CBR_EV_ORD_DESK_ORDI (
    HID_ INTEGER,
    MENU_ID_ INTEGER)
RETURNS (
    ID INTEGER,
    HID INTEGER,
    RECNO INTEGER,
    MENU_ID INTEGER,
    DISH VARCHAR(50),
    UNT VARCHAR(10),
    QTY DOUBLE PRECISION,
    PRICE DOUBLE PRECISION,
    SUMM DOUBLE PRECISION,
    FKORD INTEGER)
AS
declare variable kord_id integer;
begin
  recno = 0;
  for
    select i.id, i.hid, i.menu_id, m.name, m.unt, i.qty, i.price, i.qty * i.price,
           i.kord_id

    from cbr_ordi i left join cbr_menu m on (m.id = i.menu_id)
    where i.hid = :hid_
    order by i.id
    into :id, :hid, :menu_id, :dish, :unt, :qty, :price, :summ,
         :kord_id
  do begin
    recno = recno + 1;

    if (kord_id is null) then
      fkord = 0;
    else
      fkord = 1;

    suspend;
  end
end^


CREATE OR ALTER PROCEDURE CBR_EV_ORD_DESK_ORDI_I (
    HID_ INTEGER,
    MENU_ID_ INTEGER)
RETURNS (
    ID INTEGER,
    HID INTEGER,
    MENU_ID INTEGER,
    DISH VARCHAR(50),
    UNT VARCHAR(10),
    QTY DOUBLE PRECISION,
    PRICE DOUBLE PRECISION,
    SUMM DOUBLE PRECISION,
    FKORD INTEGER)
AS
declare variable dat date;
declare variable price_typ_id integer;
begin
  id = gen_id(cbr_gen_doc, 1);
  hid = hid_;
  menu_id = menu_id_;
  fkord = 0;

  select name, unt from cbr_menu where id = :menu_id
  into :dish, :unt;

  qty = 1;

  select h.dat, h.price_typ_id
  from cbr_ord h
  where id = :hid
  into :dat, :price_typ_id;

  select first 1 p.price
  from cbr_price p
  where p.menu_id = :menu_id and p.dat <= :dat and p.typ_id = :price_typ_id
  order by p.dat desc
  into :price;

  summ = qty * price;



  suspend;
end^


CREATE OR ALTER PROCEDURE CBR_EV_ORD_JRN (
    ID_ INTEGER,
    STATE_ID_ INTEGER,
    DBEG_ DATE,
    DEND_ DATE)
RETURNS (
    ID INTEGER,
    DAT DATE,
    ROOM VARCHAR(50),
    TBL VARCHAR(50),
    IDAT TIMESTAMP)
AS
begin
  for
    select p.id, p.dat, r.name, t.name, p.idat
    from cbr_ev_ord_jrn_(:id_, :state_id_, :dbeg_, :dend_) p
         left join cbr_tbl t on (t.id = p.tbl_id)
         left join cbr_rooms r on (r.id = t.room_id)
    order by p.dat, r.name, t.name
    into :id, :dat, :room, :tbl, :idat
  do begin

    suspend;
  end
end^


CREATE OR ALTER PROCEDURE CBR_EV_ORD_JRN_ (
    ID_ INTEGER,
    STATE_ID_ INTEGER,
    DBEG_ DATE,
    DEND_ DATE)
RETURNS (
    ID INTEGER,
    DAT DATE,
    STATE_ID INTEGER,
    TBL_ID INTEGER,
    IDAT TIMESTAMP)
AS
declare variable use_drange integer;
begin
  select drange from inf_sp_states_get('cbr_ord', :state_id_)
  into use_drange;

  if (state_id_ = -1) then
    use_drange = 1;

  if (id_ is null) then
  begin
    if (use_drange = 1) then
      for
        select h.id, h.dat, h.state_id, h.tbl_id, h.idat
        from cbr_ord h
        where h.dat between :dbeg_ and :dend_ and h.state_id = :state_id_
        into :id, :dat, :state_id, :tbl_id, :idat
      do suspend;
    else
      for
        select h.id, h.dat, h.state_id, h.tbl_id, h.idat
        from cbr_ord h
        where h.state_id = :state_id_
        into :id, :dat, :state_id, :tbl_id, :idat
      do suspend;
  end
  else
    for
        select h.id, h.dat, h.state_id, h.tbl_id, h.idat
        from cbr_ord h
      where h.id = :id_ and h.state_id = :state_id_
        into :id, :dat, :state_id, :tbl_id, :idat
    do suspend;

end^


CREATE OR ALTER PROCEDURE CBR_EV_ORD_PRECHECK (
    ID INTEGER)
AS
declare variable msg varchar(250);
begin
  if (exists (select * from cbr_ordi i where i.hid = :id and i.kord_id is null )) then
  begin
    select msg from inf_msg where code = 'ERROR.PRECHECK'
    into :msg;

    exception raise :msg;
  end

  update cbr_ord set state_id = 2 where id = :id;
end^


CREATE OR ALTER PROCEDURE CBR_EV_PRICE_LIST (
    DAT_ DATE,
    TYP_ID_ INTEGER)
RETURNS (
    MENU_ID INTEGER,
    DAT DATE,
    TYP_ID INTEGER,
    GRP VARCHAR(50),
    DISH VARCHAR(50),
    UNT VARCHAR(10),
    PRICE DOUBLE PRECISION,
    PRICE_NEW DOUBLE PRECISION)
AS
declare variable price_id integer;
begin
  dat = :dat_;
  typ_id = :typ_id_;

  if (dat is null or typ_id is null) then exit;

  for
    select m.id, g.name, m.name, m.unt
    from cbr_menu m left join cbr_menu_grp g on (m.grp_id = g.id)
    where m.state_id < 3
    order by g.name, m.name
    into :menu_id, :grp, :dish, :unt
  do begin
    price = null;
    price_new = null;
    price_id = null;

    select first 1 p.price
    from cbr_price p
    where p.menu_id = :menu_id and p.typ_id = :typ_id and p.dat < :dat
    order by p.dat desc
    into :price;

    select p.id, p.price
    from cbr_price p
    where p.menu_id = :menu_id and p.typ_id = :typ_id and p.dat = :dat
    into :price_id, :price_new;


    suspend;
  end
end^


CREATE OR ALTER PROCEDURE CBR_EV_PRICE_LIST_SEL (
    DAT_ DATE,
    TYP_ID_ INTEGER)
RETURNS (
    DAT DATE,
    TYP_ID INTEGER,
    INFO VARCHAR(250))
AS
declare variable typ varchar(50);
begin
  dat = coalesce(dat_, 'TODAY');
  typ_id = typ_id_;

  if (typ_id is null) then
    select first 1 id
    from cbr_price_typ
    order by id
    into :typ_id;

  if (typ_id is null) then
    typ = 'УКАЖИТЕ ТИП ЦЕН';
  else
    select name from cbr_price_typ where id = :typ_id
    into :typ;

  info = 'На дату: ' || dat || '   Тип цен:' || typ;

  suspend;
end^


CREATE OR ALTER PROCEDURE CBR_EV_PRICE_LIST_U (
    MENU_ID INTEGER,
    DAT DATE,
    TYP_ID INTEGER,
    PRICE_NEW DOUBLE PRECISION)
AS
declare variable price_id integer;
begin
  select p.id
  from cbr_price p
  where p.menu_id = :menu_id and p.dat = :dat and p.typ_id = :typ_id
  into :price_id;

  if (price_id is null) then
  begin
    if (price_new is null) then exit;
    price_id = gen_id(cbr_gen_doc, 1);
    insert into cbr_price(id, menu_id, typ_id, dat, price)
    values(:price_id, :menu_id, :typ_id, :dat, :price_new);
  end
  else
  begin
    if (price_new is not null) then
      update cbr_price
      set price = :price_new
      where id = :price_id;
    else
      delete from cbr_price where id = :price_id;

  end
end^


CREATE OR ALTER PROCEDURE INF_SP_ENUM_GET (
    TABLENAME_ VARCHAR(50),
    FIELDNAME_ VARCHAR(50),
    ID_ INTEGER)
RETURNS (
    ID INTEGER,
    NAME VARCHAR(50),
    CODE VARCHAR(50))
AS
begin
  select e.id, e.name, e.code
  from inf_enum e
  where e.tablename = upper(:tablename_)
        and e.fieldname = upper(:fieldname_)
        and e.id = :id_
  into :id, :name, :code;
  suspend;
end^


CREATE OR ALTER PROCEDURE INF_SP_ENUM_LOOKUP (
    TABLENAME_ VARCHAR(50),
    FIELDNAME_ VARCHAR(50),
    SHOWNONE_ INTEGER)
RETURNS (
    ID INTEGER,
    NAME VARCHAR(50))
AS
begin
  for
    select e.id, e.name
    from inf_enum e
    where e.tablename = upper(:tablename_)
          and e.fieldname = upper(:fieldname_)
          and e.id = 0 and :shownone_ = 1
    union
    select e.id, e.name
    from inf_enum e
    where e.tablename = upper(:tablename_)
          and e.fieldname = upper(:fieldname_)
          and e.id <> 0
    into :id, :name
  do
    suspend;
end^


CREATE OR ALTER PROCEDURE INF_SP_STATES_GET (
    TABLENAME_ VARCHAR(50),
    ID_ INTEGER)
RETURNS (
    ID INTEGER,
    NAME VARCHAR(50),
    CODE VARCHAR(50),
    DRANGE INTEGER)
AS
begin
  select id, name, code, drange
  from inf_states
  where tablename = upper(:tablename_)
        and id = :id_
  into :id, :name, :code, :drange;
  suspend;
end^


CREATE OR ALTER PROCEDURE INF_SP_STATES_LIST (
    TABLE_NAME_ VARCHAR(50))
RETURNS (
    ID INTEGER,
    NAME VARCHAR(50),
    CODE VARCHAR(50),
    DRANGE INTEGER)
AS
begin
  for
    select s.id, s.name, s.code, s.drange
    from inf_states s
    where s.tablename = upper(:table_name_)
    order by s.id
    into :id, :name, :code, :drange
  do
    suspend;
end^


CREATE OR ALTER PROCEDURE UTL_EV_JRN_SELECTOR (
    DATE1_ DATE,
    DATE2_ DATE)
RETURNS (
    DATE1 DATE,
    DATE2 DATE)
AS
begin
  date1 = coalesce(date1_, 'today');
  date2 = coalesce(date2_, 'today');
  suspend;
end^


CREATE OR ALTER PROCEDURE UTL_EV_JRN_SELECTORINFO (
    USE_DRANGE_ INTEGER,
    DATE1_ DATE,
    DATE2_ DATE)
RETURNS (
    INFO VARCHAR(250))
AS
begin
  use_drange_ = coalesce(use_drange_, 1);

  if (use_drange_ = 1) then
  begin
    if (date1_ is null or date2_ is null) then
      info = '';
    else
      info = 'Интервал дат ' || date1_ || ' - ' || date2_;
  end
  else
    info = '';

  suspend;
end^



SET TERM ; ^
