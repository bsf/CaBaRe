/******************************************************************************/
/***          Generated by IBExpert 2012.03.13 10.05.2012 10:35:30          ***/
/******************************************************************************/

SET SQL DIALECT 3;

SET NAMES WIN1251;

SET CLIENTLIB 'D:\PRJ\BSF\CaBaRe\Output\gds32.dll';

CREATE DATABASE 'D:\PRJ\BSF\CaBaRe\Output\DB\CaBaRe.gdb'
USER 'SYSDBA'
PAGE_SIZE 16384
DEFAULT CHARACTER SET WIN1251 COLLATION WIN1251;



/******************************************************************************/
/***                               Generators                               ***/
/******************************************************************************/

CREATE GENERATOR BFW_INF_MSG_GEN;
SET GENERATOR BFW_INF_MSG_GEN TO 0;

CREATE GENERATOR CBR_GEN;
SET GENERATOR CBR_GEN TO 98;

CREATE GENERATOR CBR_GEN_DOC;
SET GENERATOR CBR_GEN_DOC TO 1056;



/******************************************************************************/
/***                               Exceptions                               ***/
/******************************************************************************/

CREATE EXCEPTION BFW_RAISE 'ERROR';

CREATE EXCEPTION RAISE 'тест';



SET TERM ^ ; 



/******************************************************************************/
/***                           Stored Procedures                            ***/
/******************************************************************************/

CREATE OR ALTER PROCEDURE BFW_IDE_EV_UI_ITEM (
    URI_ VARCHAR(50))
RETURNS (
    URI VARCHAR(50),
    CLS VARCHAR(50),
    TITLE VARCHAR(50),
    GRP VARCHAR(50),
    MENUIDX INTEGER,
    OPTIONS VARCHAR(1024),
    PARAMS VARCHAR(1024),
    OUTS VARCHAR(1024),
    USEPERM INTEGER,
    PKG VARCHAR(50),
    ENT VARCHAR(50),
    ENT_VIEW VARCHAR(50),
    ENT_EVIEW VARCHAR(100),
    ENT_VIEW_READONLY INTEGER,
    ENT_VIEW_PKEY VARCHAR(50),
    ENT_SQL_SELECT VARCHAR(1024),
    ENT_SQL_INSERT VARCHAR(1024),
    ENT_SQL_INSERTDEF VARCHAR(1024),
    ENT_SQL_UPDATE VARCHAR(1024),
    ENT_SQL_DELETE VARCHAR(1024),
    ENT_SQL_REFRESH VARCHAR(1024),
    UI_TITLE VARCHAR(250))
AS
BEGIN
  SUSPEND;
END^





CREATE OR ALTER PROCEDURE BFW_IDE_EV_UI_ITEM_U (
    URI VARCHAR(50),
    TITLE VARCHAR(50),
    GRP VARCHAR(50),
    MENUIDX INTEGER,
    OPTIONS VARCHAR(1024),
    PARAMS VARCHAR(1024),
    OUTS VARCHAR(1024),
    USEPERM INTEGER,
    PKG VARCHAR(50),
    ENT VARCHAR(50),
    ENT_VIEW VARCHAR(50),
    ENT_VIEW_READONLY INTEGER,
    ENT_VIEW_PKEY VARCHAR(50),
    ENT_SQL_SELECT VARCHAR(1024),
    ENT_SQL_INSERT VARCHAR(1024),
    ENT_SQL_INSERTDEF VARCHAR(1024),
    ENT_SQL_UPDATE VARCHAR(1024),
    ENT_SQL_DELETE VARCHAR(1024),
    ENT_SQL_REFRESH VARCHAR(1024))
AS
BEGIN
  EXIT;
END^





CREATE OR ALTER PROCEDURE BFW_IDE_EV_UI_NEW
RETURNS (
    URI VARCHAR(50),
    CLS VARCHAR(50),
    TITLE VARCHAR(50),
    PKG VARCHAR(50),
    ENT VARCHAR(50),
    ENT_VIEW VARCHAR(50),
    ENT_EVIEW VARCHAR(100))
AS
BEGIN
  SUSPEND;
END^





CREATE OR ALTER PROCEDURE BFW_IDE_EV_UI_NEW_U (
    URI VARCHAR(50),
    CLS VARCHAR(50),
    TITLE VARCHAR(50),
    PKG VARCHAR(50),
    ENT VARCHAR(50),
    ENT_VIEW VARCHAR(50))
AS
BEGIN
  EXIT;
END^





CREATE OR ALTER PROCEDURE BFW_INF_EV_SETTING_CHECK (
    NAME_ VARCHAR(50),
    USERNAME_ VARCHAR(50))
RETURNS (
    COMMON_EXISTS INTEGER,
    USER_EXISTS INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE OR ALTER PROCEDURE BFW_INF_EV_SETTING_GET (
    NAME_ VARCHAR(50),
    USERNAME_ VARCHAR(50))
RETURNS (
    VALI INTEGER,
    VALS VARCHAR(250),
    VALN DOUBLE PRECISION,
    VALD DATE)
AS
BEGIN
  SUSPEND;
END^





CREATE OR ALTER PROCEDURE BFW_INF_EV_SETTING_SET (
    NAME_ VARCHAR(50),
    USERNAME_ VARCHAR(50),
    VALI_ INTEGER,
    VALS_ VARCHAR(250),
    VALN_ DOUBLE PRECISION,
    VALD_ DATE)
AS
BEGIN
  EXIT;
END^





CREATE OR ALTER PROCEDURE BFW_INF_SP_MSG_POP (
    FROM_ID_ INTEGER)
RETURNS (
    ID INTEGER,
    SDAT DATE,
    SENDER VARCHAR(38),
    TOPIC VARCHAR(50),
    TXT VARCHAR(250))
AS
BEGIN
  SUSPEND;
END^





CREATE OR ALTER PROCEDURE BFW_INF_SP_MSG_PUSH (
    RECEIVER_ VARCHAR(38),
    TOPIC_ VARCHAR(50),
    TXT_ VARCHAR(250))
AS
BEGIN
  EXIT;
END^





CREATE OR ALTER PROCEDURE BFW_INF_SP_SETTING (
    NAME_ VARCHAR(50))
RETURNS (
    VALI INTEGER,
    VALS VARCHAR(250),
    VALN DOUBLE PRECISION,
    VALD DATE)
AS
BEGIN
  SUSPEND;
END^





CREATE OR ALTER PROCEDURE BFW_INF_SP_SETTING_ (
    NAME_ VARCHAR(50))
RETURNS (
    VALI INTEGER,
    VALS VARCHAR(250),
    VALN DOUBLE PRECISION,
    VALD DATE)
AS
BEGIN
  SUSPEND;
END^





CREATE OR ALTER PROCEDURE BFW_SEC_EV_PERM_EFFECTIVE (
    POLID_ VARCHAR(38),
    PERMID_ VARCHAR(38),
    RESID_ VARCHAR(38))
RETURNS (
    USERID VARCHAR(38),
    USERNAME VARCHAR(50),
    PERM VARCHAR(50),
    STATE INTEGER,
    INHERITBY_PERM VARCHAR(50),
    INHERITBY_RESID VARCHAR(38))
AS
BEGIN
  SUSPEND;
END^





CREATE OR ALTER PROCEDURE BFW_SEC_EV_PERM_EFFECTIVE_ (
    PERMID_ VARCHAR(38),
    USERID_ VARCHAR(38),
    RESID_ VARCHAR(38))
RETURNS (
    STATE INTEGER,
    PERMID VARCHAR(38),
    RESID VARCHAR(38))
AS
BEGIN
  SUSPEND;
END^





CREATE OR ALTER PROCEDURE BFW_SEC_EV_PERM_LIST (
    POLID VARCHAR(38))
RETURNS (
    PERMID VARCHAR(38),
    NAME VARCHAR(50),
    DESCRIPTION VARCHAR(250),
    INHERITBY VARCHAR(50))
AS
BEGIN
  SUSPEND;
END^





CREATE OR ALTER PROCEDURE BFW_SEC_EV_PERM_STATE_GET (
    PERMID VARCHAR(38),
    USERID VARCHAR(38),
    RESID VARCHAR(38))
RETURNS (
    STATE INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE OR ALTER PROCEDURE BFW_SEC_EV_PERM_STATE_SET (
    PERMID VARCHAR(38),
    USERID VARCHAR(38),
    RESID VARCHAR(38),
    STATE INTEGER)
AS
BEGIN
  EXIT;
END^





CREATE OR ALTER PROCEDURE BFW_SEC_EV_POLICY_LIST (
    PARENTID VARCHAR(38))
RETURNS (
    POLID VARCHAR(38),
    NAME VARCHAR(50),
    RES_PROVID VARCHAR(38))
AS
BEGIN
  SUSPEND;
END^





CREATE OR ALTER PROCEDURE BFW_SEC_EV_POLICY_RESET (
    POLID_ VARCHAR(38))
AS
BEGIN
  EXIT;
END^





CREATE OR ALTER PROCEDURE BFW_SEC_EV_POLICY_STATE_GET (
    POLID VARCHAR(38))
RETURNS (
    STATE INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE OR ALTER PROCEDURE BFW_SEC_EV_POLICY_STATE_SET (
    POLID VARCHAR(38),
    STATE INTEGER)
AS
BEGIN
  EXIT;
END^





CREATE OR ALTER PROCEDURE BFW_SEC_SP_PERM_CHECK (
    PERMID_ VARCHAR(38),
    USERID_ VARCHAR(38),
    RESID_ VARCHAR(38))
RETURNS (
    STATE INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE OR ALTER PROCEDURE BFW_SEC_SP_PERM_DEMAND (
    PERMID_ VARCHAR(38),
    RESID_ VARCHAR(38))
AS
BEGIN
  EXIT;
END^





CREATE OR ALTER PROCEDURE BFW_SEC_SP_PERM_DEMAND_USERS (
    PERMID_ VARCHAR(38),
    RESID_ VARCHAR(38))
RETURNS (
    USERID VARCHAR(38))
AS
BEGIN
  SUSPEND;
END^





CREATE OR ALTER PROCEDURE BFW_SEC_SP_PERM_DEMAND2 (
    PERMID_ VARCHAR(38),
    RESID_ VARCHAR(38))
RETURNS (
    STATE INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE OR ALTER PROCEDURE BFW_UTL_SP_STRING_LEN (
    STRG_IN VARCHAR(1024))
RETURNS (
    STRG_LEN INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE OR ALTER PROCEDURE BFW_UTL_SP_STRING_REPLACE (
    STR_IN VARCHAR(1024),
    STR_SEARCH VARCHAR(1024),
    STR_REPLACE VARCHAR(1024))
RETURNS (
    STR_OUT VARCHAR(1024))
AS
BEGIN
  SUSPEND;
END^





CREATE OR ALTER PROCEDURE BFW_UTL_SP_STRING_SUB (
    STR_IN VARCHAR(1024),
    STR_BEG INTEGER,
    STR_LEN INTEGER)
RETURNS (
    STR_OUT VARCHAR(1024))
AS
BEGIN
  SUSPEND;
END^





CREATE OR ALTER PROCEDURE CBR_EV_KORD_CREATE (
    ORD_ID_ INTEGER)
RETURNS (
    ID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE OR ALTER PROCEDURE CBR_EV_MENU_ITEM (
    ID_ INTEGER)
RETURNS (
    ID INTEGER,
    NAME VARCHAR(50),
    GRP_ID INTEGER,
    STATE_ID INTEGER,
    UNT VARCHAR(10))
AS
BEGIN
  SUSPEND;
END^





CREATE OR ALTER PROCEDURE CBR_EV_MENU_ITEM_U (
    ID INTEGER,
    NAME VARCHAR(50),
    GRP_ID INTEGER,
    STATE_ID INTEGER,
    UNT VARCHAR(10))
AS
BEGIN
  EXIT;
END^





CREATE OR ALTER PROCEDURE CBR_EV_MENU_LIST (
    ID_ INTEGER,
    SHOW_CLOSED_ INTEGER)
RETURNS (
    ID INTEGER,
    GRP VARCHAR(50),
    NAME VARCHAR(50),
    UNT VARCHAR(10),
    STATE VARCHAR(50),
    UI_ROW_STYLE VARCHAR(50))
AS
BEGIN
  SUSPEND;
END^





CREATE OR ALTER PROCEDURE CBR_EV_MENU_NEW
RETURNS (
    ID INTEGER,
    NAME VARCHAR(50),
    GRP_ID INTEGER,
    UNT VARCHAR(10))
AS
BEGIN
  SUSPEND;
END^





CREATE OR ALTER PROCEDURE CBR_EV_MENU_NEW_U (
    ID INTEGER,
    NAME VARCHAR(50),
    GRP_ID INTEGER,
    UNT VARCHAR(10))
AS
BEGIN
  EXIT;
END^





CREATE OR ALTER PROCEDURE CBR_EV_ORD_DESK_ORD_CREATE (
    TBL_ID_ INTEGER)
RETURNS (
    ID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE OR ALTER PROCEDURE CBR_EV_ORD_DESK_ORDI (
    HID_ INTEGER,
    MENU_ID_ INTEGER)
RETURNS (
    ID INTEGER,
    HID INTEGER,
    RECNO INTEGER,
    MENU_ID INTEGER,
    DISH VARCHAR(50),
    UNT VARCHAR(10),
    QTY DOUBLE PRECISION,
    PRICE DOUBLE PRECISION,
    SUMM DOUBLE PRECISION,
    FKORD INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE OR ALTER PROCEDURE CBR_EV_ORD_DESK_ORDI_I (
    HID_ INTEGER,
    MENU_ID_ INTEGER)
RETURNS (
    ID INTEGER,
    HID INTEGER,
    MENU_ID INTEGER,
    DISH VARCHAR(50),
    UNT VARCHAR(10),
    QTY DOUBLE PRECISION,
    PRICE DOUBLE PRECISION,
    SUMM DOUBLE PRECISION,
    FKORD INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE OR ALTER PROCEDURE CBR_EV_ORD_JRN (
    ID_ INTEGER,
    STATE_ID_ INTEGER,
    DBEG_ DATE,
    DEND_ DATE)
RETURNS (
    ID INTEGER,
    DAT DATE,
    ROOM VARCHAR(50),
    TBL VARCHAR(50),
    IDAT TIMESTAMP)
AS
BEGIN
  SUSPEND;
END^





CREATE OR ALTER PROCEDURE CBR_EV_ORD_JRN_ (
    ID_ INTEGER,
    STATE_ID_ INTEGER,
    DBEG_ DATE,
    DEND_ DATE)
RETURNS (
    ID INTEGER,
    DAT DATE,
    STATE_ID INTEGER,
    TBL_ID INTEGER,
    IDAT TIMESTAMP)
AS
BEGIN
  SUSPEND;
END^





CREATE OR ALTER PROCEDURE CBR_EV_ORD_PRECHECK (
    ID INTEGER)
AS
BEGIN
  EXIT;
END^





CREATE OR ALTER PROCEDURE CBR_EV_PRICE_LIST (
    DAT_ DATE,
    TYP_ID_ INTEGER)
RETURNS (
    MENU_ID INTEGER,
    DAT DATE,
    TYP_ID INTEGER,
    GRP VARCHAR(50),
    DISH VARCHAR(50),
    UNT VARCHAR(10),
    PRICE DOUBLE PRECISION,
    PRICE_NEW DOUBLE PRECISION)
AS
BEGIN
  SUSPEND;
END^





CREATE OR ALTER PROCEDURE CBR_EV_PRICE_LIST_SEL (
    DAT_ DATE,
    TYP_ID_ INTEGER)
RETURNS (
    DAT DATE,
    TYP_ID INTEGER,
    INFO VARCHAR(250))
AS
BEGIN
  SUSPEND;
END^





CREATE OR ALTER PROCEDURE CBR_EV_PRICE_LIST_U (
    MENU_ID INTEGER,
    DAT DATE,
    TYP_ID INTEGER,
    PRICE_NEW DOUBLE PRECISION)
AS
BEGIN
  EXIT;
END^





CREATE OR ALTER PROCEDURE INF_SP_ENUM_GET (
    TABLENAME_ VARCHAR(50),
    FIELDNAME_ VARCHAR(50),
    ID_ INTEGER)
RETURNS (
    ID INTEGER,
    NAME VARCHAR(50),
    CODE VARCHAR(50))
AS
BEGIN
  SUSPEND;
END^





CREATE OR ALTER PROCEDURE INF_SP_ENUM_LOOKUP (
    TABLENAME_ VARCHAR(50),
    FIELDNAME_ VARCHAR(50),
    SHOWNONE_ INTEGER)
RETURNS (
    ID INTEGER,
    NAME VARCHAR(50))
AS
BEGIN
  SUSPEND;
END^





CREATE OR ALTER PROCEDURE INF_SP_STATES_GET (
    TABLENAME_ VARCHAR(50),
    ID_ INTEGER)
RETURNS (
    ID INTEGER,
    NAME VARCHAR(50),
    CODE VARCHAR(50),
    DRANGE INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE OR ALTER PROCEDURE INF_SP_STATES_LIST (
    TABLE_NAME_ VARCHAR(50))
RETURNS (
    ID INTEGER,
    NAME VARCHAR(50),
    CODE VARCHAR(50),
    DRANGE INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE OR ALTER PROCEDURE UTL_EV_JRN_SELECTOR (
    DATE1_ DATE,
    DATE2_ DATE)
RETURNS (
    DATE1 DATE,
    DATE2 DATE)
AS
BEGIN
  SUSPEND;
END^





CREATE OR ALTER PROCEDURE UTL_EV_JRN_SELECTORINFO (
    USE_DRANGE_ INTEGER,
    DATE1_ DATE,
    DATE2_ DATE)
RETURNS (
    INFO VARCHAR(250))
AS
BEGIN
  SUSPEND;
END^






SET TERM ; ^



/******************************************************************************/
/***                                 Tables                                 ***/
/******************************************************************************/



CREATE TABLE BFW_ENT (
    ENTITYNAME   VARCHAR(38) NOT NULL,
    SCHEMENAME   VARCHAR(38),
    IS_SCHEME    INTEGER DEFAULT 0 NOT NULL,
    DESCRIPTION  VARCHAR(250)
);


CREATE TABLE BFW_ENT_FIELDS (
    ENTITYNAME      VARCHAR(38) NOT NULL,
    VIEWNAME        VARCHAR(38) NOT NULL,
    FIELDNAME       VARCHAR(38) NOT NULL,
    BAND            VARCHAR(50),
    TITLE           VARCHAR(50),
    VISIBLE         INTEGER DEFAULT 1 NOT NULL,
    READONLY        INTEGER DEFAULT 0 NOT NULL,
    EDITOR          VARCHAR(50),
    EDITOR_OPTIONS  VARCHAR(1024),
    OPTIONS         VARCHAR(1024),
    REQ             INTEGER DEFAULT 0 NOT NULL
);


CREATE TABLE BFW_ENT_VIEW_LINKS (
    ENTITYNAME         VARCHAR(38) NOT NULL,
    VIEWNAME           VARCHAR(38) NOT NULL,
    LINKED_ENTITYNAME  VARCHAR(38) NOT NULL,
    LINKED_VIEWNAME    VARCHAR(38) NOT NULL,
    LINKED_FIELD       VARCHAR(38)
);


CREATE TABLE BFW_ENT_VIEWS (
    ENTITYNAME     VARCHAR(38) NOT NULL,
    VIEWNAME       VARCHAR(38) NOT NULL,
    SQL_SELECT     VARCHAR(1024),
    SQL_INSERT     VARCHAR(1024),
    SQL_UPDATE     VARCHAR(1024),
    SQL_DELETE     VARCHAR(1024),
    SQL_REFRESH    VARCHAR(1024),
    READONLY       INTEGER DEFAULT 1 NOT NULL,
    PKEY           VARCHAR(38),
    OPTIONS        VARCHAR(1024),
    IS_EXEC        INTEGER DEFAULT 0 NOT NULL,
    SQL_INSERTDEF  VARCHAR(1024)
);


CREATE TABLE BFW_INF_MSG (
    ID        INTEGER NOT NULL,
    STATUS    INTEGER DEFAULT 0 NOT NULL,
    SENDER    VARCHAR(38) DEFAULT USER NOT NULL,
    RECEIVER  VARCHAR(38) NOT NULL,
    TOPIC     VARCHAR(50) NOT NULL,
    TXT       VARCHAR(250) NOT NULL,
    IDAT      DATE DEFAULT 'NOW' NOT NULL,
    RDAT      DATE
);


CREATE TABLE BFW_INF_SETTINGS (
    NAME  VARCHAR(50) NOT NULL,
    USR   VARCHAR(50) NOT NULL,
    VALI  INTEGER,
    VALS  VARCHAR(250),
    VALN  DOUBLE PRECISION,
    VALD  DATE
);


CREATE TABLE BFW_INF_SETTINGS_META (
    NAME            VARCHAR(50) NOT NULL,
    TYP             INTEGER NOT NULL,
    TITLE           VARCHAR(50) NOT NULL,
    BAND            VARCHAR(50),
    IS_PREFERENCE   INTEGER DEFAULT 0 NOT NULL,
    EDITOR          VARCHAR(50),
    EDITOR_OPTIONS  VARCHAR(250),
    B52_NAME        VARCHAR(50),
    DEF_VALI        INTEGER,
    DEF_VALS        VARCHAR(250),
    DEF_VALN        DOUBLE PRECISION,
    DEF_VALD        DATE
);


CREATE TABLE BFW_SEC_ACL (
    PERMID  VARCHAR(38) NOT NULL,
    USERID  VARCHAR(38) NOT NULL,
    RESID   VARCHAR(38) NOT NULL,
    STATE   INTEGER NOT NULL
);


CREATE TABLE BFW_SEC_PERMISSIONS (
    PERMID       VARCHAR(38) NOT NULL,
    NAME         VARCHAR(50) NOT NULL,
    POLID        VARCHAR(38) NOT NULL,
    INHERITBY    VARCHAR(38),
    DESCRIPTION  VARCHAR(250)
);


CREATE TABLE BFW_SEC_POLICIES (
    POLID           VARCHAR(38) NOT NULL,
    NAME            VARCHAR(50) NOT NULL,
    PARENTID        VARCHAR(38),
    STATE           INTEGER NOT NULL,
    USE_RES         INTEGER NOT NULL,
    RES_PROVID      VARCHAR(38),
    RES_PARENT_SQL  VARCHAR(1024)
);


CREATE TABLE BFW_SEC_PROV (
    URI         VARCHAR(50) NOT NULL,
    ENTITYNAME  VARCHAR(50) NOT NULL
);


CREATE TABLE BFW_SEC_USER_ROLES (
    USERID  VARCHAR(38) NOT NULL,
    ROLEID  VARCHAR(38) NOT NULL
);


CREATE TABLE BFW_SEC_USERS (
    USERID  VARCHAR(38) NOT NULL,
    NAME    VARCHAR(50) NOT NULL,
    ISROLE  INTEGER DEFAULT 0 NOT NULL
);


CREATE TABLE BFW_UI (
    URI         VARCHAR(50) NOT NULL,
    CLS         VARCHAR(50) NOT NULL,
    ENTITYNAME  VARCHAR(50) NOT NULL,
    VIEWNAME    VARCHAR(50),
    TITLE       VARCHAR(50) NOT NULL,
    GRP         VARCHAR(50),
    MENUIDX     INTEGER DEFAULT 0 NOT NULL,
    OPTIONS     VARCHAR(1024),
    PARAMS      VARCHAR(1024),
    OUTS        VARCHAR(1024),
    USEPERM     INTEGER DEFAULT 0 NOT NULL,
    PKG         VARCHAR(50)
);


CREATE TABLE BFW_UI_CLS (
    CLS          VARCHAR(50) NOT NULL,
    VIEWNAME     VARCHAR(50) NOT NULL,
    DESCRIPTION  VARCHAR(250),
    IMG          BLOB SUB_TYPE 0 SEGMENT SIZE 8192,
    OPTIONS      VARCHAR(1024)
);


CREATE TABLE BFW_UI_CMD (
    URI      VARCHAR(50) NOT NULL,
    CMD      VARCHAR(50) NOT NULL,
    CAPTION  VARCHAR(50) NOT NULL,
    IDX      INTEGER DEFAULT 0 NOT NULL,
    GRP      VARCHAR(50),
    DEF      INTEGER DEFAULT 0 NOT NULL,
    HANDLER  VARCHAR(50),
    PARAMS   VARCHAR(1024),
    OUTS     VARCHAR(1024),
    OPTIONS  VARCHAR(1024)
);


CREATE TABLE BFW_UI_GRP (
    GRP  VARCHAR(50) NOT NULL,
    IDX  INTEGER
);


CREATE TABLE BFW_UI_STYLES (
    ID       VARCHAR(50) NOT NULL,
    OPTIONS  VARCHAR(1024)
);


CREATE TABLE CBR_KORD (
    ID    INTEGER NOT NULL,
    DAT   DATE NOT NULL,
    IDAT  TIMESTAMP DEFAULT 'NOW'
);


CREATE TABLE CBR_KORDI (
    ID       INTEGER NOT NULL,
    HID      INTEGER NOT NULL,
    ORDI_ID  INTEGER NOT NULL
);


CREATE TABLE CBR_MENU (
    ID        INTEGER NOT NULL,
    NAME      VARCHAR(50) NOT NULL,
    GRP_ID    INTEGER,
    STATE_ID  INTEGER DEFAULT 0 NOT NULL,
    UNT       VARCHAR(10)
);


CREATE TABLE CBR_MENU_GRP (
    ID    INTEGER NOT NULL,
    NAME  VARCHAR(50) NOT NULL
);


CREATE TABLE CBR_ORD (
    ID             INTEGER NOT NULL,
    DAT            DATE NOT NULL,
    STATE_ID       INTEGER DEFAULT 0 NOT NULL,
    IUSR           VARCHAR(50) DEFAULT USER,
    IDAT           DATE DEFAULT 'NOW',
    PUSR           VARCHAR(50),
    PDAT           DATE,
    TBL_ID         INTEGER NOT NULL,
    PRICE_TYP_ID   INTEGER NOT NULL,
    LAST_ACT_TIME  TIMESTAMP DEFAULT 'NOW'
);


CREATE TABLE CBR_ORDI (
    ID       INTEGER NOT NULL,
    HID      INTEGER NOT NULL,
    MENU_ID  INTEGER NOT NULL,
    QTY      DOUBLE PRECISION NOT NULL,
    PRICE    DOUBLE PRECISION NOT NULL,
    KORD_ID  INTEGER
);


CREATE TABLE CBR_PRICE (
    ID       INTEGER NOT NULL,
    MENU_ID  INTEGER NOT NULL,
    TYP_ID   INTEGER NOT NULL,
    DAT      DATE NOT NULL,
    PRICE    DOUBLE PRECISION NOT NULL
);


CREATE TABLE CBR_PRICE_TYP (
    ID    INTEGER NOT NULL,
    NAME  VARCHAR(50) NOT NULL
);


CREATE TABLE CBR_ROOMS (
    ID    INTEGER NOT NULL,
    NAME  VARCHAR(25) NOT NULL
);


CREATE TABLE CBR_TBL (
    ID        INTEGER NOT NULL,
    NAME      VARCHAR(25) NOT NULL,
    ROOM_ID   INTEGER NOT NULL,
    STATE_ID  INTEGER DEFAULT 0 NOT NULL
);


CREATE TABLE INF_ENUM (
    TABLENAME  VARCHAR(50) NOT NULL,
    FIELDNAME  VARCHAR(50) NOT NULL,
    ID         INTEGER NOT NULL,
    NAME       VARCHAR(50) NOT NULL,
    CODE       VARCHAR(50)
);


CREATE TABLE INF_MSG (
    CODE  VARCHAR(50) NOT NULL,
    MSG   VARCHAR(70) NOT NULL
);


CREATE TABLE INF_STATES (
    TABLENAME  VARCHAR(50) NOT NULL,
    ID         INTEGER NOT NULL,
    CODE       VARCHAR(50),
    NAME       VARCHAR(50) NOT NULL,
    DRANGE     INTEGER DEFAULT 0 NOT NULL
);


INSERT INTO BFW_ENT (ENTITYNAME, SCHEMENAME, IS_SCHEME, DESCRIPTION) VALUES ('BFW_META', 'BFW', 0, NULL);
INSERT INTO BFW_ENT (ENTITYNAME, SCHEMENAME, IS_SCHEME, DESCRIPTION) VALUES ('BFW_UI', 'BFW', 0, NULL);
INSERT INTO BFW_ENT (ENTITYNAME, SCHEMENAME, IS_SCHEME, DESCRIPTION) VALUES ('BFW_SEC_PERM', 'BFW', 0, NULL);
INSERT INTO BFW_ENT (ENTITYNAME, SCHEMENAME, IS_SCHEME, DESCRIPTION) VALUES ('BFW_INF_SETTING', 'BFW', 0, NULL);
INSERT INTO BFW_ENT (ENTITYNAME, SCHEMENAME, IS_SCHEME, DESCRIPTION) VALUES ('BFW_INF_MSG', 'BFW', 0, NULL);
INSERT INTO BFW_ENT (ENTITYNAME, SCHEMENAME, IS_SCHEME, DESCRIPTION) VALUES ('BFW_SEC_POLICY', 'BFW', 0, NULL);
INSERT INTO BFW_ENT (ENTITYNAME, SCHEMENAME, IS_SCHEME, DESCRIPTION) VALUES ('BFW_SEC_PROV', 'BFW', 0, NULL);
INSERT INTO BFW_ENT (ENTITYNAME, SCHEMENAME, IS_SCHEME, DESCRIPTION) VALUES ('BFW_SEC_USER', 'BFW', 0, NULL);
INSERT INTO BFW_ENT (ENTITYNAME, SCHEMENAME, IS_SCHEME, DESCRIPTION) VALUES ('BFW_IDE', 'BFW', 0, 'BFW IDE');
INSERT INTO BFW_ENT (ENTITYNAME, SCHEMENAME, IS_SCHEME, DESCRIPTION) VALUES ('BFW_IDE_ENT', 'BFW', 0, '');
INSERT INTO BFW_ENT (ENTITYNAME, SCHEMENAME, IS_SCHEME, DESCRIPTION) VALUES ('BFW_IDE_EVIEW', 'BFW', 0, NULL);
INSERT INTO BFW_ENT (ENTITYNAME, SCHEMENAME, IS_SCHEME, DESCRIPTION) VALUES ('BFW_IDE_UI', 'BFW', 0, NULL);
INSERT INTO BFW_ENT (ENTITYNAME, SCHEMENAME, IS_SCHEME, DESCRIPTION) VALUES ('BFW_IDE_UI_CLS', 'BFW', 0, NULL);
INSERT INTO BFW_ENT (ENTITYNAME, SCHEMENAME, IS_SCHEME, DESCRIPTION) VALUES ('BFW_IDE_UI_FIELDS', 'BFW', 0, NULL);
INSERT INTO BFW_ENT (ENTITYNAME, SCHEMENAME, IS_SCHEME, DESCRIPTION) VALUES ('BFW_UI_CMD', NULL, 0, 'UI Commands');
INSERT INTO BFW_ENT (ENTITYNAME, SCHEMENAME, IS_SCHEME, DESCRIPTION) VALUES ('BFW_IDE_UI_CMD', 'BFW', 0, 'UI Commands');
INSERT INTO BFW_ENT (ENTITYNAME, SCHEMENAME, IS_SCHEME, DESCRIPTION) VALUES ('CBR_MENU', NULL, 0, 'Меню');
INSERT INTO BFW_ENT (ENTITYNAME, SCHEMENAME, IS_SCHEME, DESCRIPTION) VALUES ('CBR_UI', NULL, 0, 'CaBaRe UI');
INSERT INTO BFW_ENT (ENTITYNAME, SCHEMENAME, IS_SCHEME, DESCRIPTION) VALUES ('CBR_MENU_GRP', NULL, 0, 'Группы меню');
INSERT INTO BFW_ENT (ENTITYNAME, SCHEMENAME, IS_SCHEME, DESCRIPTION) VALUES ('CBR_TBL', NULL, 0, 'Столы');
INSERT INTO BFW_ENT (ENTITYNAME, SCHEMENAME, IS_SCHEME, DESCRIPTION) VALUES ('CBR_ROOM', NULL, 0, 'Залы');
INSERT INTO BFW_ENT (ENTITYNAME, SCHEMENAME, IS_SCHEME, DESCRIPTION) VALUES ('CBR_PRICE', NULL, 0, 'Прайс');
INSERT INTO BFW_ENT (ENTITYNAME, SCHEMENAME, IS_SCHEME, DESCRIPTION) VALUES ('CBR_PRICE_TYP', NULL, 0, 'Виды цен');
INSERT INTO BFW_ENT (ENTITYNAME, SCHEMENAME, IS_SCHEME, DESCRIPTION) VALUES ('CBR_WD_VIEW', NULL, 0, 'WaiterDeskView');
INSERT INTO BFW_ENT (ENTITYNAME, SCHEMENAME, IS_SCHEME, DESCRIPTION) VALUES ('CBR_ORD_DESK', NULL, 0, 'OrderDeskView');
INSERT INTO BFW_ENT (ENTITYNAME, SCHEMENAME, IS_SCHEME, DESCRIPTION) VALUES ('CBR_KORD', NULL, 0, 'KitchenOrder');
INSERT INTO BFW_ENT (ENTITYNAME, SCHEMENAME, IS_SCHEME, DESCRIPTION) VALUES ('CBR_ORD', NULL, 0, 'Заказ');
INSERT INTO BFW_ENT (ENTITYNAME, SCHEMENAME, IS_SCHEME, DESCRIPTION) VALUES ('UTL_JRN', NULL, 0, NULL);

COMMIT WORK;

INSERT INTO BFW_ENT_FIELDS (ENTITYNAME, VIEWNAME, FIELDNAME, BAND, TITLE, VISIBLE, READONLY, EDITOR, EDITOR_OPTIONS, OPTIONS, REQ) VALUES ('BFW_IDE_EVIEW', '-', 'SQL_SELECT', NULL, NULL, 1, 0, 'Memo', NULL, NULL, 0);
INSERT INTO BFW_ENT_FIELDS (ENTITYNAME, VIEWNAME, FIELDNAME, BAND, TITLE, VISIBLE, READONLY, EDITOR, EDITOR_OPTIONS, OPTIONS, REQ) VALUES ('BFW_IDE_EVIEW', '-', 'SQL_INSERT', NULL, NULL, 1, 0, 'MEMO', NULL, NULL, 0);
INSERT INTO BFW_ENT_FIELDS (ENTITYNAME, VIEWNAME, FIELDNAME, BAND, TITLE, VISIBLE, READONLY, EDITOR, EDITOR_OPTIONS, OPTIONS, REQ) VALUES ('BFW_IDE_EVIEW', '-', 'SQL_UPDATE', NULL, NULL, 1, 0, 'MEMO', NULL, NULL, 0);
INSERT INTO BFW_ENT_FIELDS (ENTITYNAME, VIEWNAME, FIELDNAME, BAND, TITLE, VISIBLE, READONLY, EDITOR, EDITOR_OPTIONS, OPTIONS, REQ) VALUES ('BFW_IDE_EVIEW', '-', 'SQL_REFRESH', NULL, NULL, 1, 0, 'MEMO', NULL, NULL, 0);
INSERT INTO BFW_ENT_FIELDS (ENTITYNAME, VIEWNAME, FIELDNAME, BAND, TITLE, VISIBLE, READONLY, EDITOR, EDITOR_OPTIONS, OPTIONS, REQ) VALUES ('BFW_IDE_UI', 'New', 'EVIEW', NULL, NULL, 1, 0, NULL, NULL, NULL, 0);
INSERT INTO BFW_ENT_FIELDS (ENTITYNAME, VIEWNAME, FIELDNAME, BAND, TITLE, VISIBLE, READONLY, EDITOR, EDITOR_OPTIONS, OPTIONS, REQ) VALUES ('BFW_IDE_UI', 'Item', 'URI', NULL, NULL, 1, 1, NULL, NULL, 'Style=Style.InfoBk', 0);
INSERT INTO BFW_ENT_FIELDS (ENTITYNAME, VIEWNAME, FIELDNAME, BAND, TITLE, VISIBLE, READONLY, EDITOR, EDITOR_OPTIONS, OPTIONS, REQ) VALUES ('BFW_IDE_UI', 'Item', 'ENT_SQL_SELECT', 'Entity', 'SQL Select', 1, 0, 'Memo', NULL, NULL, 0);
INSERT INTO BFW_ENT_FIELDS (ENTITYNAME, VIEWNAME, FIELDNAME, BAND, TITLE, VISIBLE, READONLY, EDITOR, EDITOR_OPTIONS, OPTIONS, REQ) VALUES ('BFW_IDE_UI', 'Item', 'ENT_SQL_UPDATE', 'Entity', 'SQL Update', 1, 0, 'Memo', NULL, NULL, 0);
INSERT INTO BFW_ENT_FIELDS (ENTITYNAME, VIEWNAME, FIELDNAME, BAND, TITLE, VISIBLE, READONLY, EDITOR, EDITOR_OPTIONS, OPTIONS, REQ) VALUES ('BFW_IDE_UI', 'List', 'URI', NULL, NULL, 1, 0, NULL, NULL, NULL, 0);
INSERT INTO BFW_ENT_FIELDS (ENTITYNAME, VIEWNAME, FIELDNAME, BAND, TITLE, VISIBLE, READONLY, EDITOR, EDITOR_OPTIONS, OPTIONS, REQ) VALUES ('BFW_IDE_UI', 'New', 'ENT', NULL, 'Entity', 1, 0, 'Lookup', 'Entity=BFW_IDE_ENT;EView=Lookup', NULL, 0);
INSERT INTO BFW_ENT_FIELDS (ENTITYNAME, VIEWNAME, FIELDNAME, BAND, TITLE, VISIBLE, READONLY, EDITOR, EDITOR_OPTIONS, OPTIONS, REQ) VALUES ('BFW_IDE_UI', 'Item', 'ENT', 'Entity', NULL, 0, 0, NULL, NULL, NULL, 0);
INSERT INTO BFW_ENT_FIELDS (ENTITYNAME, VIEWNAME, FIELDNAME, BAND, TITLE, VISIBLE, READONLY, EDITOR, EDITOR_OPTIONS, OPTIONS, REQ) VALUES ('BFW_IDE_UI', 'Item', 'PKG', 'Misc', 'Package', 1, 0, NULL, NULL, NULL, 0);
INSERT INTO BFW_ENT_FIELDS (ENTITYNAME, VIEWNAME, FIELDNAME, BAND, TITLE, VISIBLE, READONLY, EDITOR, EDITOR_OPTIONS, OPTIONS, REQ) VALUES ('BFW_IDE_UI', 'Item', 'ENT_VIEW', 'Entity', NULL, 0, 0, NULL, NULL, NULL, 0);
INSERT INTO BFW_ENT_FIELDS (ENTITYNAME, VIEWNAME, FIELDNAME, BAND, TITLE, VISIBLE, READONLY, EDITOR, EDITOR_OPTIONS, OPTIONS, REQ) VALUES ('BFW_IDE_UI', 'Item', 'GRP', 'Main menu', 'Group', 1, 0, NULL, NULL, NULL, 0);
INSERT INTO BFW_ENT_FIELDS (ENTITYNAME, VIEWNAME, FIELDNAME, BAND, TITLE, VISIBLE, READONLY, EDITOR, EDITOR_OPTIONS, OPTIONS, REQ) VALUES ('BFW_IDE_UI', 'Item', 'MENUIDX', 'Main menu', 'Index', 1, 0, NULL, NULL, NULL, 0);
INSERT INTO BFW_ENT_FIELDS (ENTITYNAME, VIEWNAME, FIELDNAME, BAND, TITLE, VISIBLE, READONLY, EDITOR, EDITOR_OPTIONS, OPTIONS, REQ) VALUES ('BFW_IDE_UI', 'Item', 'ENT_SQL_INSERT', 'Entity', 'SQL Insert', 1, 0, 'Memo', NULL, NULL, 0);
INSERT INTO BFW_ENT_FIELDS (ENTITYNAME, VIEWNAME, FIELDNAME, BAND, TITLE, VISIBLE, READONLY, EDITOR, EDITOR_OPTIONS, OPTIONS, REQ) VALUES ('BFW_IDE_UI', 'Item', 'ENT_SQL_DELETE', 'Entity', 'SQL Delete', 1, 0, 'Memo', NULL, NULL, 0);
INSERT INTO BFW_ENT_FIELDS (ENTITYNAME, VIEWNAME, FIELDNAME, BAND, TITLE, VISIBLE, READONLY, EDITOR, EDITOR_OPTIONS, OPTIONS, REQ) VALUES ('BFW_IDE_UI', 'Item', 'ENT_SQL_REFRESH', 'Entity', 'SQL Refresh', 1, 0, 'Memo', NULL, NULL, 0);
INSERT INTO BFW_ENT_FIELDS (ENTITYNAME, VIEWNAME, FIELDNAME, BAND, TITLE, VISIBLE, READONLY, EDITOR, EDITOR_OPTIONS, OPTIONS, REQ) VALUES ('BFW_IDE_UI', 'Item', 'ENT_SQL_INSERTDEF', 'Entity', 'SQL InsertDef', 1, 0, 'Memo', NULL, NULL, 0);
INSERT INTO BFW_ENT_FIELDS (ENTITYNAME, VIEWNAME, FIELDNAME, BAND, TITLE, VISIBLE, READONLY, EDITOR, EDITOR_OPTIONS, OPTIONS, REQ) VALUES ('BFW_IDE_UI', 'Item', 'USEPERM', 'Misc', 'Use permission', 1, 0, 'CheckBox', NULL, NULL, 0);
INSERT INTO BFW_ENT_FIELDS (ENTITYNAME, VIEWNAME, FIELDNAME, BAND, TITLE, VISIBLE, READONLY, EDITOR, EDITOR_OPTIONS, OPTIONS, REQ) VALUES ('BFW_IDE_UI', 'Item', 'PARAMS', 'IN OUT', 'Input params', 1, 0, NULL, NULL, NULL, 0);
INSERT INTO BFW_ENT_FIELDS (ENTITYNAME, VIEWNAME, FIELDNAME, BAND, TITLE, VISIBLE, READONLY, EDITOR, EDITOR_OPTIONS, OPTIONS, REQ) VALUES ('BFW_IDE_UI', 'Item', 'OUTS', 'IN OUT', 'Output params', 1, 0, NULL, NULL, NULL, 0);
INSERT INTO BFW_ENT_FIELDS (ENTITYNAME, VIEWNAME, FIELDNAME, BAND, TITLE, VISIBLE, READONLY, EDITOR, EDITOR_OPTIONS, OPTIONS, REQ) VALUES ('BFW_IDE_UI', 'Item', 'ENT_EVIEW', 'Entity', 'EntityView', 1, 0, NULL, NULL, NULL, 0);
INSERT INTO BFW_ENT_FIELDS (ENTITYNAME, VIEWNAME, FIELDNAME, BAND, TITLE, VISIBLE, READONLY, EDITOR, EDITOR_OPTIONS, OPTIONS, REQ) VALUES ('BFW_IDE_UI', 'Item', 'CLS', NULL, 'Class', 1, 1, NULL, NULL, 'Style=Style.Bold', 0);
INSERT INTO BFW_ENT_FIELDS (ENTITYNAME, VIEWNAME, FIELDNAME, BAND, TITLE, VISIBLE, READONLY, EDITOR, EDITOR_OPTIONS, OPTIONS, REQ) VALUES ('BFW_IDE_UI', 'Item', 'TITLE', NULL, 'Title', 1, 0, NULL, NULL, NULL, 0);
INSERT INTO BFW_ENT_FIELDS (ENTITYNAME, VIEWNAME, FIELDNAME, BAND, TITLE, VISIBLE, READONLY, EDITOR, EDITOR_OPTIONS, OPTIONS, REQ) VALUES ('BFW_IDE_UI', 'Item', 'OPTIONS', NULL, 'Options', 1, 0, NULL, NULL, NULL, 0);
INSERT INTO BFW_ENT_FIELDS (ENTITYNAME, VIEWNAME, FIELDNAME, BAND, TITLE, VISIBLE, READONLY, EDITOR, EDITOR_OPTIONS, OPTIONS, REQ) VALUES ('BFW_IDE_UI', 'New', 'CLS', NULL, 'Class', 1, 0, 'Lookup', 'Entity=BFW_IDE_UI_CLS;EView=Lookup', NULL, 0);
INSERT INTO BFW_ENT_FIELDS (ENTITYNAME, VIEWNAME, FIELDNAME, BAND, TITLE, VISIBLE, READONLY, EDITOR, EDITOR_OPTIONS, OPTIONS, REQ) VALUES ('BFW_IDE_UI', 'Item', 'ENT_VIEW_PKEY', 'Entity', 'Primary Keys', 1, 0, NULL, NULL, NULL, 0);
INSERT INTO BFW_ENT_FIELDS (ENTITYNAME, VIEWNAME, FIELDNAME, BAND, TITLE, VISIBLE, READONLY, EDITOR, EDITOR_OPTIONS, OPTIONS, REQ) VALUES ('BFW_IDE_UI', 'Item', 'ENT_VIEW_READONLY', 'Entity', 'ReadOnly', 1, 0, 'CheckBox', NULL, NULL, 0);
INSERT INTO BFW_ENT_FIELDS (ENTITYNAME, VIEWNAME, FIELDNAME, BAND, TITLE, VISIBLE, READONLY, EDITOR, EDITOR_OPTIONS, OPTIONS, REQ) VALUES ('BFW_IDE_UI', 'New', 'URI', NULL, NULL, 1, 0, NULL, NULL, NULL, 0);
INSERT INTO BFW_ENT_FIELDS (ENTITYNAME, VIEWNAME, FIELDNAME, BAND, TITLE, VISIBLE, READONLY, EDITOR, EDITOR_OPTIONS, OPTIONS, REQ) VALUES ('BFW_IDE_UI', 'List', 'MENUIDX', NULL, 'Menu Index', 1, 0, NULL, NULL, NULL, 0);
INSERT INTO BFW_ENT_FIELDS (ENTITYNAME, VIEWNAME, FIELDNAME, BAND, TITLE, VISIBLE, READONLY, EDITOR, EDITOR_OPTIONS, OPTIONS, REQ) VALUES ('BFW_IDE_UI_CLS', '-', 'IMG', NULL, 'UI View', 1, 0, 'Image', NULL, NULL, 0);
INSERT INTO BFW_ENT_FIELDS (ENTITYNAME, VIEWNAME, FIELDNAME, BAND, TITLE, VISIBLE, READONLY, EDITOR, EDITOR_OPTIONS, OPTIONS, REQ) VALUES ('BFW_IDE_UI_CLS', '-', 'CLS', NULL, 'Class', 1, 0, NULL, NULL, NULL, 0);
INSERT INTO BFW_ENT_FIELDS (ENTITYNAME, VIEWNAME, FIELDNAME, BAND, TITLE, VISIBLE, READONLY, EDITOR, EDITOR_OPTIONS, OPTIONS, REQ) VALUES ('BFW_IDE_UI_FIELDS', 'Item', 'READONLY', NULL, 'ReadOnly', 1, 0, 'CheckBox', NULL, NULL, 0);
INSERT INTO BFW_ENT_FIELDS (ENTITYNAME, VIEWNAME, FIELDNAME, BAND, TITLE, VISIBLE, READONLY, EDITOR, EDITOR_OPTIONS, OPTIONS, REQ) VALUES ('BFW_IDE_UI_FIELDS', 'Item', 'VISIBLE', '1', 'Visible', 1, 0, 'CheckBox', 'AllowGrayed', NULL, 0);
INSERT INTO BFW_ENT_FIELDS (ENTITYNAME, VIEWNAME, FIELDNAME, BAND, TITLE, VISIBLE, READONLY, EDITOR, EDITOR_OPTIONS, OPTIONS, REQ) VALUES ('BFW_IDE_UI_FIELDS', 'Item', 'REQ', NULL, 'Required', 1, 0, 'CheckBox', NULL, NULL, 0);
INSERT INTO BFW_ENT_FIELDS (ENTITYNAME, VIEWNAME, FIELDNAME, BAND, TITLE, VISIBLE, READONLY, EDITOR, EDITOR_OPTIONS, OPTIONS, REQ) VALUES ('BFW_IDE_UI_FIELDS', 'New', 'ENTITYNAME', NULL, 'Entity', 1, 1, NULL, NULL, NULL, 0);
INSERT INTO BFW_ENT_FIELDS (ENTITYNAME, VIEWNAME, FIELDNAME, BAND, TITLE, VISIBLE, READONLY, EDITOR, EDITOR_OPTIONS, OPTIONS, REQ) VALUES ('BFW_IDE_UI_FIELDS', 'New', 'VIEWNAME', NULL, 'EntityView', 1, 1, NULL, NULL, NULL, 0);
INSERT INTO BFW_ENT_FIELDS (ENTITYNAME, VIEWNAME, FIELDNAME, BAND, TITLE, VISIBLE, READONLY, EDITOR, EDITOR_OPTIONS, OPTIONS, REQ) VALUES ('BFW_IDE_UI_FIELDS', 'New', 'FIELDNAME', NULL, 'FieldName', 1, 0, NULL, NULL, NULL, 0);
INSERT INTO BFW_ENT_FIELDS (ENTITYNAME, VIEWNAME, FIELDNAME, BAND, TITLE, VISIBLE, READONLY, EDITOR, EDITOR_OPTIONS, OPTIONS, REQ) VALUES ('BFW_IDE_UI_FIELDS', 'New', 'BAND', NULL, 'Band', 1, 0, NULL, NULL, NULL, 0);
INSERT INTO BFW_ENT_FIELDS (ENTITYNAME, VIEWNAME, FIELDNAME, BAND, TITLE, VISIBLE, READONLY, EDITOR, EDITOR_OPTIONS, OPTIONS, REQ) VALUES ('BFW_IDE_UI_FIELDS', 'New', 'TITLE', NULL, 'Title', 1, 0, NULL, NULL, NULL, 0);
INSERT INTO BFW_ENT_FIELDS (ENTITYNAME, VIEWNAME, FIELDNAME, BAND, TITLE, VISIBLE, READONLY, EDITOR, EDITOR_OPTIONS, OPTIONS, REQ) VALUES ('BFW_IDE_UI_FIELDS', 'New', 'VISIBLE', NULL, 'Visible', 1, 0, 'CheckBox', NULL, NULL, 0);
INSERT INTO BFW_ENT_FIELDS (ENTITYNAME, VIEWNAME, FIELDNAME, BAND, TITLE, VISIBLE, READONLY, EDITOR, EDITOR_OPTIONS, OPTIONS, REQ) VALUES ('BFW_IDE_UI_FIELDS', 'New', 'READONLY', NULL, 'ReadOnly', 1, 0, 'CheckBox', NULL, NULL, 0);
INSERT INTO BFW_ENT_FIELDS (ENTITYNAME, VIEWNAME, FIELDNAME, BAND, TITLE, VISIBLE, READONLY, EDITOR, EDITOR_OPTIONS, OPTIONS, REQ) VALUES ('BFW_IDE_UI_FIELDS', 'New', 'EDITOR', NULL, 'Editor', 1, 0, '', NULL, NULL, 0);
INSERT INTO BFW_ENT_FIELDS (ENTITYNAME, VIEWNAME, FIELDNAME, BAND, TITLE, VISIBLE, READONLY, EDITOR, EDITOR_OPTIONS, OPTIONS, REQ) VALUES ('BFW_IDE_UI_FIELDS', 'New', 'EDITOR_OPTIONS', NULL, 'EditorOptions', 1, 0, NULL, NULL, NULL, 0);
INSERT INTO BFW_ENT_FIELDS (ENTITYNAME, VIEWNAME, FIELDNAME, BAND, TITLE, VISIBLE, READONLY, EDITOR, EDITOR_OPTIONS, OPTIONS, REQ) VALUES ('BFW_IDE_UI_FIELDS', 'New', 'OPTIONS', NULL, 'Options', 1, 0, NULL, NULL, NULL, 0);
INSERT INTO BFW_ENT_FIELDS (ENTITYNAME, VIEWNAME, FIELDNAME, BAND, TITLE, VISIBLE, READONLY, EDITOR, EDITOR_OPTIONS, OPTIONS, REQ) VALUES ('BFW_IDE_UI_FIELDS', 'New', 'REQ', NULL, 'Required', 1, 0, 'CheckBox', NULL, NULL, 0);
INSERT INTO BFW_ENT_FIELDS (ENTITYNAME, VIEWNAME, FIELDNAME, BAND, TITLE, VISIBLE, READONLY, EDITOR, EDITOR_OPTIONS, OPTIONS, REQ) VALUES ('BFW_IDE_UI_FIELDS', 'Item', 'ENTITYNAME', NULL, 'Entity', 1, 1, NULL, NULL, NULL, 0);
INSERT INTO BFW_ENT_FIELDS (ENTITYNAME, VIEWNAME, FIELDNAME, BAND, TITLE, VISIBLE, READONLY, EDITOR, EDITOR_OPTIONS, OPTIONS, REQ) VALUES ('BFW_IDE_UI_FIELDS', 'Item', 'VIEWNAME', NULL, 'EntityView', 1, 1, NULL, NULL, NULL, 0);
INSERT INTO BFW_ENT_FIELDS (ENTITYNAME, VIEWNAME, FIELDNAME, BAND, TITLE, VISIBLE, READONLY, EDITOR, EDITOR_OPTIONS, OPTIONS, REQ) VALUES ('BFW_IDE_UI_FIELDS', 'Item', 'FIELDNAME', NULL, 'FieldName', 1, 0, NULL, NULL, NULL, 0);
INSERT INTO BFW_ENT_FIELDS (ENTITYNAME, VIEWNAME, FIELDNAME, BAND, TITLE, VISIBLE, READONLY, EDITOR, EDITOR_OPTIONS, OPTIONS, REQ) VALUES ('BFW_IDE_UI_FIELDS', 'Item', 'BAND', NULL, 'Band', 1, 0, NULL, NULL, NULL, 0);
INSERT INTO BFW_ENT_FIELDS (ENTITYNAME, VIEWNAME, FIELDNAME, BAND, TITLE, VISIBLE, READONLY, EDITOR, EDITOR_OPTIONS, OPTIONS, REQ) VALUES ('BFW_IDE_UI_FIELDS', 'Item', 'TITLE', NULL, 'Title', 1, 0, NULL, NULL, NULL, 0);
INSERT INTO BFW_ENT_FIELDS (ENTITYNAME, VIEWNAME, FIELDNAME, BAND, TITLE, VISIBLE, READONLY, EDITOR, EDITOR_OPTIONS, OPTIONS, REQ) VALUES ('BFW_IDE_UI_FIELDS', 'Item', 'EDITOR', NULL, 'Editor', 1, 0, '', NULL, NULL, 0);
INSERT INTO BFW_ENT_FIELDS (ENTITYNAME, VIEWNAME, FIELDNAME, BAND, TITLE, VISIBLE, READONLY, EDITOR, EDITOR_OPTIONS, OPTIONS, REQ) VALUES ('BFW_IDE_UI_FIELDS', 'Item', 'EDITOR_OPTIONS', NULL, 'EditorOptions', 1, 0, NULL, NULL, NULL, 0);
INSERT INTO BFW_ENT_FIELDS (ENTITYNAME, VIEWNAME, FIELDNAME, BAND, TITLE, VISIBLE, READONLY, EDITOR, EDITOR_OPTIONS, OPTIONS, REQ) VALUES ('BFW_IDE_UI_FIELDS', 'Item', 'OPTIONS', NULL, 'Options', 1, 0, NULL, NULL, NULL, 0);
INSERT INTO BFW_ENT_FIELDS (ENTITYNAME, VIEWNAME, FIELDNAME, BAND, TITLE, VISIBLE, READONLY, EDITOR, EDITOR_OPTIONS, OPTIONS, REQ) VALUES ('-', '-', 'ID', NULL, 'Код', 0, 1, NULL, NULL, NULL, 0);
INSERT INTO BFW_ENT_FIELDS (ENTITYNAME, VIEWNAME, FIELDNAME, BAND, TITLE, VISIBLE, READONLY, EDITOR, EDITOR_OPTIONS, OPTIONS, REQ) VALUES ('CBR_MENU', 'New', 'NAME', NULL, 'Название блюда', 1, 0, NULL, NULL, NULL, 1);
INSERT INTO BFW_ENT_FIELDS (ENTITYNAME, VIEWNAME, FIELDNAME, BAND, TITLE, VISIBLE, READONLY, EDITOR, EDITOR_OPTIONS, OPTIONS, REQ) VALUES ('CBR_MENU', 'List', 'NAME', NULL, 'Блюдо', 1, 0, NULL, NULL, NULL, 0);
INSERT INTO BFW_ENT_FIELDS (ENTITYNAME, VIEWNAME, FIELDNAME, BAND, TITLE, VISIBLE, READONLY, EDITOR, EDITOR_OPTIONS, OPTIONS, REQ) VALUES ('-', '-', 'STATE_ID', NULL, 'Статус', 1, 0, NULL, NULL, NULL, 0);
INSERT INTO BFW_ENT_FIELDS (ENTITYNAME, VIEWNAME, FIELDNAME, BAND, TITLE, VISIBLE, READONLY, EDITOR, EDITOR_OPTIONS, OPTIONS, REQ) VALUES ('-', '-', 'STATE', NULL, 'Статус', 1, 0, NULL, NULL, NULL, 0);
INSERT INTO BFW_ENT_FIELDS (ENTITYNAME, VIEWNAME, FIELDNAME, BAND, TITLE, VISIBLE, READONLY, EDITOR, EDITOR_OPTIONS, OPTIONS, REQ) VALUES ('CBR_MENU', 'New', 'STATE_ID', NULL, 'Статус', 1, 0, 'Lookup', 'Entity=CBR_MENU;EView=Lookup', '', 0);
INSERT INTO BFW_ENT_FIELDS (ENTITYNAME, VIEWNAME, FIELDNAME, BAND, TITLE, VISIBLE, READONLY, EDITOR, EDITOR_OPTIONS, OPTIONS, REQ) VALUES ('CBR_MENU', 'Item', 'NAME', NULL, 'Название блюда', 1, 0, NULL, NULL, NULL, 1);
INSERT INTO BFW_ENT_FIELDS (ENTITYNAME, VIEWNAME, FIELDNAME, BAND, TITLE, VISIBLE, READONLY, EDITOR, EDITOR_OPTIONS, OPTIONS, REQ) VALUES ('CBR_MENU', 'Item', 'STATE_ID', NULL, 'Статус', 1, 0, 'Lookup', 'Entity=CBR_MENU;EView=States', NULL, 0);
INSERT INTO BFW_ENT_FIELDS (ENTITYNAME, VIEWNAME, FIELDNAME, BAND, TITLE, VISIBLE, READONLY, EDITOR, EDITOR_OPTIONS, OPTIONS, REQ) VALUES ('-', '-', 'NAME', NULL, 'Наименование', 1, 0, NULL, NULL, NULL, 0);
INSERT INTO BFW_ENT_FIELDS (ENTITYNAME, VIEWNAME, FIELDNAME, BAND, TITLE, VISIBLE, READONLY, EDITOR, EDITOR_OPTIONS, OPTIONS, REQ) VALUES ('CBR_MENU', 'New', 'GRP_ID', NULL, 'Группа', 1, 0, 'Lookup', 'Entity=CBR_MENU_GRP;EView=Lookup', NULL, 1);
INSERT INTO BFW_ENT_FIELDS (ENTITYNAME, VIEWNAME, FIELDNAME, BAND, TITLE, VISIBLE, READONLY, EDITOR, EDITOR_OPTIONS, OPTIONS, REQ) VALUES ('CBR_MENU', 'Item', 'GRP_ID', NULL, 'Группа', 1, 0, 'Lookup', 'Entity=CBR_MENU_GRP;EView=Lookup', NULL, 1);
INSERT INTO BFW_ENT_FIELDS (ENTITYNAME, VIEWNAME, FIELDNAME, BAND, TITLE, VISIBLE, READONLY, EDITOR, EDITOR_OPTIONS, OPTIONS, REQ) VALUES ('CBR_MENU', 'List', 'GRP', NULL, 'Группа', 1, 0, NULL, NULL, NULL, 0);
INSERT INTO BFW_ENT_FIELDS (ENTITYNAME, VIEWNAME, FIELDNAME, BAND, TITLE, VISIBLE, READONLY, EDITOR, EDITOR_OPTIONS, OPTIONS, REQ) VALUES ('CBR_MENU', 'Item', 'UNT', '', 'Единица порции', 1, 0, NULL, NULL, NULL, 0);
INSERT INTO BFW_ENT_FIELDS (ENTITYNAME, VIEWNAME, FIELDNAME, BAND, TITLE, VISIBLE, READONLY, EDITOR, EDITOR_OPTIONS, OPTIONS, REQ) VALUES ('CBR_PRICE', 'List', 'MENU_ID', NULL, 'Код', 0, 1, NULL, NULL, NULL, 0);
INSERT INTO BFW_ENT_FIELDS (ENTITYNAME, VIEWNAME, FIELDNAME, BAND, TITLE, VISIBLE, READONLY, EDITOR, EDITOR_OPTIONS, OPTIONS, REQ) VALUES ('CBR_MENU', 'New', 'UNT', '', 'Единица порции', 1, 0, NULL, NULL, NULL, 1);
INSERT INTO BFW_ENT_FIELDS (ENTITYNAME, VIEWNAME, FIELDNAME, BAND, TITLE, VISIBLE, READONLY, EDITOR, EDITOR_OPTIONS, OPTIONS, REQ) VALUES ('CBR_PRICE', 'List', 'DAT', NULL, NULL, -1, 0, NULL, NULL, NULL, 0);
INSERT INTO BFW_ENT_FIELDS (ENTITYNAME, VIEWNAME, FIELDNAME, BAND, TITLE, VISIBLE, READONLY, EDITOR, EDITOR_OPTIONS, OPTIONS, REQ) VALUES ('CBR_PRICE', 'List', 'TYP_ID', NULL, NULL, -1, 0, NULL, NULL, NULL, 0);
INSERT INTO BFW_ENT_FIELDS (ENTITYNAME, VIEWNAME, FIELDNAME, BAND, TITLE, VISIBLE, READONLY, EDITOR, EDITOR_OPTIONS, OPTIONS, REQ) VALUES ('CBR_PRICE', 'List', 'DISH', NULL, 'Блюдо', 1, 1, NULL, NULL, NULL, 0);
INSERT INTO BFW_ENT_FIELDS (ENTITYNAME, VIEWNAME, FIELDNAME, BAND, TITLE, VISIBLE, READONLY, EDITOR, EDITOR_OPTIONS, OPTIONS, REQ) VALUES ('CBR_PRICE', 'List', 'UNT', NULL, 'Порция', 1, 1, NULL, NULL, NULL, 0);
INSERT INTO BFW_ENT_FIELDS (ENTITYNAME, VIEWNAME, FIELDNAME, BAND, TITLE, VISIBLE, READONLY, EDITOR, EDITOR_OPTIONS, OPTIONS, REQ) VALUES ('CBR_PRICE', 'List', 'PRICE', NULL, 'Цена', 1, 1, NULL, NULL, NULL, 0);
INSERT INTO BFW_ENT_FIELDS (ENTITYNAME, VIEWNAME, FIELDNAME, BAND, TITLE, VISIBLE, READONLY, EDITOR, EDITOR_OPTIONS, OPTIONS, REQ) VALUES ('CBR_PRICE', 'List', 'PRICE_NEW', NULL, 'Новая цена', 1, 0, NULL, NULL, NULL, 0);
INSERT INTO BFW_ENT_FIELDS (ENTITYNAME, VIEWNAME, FIELDNAME, BAND, TITLE, VISIBLE, READONLY, EDITOR, EDITOR_OPTIONS, OPTIONS, REQ) VALUES ('CBR_ORD', 'Journal', 'ID', NULL, '№', 1, 0, NULL, NULL, NULL, 0);
INSERT INTO BFW_ENT_FIELDS (ENTITYNAME, VIEWNAME, FIELDNAME, BAND, TITLE, VISIBLE, READONLY, EDITOR, EDITOR_OPTIONS, OPTIONS, REQ) VALUES ('CBR_ORD', 'Journal', 'DAT', NULL, 'Дата', 1, 0, NULL, NULL, NULL, 0);
INSERT INTO BFW_ENT_FIELDS (ENTITYNAME, VIEWNAME, FIELDNAME, BAND, TITLE, VISIBLE, READONLY, EDITOR, EDITOR_OPTIONS, OPTIONS, REQ) VALUES ('CBR_ORD', 'Journal', 'ROOM', NULL, 'Зал', 1, 0, NULL, NULL, NULL, 0);
INSERT INTO BFW_ENT_FIELDS (ENTITYNAME, VIEWNAME, FIELDNAME, BAND, TITLE, VISIBLE, READONLY, EDITOR, EDITOR_OPTIONS, OPTIONS, REQ) VALUES ('CBR_ORD', 'Journal', 'TBL', NULL, 'Стол', 1, 0, NULL, NULL, NULL, 0);
INSERT INTO BFW_ENT_FIELDS (ENTITYNAME, VIEWNAME, FIELDNAME, BAND, TITLE, VISIBLE, READONLY, EDITOR, EDITOR_OPTIONS, OPTIONS, REQ) VALUES ('CBR_TBL', 'List', 'ROOM', NULL, 'Зал', 1, 0, NULL, NULL, NULL, 0);
INSERT INTO BFW_ENT_FIELDS (ENTITYNAME, VIEWNAME, FIELDNAME, BAND, TITLE, VISIBLE, READONLY, EDITOR, EDITOR_OPTIONS, OPTIONS, REQ) VALUES ('CBR_TBL', 'New', 'ROOM_ID', NULL, 'Зал', 1, 0, 'Lookup', 'Entity=CBR_ROOM;EView=Lookup', NULL, 1);
INSERT INTO BFW_ENT_FIELDS (ENTITYNAME, VIEWNAME, FIELDNAME, BAND, TITLE, VISIBLE, READONLY, EDITOR, EDITOR_OPTIONS, OPTIONS, REQ) VALUES ('CBR_PRICE', 'List', 'GRP', NULL, 'Группа', 1, 1, NULL, NULL, NULL, 0);
INSERT INTO BFW_ENT_FIELDS (ENTITYNAME, VIEWNAME, FIELDNAME, BAND, TITLE, VISIBLE, READONLY, EDITOR, EDITOR_OPTIONS, OPTIONS, REQ) VALUES ('CBR_TBL', 'Item', 'ROOM_ID', NULL, 'Зал', 1, 0, 'Lookup', 'Entity=CBR_ROOM;EView=Lookup', NULL, 1);
INSERT INTO BFW_ENT_FIELDS (ENTITYNAME, VIEWNAME, FIELDNAME, BAND, TITLE, VISIBLE, READONLY, EDITOR, EDITOR_OPTIONS, OPTIONS, REQ) VALUES ('CBR_TBL', 'Item', 'STATE_ID', NULL, 'Статус', 1, 0, 'Lookup', 'Entity=CBR_TBL;EView=States', NULL, 0);
INSERT INTO BFW_ENT_FIELDS (ENTITYNAME, VIEWNAME, FIELDNAME, BAND, TITLE, VISIBLE, READONLY, EDITOR, EDITOR_OPTIONS, OPTIONS, REQ) VALUES ('CBR_ORD', 'Journal', 'IDAT', NULL, 'Время открытия', 1, 0, NULL, NULL, NULL, 0);
INSERT INTO BFW_ENT_FIELDS (ENTITYNAME, VIEWNAME, FIELDNAME, BAND, TITLE, VISIBLE, READONLY, EDITOR, EDITOR_OPTIONS, OPTIONS, REQ) VALUES ('CBR_PRICE', 'Selector', 'DAT', NULL, 'Дата', 1, 0, NULL, NULL, NULL, 0);
INSERT INTO BFW_ENT_FIELDS (ENTITYNAME, VIEWNAME, FIELDNAME, BAND, TITLE, VISIBLE, READONLY, EDITOR, EDITOR_OPTIONS, OPTIONS, REQ) VALUES ('CBR_PRICE', 'Selector', 'TYP_ID', NULL, 'Тип цен', 1, 0, 'Lookup', 'Entity=CBR_PRICE_TYP;EView=Lookup', NULL, 0);
INSERT INTO BFW_ENT_FIELDS (ENTITYNAME, VIEWNAME, FIELDNAME, BAND, TITLE, VISIBLE, READONLY, EDITOR, EDITOR_OPTIONS, OPTIONS, REQ) VALUES ('CBR_MENU', 'List', 'UNT', NULL, 'Порция', 1, 0, NULL, NULL, NULL, 0);
INSERT INTO BFW_ENT_FIELDS (ENTITYNAME, VIEWNAME, FIELDNAME, BAND, TITLE, VISIBLE, READONLY, EDITOR, EDITOR_OPTIONS, OPTIONS, REQ) VALUES ('CBR_ORD', 'Head', 'ID', NULL, '№', 1, 0, NULL, NULL, NULL, 0);
INSERT INTO BFW_ENT_FIELDS (ENTITYNAME, VIEWNAME, FIELDNAME, BAND, TITLE, VISIBLE, READONLY, EDITOR, EDITOR_OPTIONS, OPTIONS, REQ) VALUES ('CBR_ORD', 'Head', 'DAT', NULL, 'Дата', 1, 0, NULL, NULL, NULL, 0);
INSERT INTO BFW_ENT_FIELDS (ENTITYNAME, VIEWNAME, FIELDNAME, BAND, TITLE, VISIBLE, READONLY, EDITOR, EDITOR_OPTIONS, OPTIONS, REQ) VALUES ('CBR_ORD', 'Head', 'ROOM', NULL, 'Зал', 1, 0, NULL, NULL, NULL, 0);
INSERT INTO BFW_ENT_FIELDS (ENTITYNAME, VIEWNAME, FIELDNAME, BAND, TITLE, VISIBLE, READONLY, EDITOR, EDITOR_OPTIONS, OPTIONS, REQ) VALUES ('CBR_ORD', 'Head', 'TBL', NULL, 'Стол', 1, 0, NULL, NULL, NULL, 0);

COMMIT WORK;

INSERT INTO BFW_ENT_VIEWS (ENTITYNAME, VIEWNAME, SQL_SELECT, SQL_INSERT, SQL_UPDATE, SQL_DELETE, SQL_REFRESH, READONLY, PKEY, OPTIONS, IS_EXEC, SQL_INSERTDEF) VALUES ('BFW_INF_SETTING', 'META', 'select * from bfw_inf_settings_meta order by title', NULL, NULL, NULL, NULL, 1, NULL, NULL, 0, NULL);
INSERT INTO BFW_ENT_VIEWS (ENTITYNAME, VIEWNAME, SQL_SELECT, SQL_INSERT, SQL_UPDATE, SQL_DELETE, SQL_REFRESH, READONLY, PKEY, OPTIONS, IS_EXEC, SQL_INSERTDEF) VALUES ('BFW_INF_SETTING', 'GET', 'select * from bfw_inf_ev_setting_get(:name, :username)', NULL, NULL, NULL, NULL, 1, NULL, NULL, 0, NULL);
INSERT INTO BFW_ENT_VIEWS (ENTITYNAME, VIEWNAME, SQL_SELECT, SQL_INSERT, SQL_UPDATE, SQL_DELETE, SQL_REFRESH, READONLY, PKEY, OPTIONS, IS_EXEC, SQL_INSERTDEF) VALUES ('BFW_INF_SETTING', 'CHECK', 'select * from bfw_inf_ev_setting_check(:name, :username)', NULL, NULL, NULL, NULL, 1, NULL, NULL, 0, NULL);
INSERT INTO BFW_ENT_VIEWS (ENTITYNAME, VIEWNAME, SQL_SELECT, SQL_INSERT, SQL_UPDATE, SQL_DELETE, SQL_REFRESH, READONLY, PKEY, OPTIONS, IS_EXEC, SQL_INSERTDEF) VALUES ('BFW_SEC_POLICY', 'List', 'select * from bfw_sec_ev_policy_list(:ParentID) order by name', NULL, NULL, NULL, NULL, 1, NULL, NULL, 0, NULL);
INSERT INTO BFW_ENT_VIEWS (ENTITYNAME, VIEWNAME, SQL_SELECT, SQL_INSERT, SQL_UPDATE, SQL_DELETE, SQL_REFRESH, READONLY, PKEY, OPTIONS, IS_EXEC, SQL_INSERTDEF) VALUES ('BFW_SEC_USER', 'List', 'select userid, name, isrole from bfw_sec_users order by name', NULL, NULL, NULL, NULL, 1, NULL, NULL, 0, NULL);
INSERT INTO BFW_ENT_VIEWS (ENTITYNAME, VIEWNAME, SQL_SELECT, SQL_INSERT, SQL_UPDATE, SQL_DELETE, SQL_REFRESH, READONLY, PKEY, OPTIONS, IS_EXEC, SQL_INSERTDEF) VALUES ('BFW_SEC_PERM', 'List', 'select * from bfw_sec_ev_perm_list(:polid)', NULL, NULL, NULL, NULL, 1, NULL, NULL, 0, NULL);
INSERT INTO BFW_ENT_VIEWS (ENTITYNAME, VIEWNAME, SQL_SELECT, SQL_INSERT, SQL_UPDATE, SQL_DELETE, SQL_REFRESH, READONLY, PKEY, OPTIONS, IS_EXEC, SQL_INSERTDEF) VALUES ('BFW_SEC_USER', 'Item', 'select userid, name, isrole from bfw_sec_users where userid= :userid', NULL, NULL, NULL, NULL, 1, NULL, NULL, 0, NULL);
INSERT INTO BFW_ENT_VIEWS (ENTITYNAME, VIEWNAME, SQL_SELECT, SQL_INSERT, SQL_UPDATE, SQL_DELETE, SQL_REFRESH, READONLY, PKEY, OPTIONS, IS_EXEC, SQL_INSERTDEF) VALUES ('BFW_SEC_PERM', 'Effective', 'select * from bfw_sec_ev_perm_effective(:polid, :permid, :resid)', NULL, NULL, NULL, NULL, 1, NULL, NULL, 0, NULL);
INSERT INTO BFW_ENT_VIEWS (ENTITYNAME, VIEWNAME, SQL_SELECT, SQL_INSERT, SQL_UPDATE, SQL_DELETE, SQL_REFRESH, READONLY, PKEY, OPTIONS, IS_EXEC, SQL_INSERTDEF) VALUES ('BFW_UI', 'List', 'select i.uri, i.cls, i.entityname, coalesce(i.viewname, c.viewname) viewname,
           i.title, i.grp, i.menuidx, i.useperm,
           i.options, i.params, i.outs
    from bfw_ui i
         left join bfw_ui_cls c on (i.cls = c.cls)
         left join bfw_ui_grp g on (g.grp = i.grp)
    order by g.idx, i.menuidx, i.title', NULL, NULL, NULL, NULL, 1, NULL, NULL, 0, NULL);
INSERT INTO BFW_ENT_VIEWS (ENTITYNAME, VIEWNAME, SQL_SELECT, SQL_INSERT, SQL_UPDATE, SQL_DELETE, SQL_REFRESH, READONLY, PKEY, OPTIONS, IS_EXEC, SQL_INSERTDEF) VALUES ('BFW_UI', 'Commands', 'select cmd.idx, cmd.* from bfw_ui_cmd cmd where cmd.uri = :uri
union
select cmd.idx, cmd.* from bfw_ui ui left join bfw_ui_cmd cmd on (cmd.uri = ui.cls)
where ui.uri = :uri and cmd.uri is not null
      and not exists(select * from bfw_ui_cmd cmdr where cmdr.uri = ui.uri and cmdr.cmd = cmd.cmd)
      and :APP_VER > 20120410
order by 1', NULL, NULL, NULL, NULL, 1, NULL, NULL, 0, NULL);
INSERT INTO BFW_ENT_VIEWS (ENTITYNAME, VIEWNAME, SQL_SELECT, SQL_INSERT, SQL_UPDATE, SQL_DELETE, SQL_REFRESH, READONLY, PKEY, OPTIONS, IS_EXEC, SQL_INSERTDEF) VALUES ('BFW_SEC_PROV', 'List', 'select * from bfw_sec_prov', NULL, NULL, NULL, NULL, 1, NULL, NULL, 0, NULL);
INSERT INTO BFW_ENT_VIEWS (ENTITYNAME, VIEWNAME, SQL_SELECT, SQL_INSERT, SQL_UPDATE, SQL_DELETE, SQL_REFRESH, READONLY, PKEY, OPTIONS, IS_EXEC, SQL_INSERTDEF) VALUES ('BFW_UI', 'Styles', 'select * from bfw_ui_styles', NULL, NULL, NULL, NULL, 1, NULL, NULL, 0, NULL);
INSERT INTO BFW_ENT_VIEWS (ENTITYNAME, VIEWNAME, SQL_SELECT, SQL_INSERT, SQL_UPDATE, SQL_DELETE, SQL_REFRESH, READONLY, PKEY, OPTIONS, IS_EXEC, SQL_INSERTDEF) VALUES ('BFW_META', 'Entities', 'select entityname from bfw_ent', NULL, NULL, NULL, NULL, 1, NULL, NULL, 0, NULL);
INSERT INTO BFW_ENT_VIEWS (ENTITYNAME, VIEWNAME, SQL_SELECT, SQL_INSERT, SQL_UPDATE, SQL_DELETE, SQL_REFRESH, READONLY, PKEY, OPTIONS, IS_EXEC, SQL_INSERTDEF) VALUES ('BFW_META', 'Fields', 'select * from bfw_ent_fields where entityname = :entityname and viewname = :viewname', NULL, NULL, NULL, NULL, 1, NULL, NULL, 0, NULL);
INSERT INTO BFW_ENT_VIEWS (ENTITYNAME, VIEWNAME, SQL_SELECT, SQL_INSERT, SQL_UPDATE, SQL_DELETE, SQL_REFRESH, READONLY, PKEY, OPTIONS, IS_EXEC, SQL_INSERTDEF) VALUES ('BFW_META', 'Entity', 'select * from bfw_ent where entityname = :entityname', NULL, NULL, NULL, NULL, 1, NULL, NULL, 0, NULL);
INSERT INTO BFW_ENT_VIEWS (ENTITYNAME, VIEWNAME, SQL_SELECT, SQL_INSERT, SQL_UPDATE, SQL_DELETE, SQL_REFRESH, READONLY, PKEY, OPTIONS, IS_EXEC, SQL_INSERTDEF) VALUES ('BFW_META', 'View', 'select * from bfw_ent_views where entityname = :entityname and viewname = :viewname', NULL, NULL, NULL, NULL, 1, NULL, NULL, 0, NULL);
INSERT INTO BFW_ENT_VIEWS (ENTITYNAME, VIEWNAME, SQL_SELECT, SQL_INSERT, SQL_UPDATE, SQL_DELETE, SQL_REFRESH, READONLY, PKEY, OPTIONS, IS_EXEC, SQL_INSERTDEF) VALUES ('BFW_META', 'ViewLinks', 'select * from bfw_ent_view_links where entityname = :entityname and viewname = :viewname', NULL, NULL, NULL, NULL, 1, NULL, NULL, 0, NULL);
INSERT INTO BFW_ENT_VIEWS (ENTITYNAME, VIEWNAME, SQL_SELECT, SQL_INSERT, SQL_UPDATE, SQL_DELETE, SQL_REFRESH, READONLY, PKEY, OPTIONS, IS_EXEC, SQL_INSERTDEF) VALUES ('BFW_META', 'ViewLinkedFields', 'select * from bfw_ent_view_links  where linked_entityname = :entityname and linked_viewname = :viewname and coalesce(linked_field, '''') <> ''''', NULL, NULL, NULL, NULL, 1, NULL, NULL, 0, NULL);
INSERT INTO BFW_ENT_VIEWS (ENTITYNAME, VIEWNAME, SQL_SELECT, SQL_INSERT, SQL_UPDATE, SQL_DELETE, SQL_REFRESH, READONLY, PKEY, OPTIONS, IS_EXEC, SQL_INSERTDEF) VALUES ('BFW_INF_SETTING', 'SET', 'execute procedure bfw_inf_ev_setting_set(:name, :username, :vali, :vals, :valn, :vald)', NULL, NULL, NULL, NULL, 1, NULL, NULL, 1, NULL);
INSERT INTO BFW_ENT_VIEWS (ENTITYNAME, VIEWNAME, SQL_SELECT, SQL_INSERT, SQL_UPDATE, SQL_DELETE, SQL_REFRESH, READONLY, PKEY, OPTIONS, IS_EXEC, SQL_INSERTDEF) VALUES ('BFW_SEC_USER', 'UserRoleCheck', 'select count(*) status from bfw_sec_user_roles  where userid = :userid and roleid = :roleid', NULL, NULL, NULL, NULL, 1, NULL, NULL, 0, NULL);
INSERT INTO BFW_ENT_VIEWS (ENTITYNAME, VIEWNAME, SQL_SELECT, SQL_INSERT, SQL_UPDATE, SQL_DELETE, SQL_REFRESH, READONLY, PKEY, OPTIONS, IS_EXEC, SQL_INSERTDEF) VALUES ('BFW_SEC_PERM', 'StateGet', 'select state from bfw_sec_ev_perm_state_get(:permid, :userid, :resid)', NULL, NULL, NULL, NULL, 1, NULL, NULL, 0, NULL);
INSERT INTO BFW_ENT_VIEWS (ENTITYNAME, VIEWNAME, SQL_SELECT, SQL_INSERT, SQL_UPDATE, SQL_DELETE, SQL_REFRESH, READONLY, PKEY, OPTIONS, IS_EXEC, SQL_INSERTDEF) VALUES ('BFW_SEC_POLICY', 'StateGet', 'select state from bfw_sec_ev_policy_state_get(:polid)', NULL, NULL, NULL, NULL, 1, NULL, NULL, 0, NULL);
INSERT INTO BFW_ENT_VIEWS (ENTITYNAME, VIEWNAME, SQL_SELECT, SQL_INSERT, SQL_UPDATE, SQL_DELETE, SQL_REFRESH, READONLY, PKEY, OPTIONS, IS_EXEC, SQL_INSERTDEF) VALUES ('BFW_SEC_PERM', 'StateSet', 'execute procedure bfw_sec_ev_perm_state_set(:permid, :userid, :resid, :state)', NULL, NULL, NULL, NULL, 1, NULL, NULL, 1, NULL);
INSERT INTO BFW_ENT_VIEWS (ENTITYNAME, VIEWNAME, SQL_SELECT, SQL_INSERT, SQL_UPDATE, SQL_DELETE, SQL_REFRESH, READONLY, PKEY, OPTIONS, IS_EXEC, SQL_INSERTDEF) VALUES ('BFW_SEC_POLICY', 'StateSet', 'execute procedure bfw_sec_ev_policy_state_set(:polid, :state)', NULL, NULL, NULL, NULL, 1, NULL, NULL, 1, NULL);
INSERT INTO BFW_ENT_VIEWS (ENTITYNAME, VIEWNAME, SQL_SELECT, SQL_INSERT, SQL_UPDATE, SQL_DELETE, SQL_REFRESH, READONLY, PKEY, OPTIONS, IS_EXEC, SQL_INSERTDEF) VALUES ('BFW_SEC_USER', 'UserRoleAdd', 'insert into bfw_sec_user_roles(userid, roleid) values(:userid, :roleid)', NULL, NULL, NULL, NULL, 1, NULL, NULL, 1, NULL);
INSERT INTO BFW_ENT_VIEWS (ENTITYNAME, VIEWNAME, SQL_SELECT, SQL_INSERT, SQL_UPDATE, SQL_DELETE, SQL_REFRESH, READONLY, PKEY, OPTIONS, IS_EXEC, SQL_INSERTDEF) VALUES ('BFW_SEC_USER', 'UserRoleRemove', 'delete from bfw_sec_user_roles where userid = :userid and roleid = :roleid', NULL, NULL, NULL, NULL, 1, NULL, NULL, 1, NULL);
INSERT INTO BFW_ENT_VIEWS (ENTITYNAME, VIEWNAME, SQL_SELECT, SQL_INSERT, SQL_UPDATE, SQL_DELETE, SQL_REFRESH, READONLY, PKEY, OPTIONS, IS_EXEC, SQL_INSERTDEF) VALUES ('BFW_SEC_PERM', 'Check', 'select state from bfw_sec_sp_perm_check(:permid, :userid, :resid)', NULL, NULL, NULL, NULL, 1, NULL, NULL, 0, NULL);
INSERT INTO BFW_ENT_VIEWS (ENTITYNAME, VIEWNAME, SQL_SELECT, SQL_INSERT, SQL_UPDATE, SQL_DELETE, SQL_REFRESH, READONLY, PKEY, OPTIONS, IS_EXEC, SQL_INSERTDEF) VALUES ('BFW_SEC_POLICY', 'Reset', 'execute procedure bfw_sec_ev_policy_reset(:polid)', NULL, NULL, NULL, NULL, 1, NULL, NULL, 1, NULL);
INSERT INTO BFW_ENT_VIEWS (ENTITYNAME, VIEWNAME, SQL_SELECT, SQL_INSERT, SQL_UPDATE, SQL_DELETE, SQL_REFRESH, READONLY, PKEY, OPTIONS, IS_EXEC, SQL_INSERTDEF) VALUES ('BFW_INF_MSG', 'POP', 'select * from bfw_inf_sp_msg_pop(:last_id)', NULL, NULL, NULL, NULL, 1, NULL, NULL, 0, NULL);
INSERT INTO BFW_ENT_VIEWS (ENTITYNAME, VIEWNAME, SQL_SELECT, SQL_INSERT, SQL_UPDATE, SQL_DELETE, SQL_REFRESH, READONLY, PKEY, OPTIONS, IS_EXEC, SQL_INSERTDEF) VALUES ('BFW_INF_MSG', 'PUSH', 'execute procedure bfw_inf_sp_msg_push(:receiver, :topic, :txt)', NULL, NULL, NULL, NULL, 1, NULL, NULL, 1, NULL);
INSERT INTO BFW_ENT_VIEWS (ENTITYNAME, VIEWNAME, SQL_SELECT, SQL_INSERT, SQL_UPDATE, SQL_DELETE, SQL_REFRESH, READONLY, PKEY, OPTIONS, IS_EXEC, SQL_INSERTDEF) VALUES ('BFW_INF_MSG', 'MARK', 'update bfw_inf_msg set status = 1 where id = :id', NULL, NULL, NULL, NULL, 1, NULL, NULL, 1, NULL);
INSERT INTO BFW_ENT_VIEWS (ENTITYNAME, VIEWNAME, SQL_SELECT, SQL_INSERT, SQL_UPDATE, SQL_DELETE, SQL_REFRESH, READONLY, PKEY, OPTIONS, IS_EXEC, SQL_INSERTDEF) VALUES ('BFW_IDE_UI_CLS', 'Item', 'select * from bfw_ui_cls where cls = :ID', NULL, NULL, NULL, NULL, 0, NULL, NULL, 0, NULL);
INSERT INTO BFW_ENT_VIEWS (ENTITYNAME, VIEWNAME, SQL_SELECT, SQL_INSERT, SQL_UPDATE, SQL_DELETE, SQL_REFRESH, READONLY, PKEY, OPTIONS, IS_EXEC, SQL_INSERTDEF) VALUES ('BFW_IDE_ENT', 'List', 'select * from bfw_ent order by entityname', NULL, NULL, NULL, 'select * from bfw_ent where entityname = :entityname', 1, 'entityname', NULL, 0, NULL);
INSERT INTO BFW_ENT_VIEWS (ENTITYNAME, VIEWNAME, SQL_SELECT, SQL_INSERT, SQL_UPDATE, SQL_DELETE, SQL_REFRESH, READONLY, PKEY, OPTIONS, IS_EXEC, SQL_INSERTDEF) VALUES ('BFW_IDE_ENT', 'Item', 'select * from bfw_ent where entityname = :id', NULL, NULL, NULL, NULL, 1, NULL, NULL, 0, NULL);
INSERT INTO BFW_ENT_VIEWS (ENTITYNAME, VIEWNAME, SQL_SELECT, SQL_INSERT, SQL_UPDATE, SQL_DELETE, SQL_REFRESH, READONLY, PKEY, OPTIONS, IS_EXEC, SQL_INSERTDEF) VALUES ('BFW_IDE_EVIEW', 'List', 'select * from bfw_ent_views ev  where entityname = :entityname', NULL, NULL, NULL, NULL, 1, 'viewname', NULL, 0, NULL);
INSERT INTO BFW_ENT_VIEWS (ENTITYNAME, VIEWNAME, SQL_SELECT, SQL_INSERT, SQL_UPDATE, SQL_DELETE, SQL_REFRESH, READONLY, PKEY, OPTIONS, IS_EXEC, SQL_INSERTDEF) VALUES ('BFW_IDE_EVIEW', 'Item', 'select ev.*, ev.entityname || ''->'' ||ev.viewname as ui_title 
from bfw_ent_views ev  
where entityname = :entityname and viewname = :viewname', NULL, NULL, NULL, NULL, 0, NULL, NULL, 0, NULL);
INSERT INTO BFW_ENT_VIEWS (ENTITYNAME, VIEWNAME, SQL_SELECT, SQL_INSERT, SQL_UPDATE, SQL_DELETE, SQL_REFRESH, READONLY, PKEY, OPTIONS, IS_EXEC, SQL_INSERTDEF) VALUES ('BFW_IDE_UI', 'TreeList', 'select distinct ui.pkg id, ui.pkg name, cast(null as varchar(50)) parent
from bfw_ui ui
where ui.pkg is not null
union all
select ui.uri, ui.title, ui.pkg parent
from bfw_ui ui
where ui.grp is not null
union all 
select distinct cast(''-'' as varchar(50)) id, cast(''-----'' as varchar(50)) name, cast(null as varchar(50)) parent
from bfw_ui ui
where ui.pkg is null
order by 2', NULL, NULL, NULL, '', 0, NULL, NULL, 0, NULL);
INSERT INTO BFW_ENT_VIEWS (ENTITYNAME, VIEWNAME, SQL_SELECT, SQL_INSERT, SQL_UPDATE, SQL_DELETE, SQL_REFRESH, READONLY, PKEY, OPTIONS, IS_EXEC, SQL_INSERTDEF) VALUES ('BFW_IDE_UI', 'Item', 'select * from bfw_ide_ev_ui_item(:uri)', NULL, 'execute procedure bfw_ide_ev_ui_item_u(:uri, :title, :grp, :menuidx, :options, 
:params, :outs, :useperm, :pkg, 
:ent, :ent_view, :ent_view_readonly, :ent_view_pkey, :ent_sql_select, :ent_sql_insert, :ent_sql_insertdef,
 :ent_sql_update,:ent_sql_delete,:ent_sql_refresh)', NULL, NULL, 0, 'uri', NULL, 0, NULL);
INSERT INTO BFW_ENT_VIEWS (ENTITYNAME, VIEWNAME, SQL_SELECT, SQL_INSERT, SQL_UPDATE, SQL_DELETE, SQL_REFRESH, READONLY, PKEY, OPTIONS, IS_EXEC, SQL_INSERTDEF) VALUES ('BFW_IDE_UI', 'New', 'select * from bfw_ide_ev_ui_new', NULL, 'execute procedure bfw_ide_ev_ui_new_u(:uri, :cls, :title, :pkg, :ent, :ent_view)', NULL, NULL, 0, NULL, NULL, 0, NULL);
INSERT INTO BFW_ENT_VIEWS (ENTITYNAME, VIEWNAME, SQL_SELECT, SQL_INSERT, SQL_UPDATE, SQL_DELETE, SQL_REFRESH, READONLY, PKEY, OPTIONS, IS_EXEC, SQL_INSERTDEF) VALUES ('BFW_IDE_UI', 'List', 'select * from bfw_ui ui where coalesce(pkg, ''-'') = :pkg order by uri', NULL, NULL, NULL, 'select * from bfw_ui where uri = :uri', 1, 'uri', NULL, 0, NULL);
INSERT INTO BFW_ENT_VIEWS (ENTITYNAME, VIEWNAME, SQL_SELECT, SQL_INSERT, SQL_UPDATE, SQL_DELETE, SQL_REFRESH, READONLY, PKEY, OPTIONS, IS_EXEC, SQL_INSERTDEF) VALUES ('BFW_IDE', 'MainMenu', 'select uri, title from bfw_ui ui 
where ui.uri in (''views.BFW_IDE_UI.TreeList'', ''views.BFW_IDE_ENT.List'')', NULL, NULL, NULL, NULL, 1, NULL, NULL, 0, NULL);
INSERT INTO BFW_ENT_VIEWS (ENTITYNAME, VIEWNAME, SQL_SELECT, SQL_INSERT, SQL_UPDATE, SQL_DELETE, SQL_REFRESH, READONLY, PKEY, OPTIONS, IS_EXEC, SQL_INSERTDEF) VALUES ('BFW_IDE', 'Explorer', 'select * from bfw_ui', NULL, NULL, NULL, NULL, 1, NULL, NULL, 0, NULL);
INSERT INTO BFW_ENT_VIEWS (ENTITYNAME, VIEWNAME, SQL_SELECT, SQL_INSERT, SQL_UPDATE, SQL_DELETE, SQL_REFRESH, READONLY, PKEY, OPTIONS, IS_EXEC, SQL_INSERTDEF) VALUES ('BFW_IDE_UI_FIELDS', 'List', 'select * from bfw_ent_fields 
where entityname = :entityname 
            and (viewname = :viewname or viewname = ''-'')', NULL, '', NULL, 'select * from bfw_ent_fields f 
where f.entityname = :entityname and f.viewname = :viewname and f.fieldname = :fieldname', 1, 'FIELDNAME', NULL, 0, '');
INSERT INTO BFW_ENT_VIEWS (ENTITYNAME, VIEWNAME, SQL_SELECT, SQL_INSERT, SQL_UPDATE, SQL_DELETE, SQL_REFRESH, READONLY, PKEY, OPTIONS, IS_EXEC, SQL_INSERTDEF) VALUES ('BFW_IDE_UI', 'ItemURI', 'select cast(''views.BFW_IDE_UI.Item'' as varchar(50)) viewUri, pkg
from bfw_ui where uri = :uri
union
select distinct cast(''views.BFW_IDE_UI.List'' as varchar(50)) viewUri, coalesce(pkg, ''-'') pkg
from bfw_ui where coalesce(pkg, ''-'') = :uri', NULL, NULL, NULL, NULL, 1, NULL, NULL, 0, NULL);
INSERT INTO BFW_ENT_VIEWS (ENTITYNAME, VIEWNAME, SQL_SELECT, SQL_INSERT, SQL_UPDATE, SQL_DELETE, SQL_REFRESH, READONLY, PKEY, OPTIONS, IS_EXEC, SQL_INSERTDEF) VALUES ('BFW_IDE_ENT', 'Lookup', 'select entityname id,  entityname name from bfw_ent where is_scheme = 0 order by entityname', NULL, NULL, NULL, NULL, 1, NULL, NULL, 0, NULL);
INSERT INTO BFW_ENT_VIEWS (ENTITYNAME, VIEWNAME, SQL_SELECT, SQL_INSERT, SQL_UPDATE, SQL_DELETE, SQL_REFRESH, READONLY, PKEY, OPTIONS, IS_EXEC, SQL_INSERTDEF) VALUES ('BFW_IDE_UI_CLS', 'Lookup', 'select cls id, cls name from bfw_ui_cls order by cls', NULL, NULL, NULL, NULL, 1, NULL, NULL, 0, NULL);
INSERT INTO BFW_ENT_VIEWS (ENTITYNAME, VIEWNAME, SQL_SELECT, SQL_INSERT, SQL_UPDATE, SQL_DELETE, SQL_REFRESH, READONLY, PKEY, OPTIONS, IS_EXEC, SQL_INSERTDEF) VALUES ('BFW_IDE_UI_FIELDS', 'Item', 'select * from bfw_ent_fields
where entityname = :entityname and viewname = :viewname and fieldname = :fieldname', NULL, 'update bfw_ent_fields 
set band = :band,  title = :title, visible = :visible, readonly = :readonly, req = :req,
       editor = :editor, editor_options = :editor_options, options = :options
where entityname = :entityname and viewname = :viewname and fieldname = :fieldname', NULL, NULL, 0, 'FIELDNAME', NULL, 0, NULL);
INSERT INTO BFW_ENT_VIEWS (ENTITYNAME, VIEWNAME, SQL_SELECT, SQL_INSERT, SQL_UPDATE, SQL_DELETE, SQL_REFRESH, READONLY, PKEY, OPTIONS, IS_EXEC, SQL_INSERTDEF) VALUES ('BFW_IDE_UI_FIELDS', 'New', 'select   f.*
from bfw_ent_fields f
where f.entityname = :entityname and f.viewname = :viewname and f.fieldname is null', 'insert into bfw_ent_fields(entityname, viewname, fieldname, band, title, visible, readonly, editor, editor_options, options, req )
values(:entityname, :viewname, :fieldname, :band, :title, :visible, :readonly, :editor, :editor_options, :options, :req)', '', NULL, NULL, 0, 'FIELDNAME', NULL, 0, 'select e.entityname, ev.viewname, cast(1 as integer) visible, cast(0 as integer) readonly, cast(0 as integer) req
from bfw_ent e left join bfw_ent_views ev on (e.entityname = ev.entityname)
where e.entityname = :entityname and ev.viewname = :viewname');
INSERT INTO BFW_ENT_VIEWS (ENTITYNAME, VIEWNAME, SQL_SELECT, SQL_INSERT, SQL_UPDATE, SQL_DELETE, SQL_REFRESH, READONLY, PKEY, OPTIONS, IS_EXEC, SQL_INSERTDEF) VALUES ('BFW_IDE_UI', 'ListTitle', 'select distinct coalesce(pkg, ''-'') title from bfw_ui where  coalesce(pkg, ''-'') = :pkg', NULL, NULL, NULL, NULL, 1, NULL, NULL, 0, NULL);
INSERT INTO BFW_ENT_VIEWS (ENTITYNAME, VIEWNAME, SQL_SELECT, SQL_INSERT, SQL_UPDATE, SQL_DELETE, SQL_REFRESH, READONLY, PKEY, OPTIONS, IS_EXEC, SQL_INSERTDEF) VALUES ('BFW_IDE_ENT', 'New', 'select entityname, description from bfw_ent  where entityname is null', 'insert into bfw_ent(entityname, description, is_scheme)
values(:entityname, :description, 0)', NULL, NULL, NULL, 0, 'ENTITYNAME', NULL, 0, '');
INSERT INTO BFW_ENT_VIEWS (ENTITYNAME, VIEWNAME, SQL_SELECT, SQL_INSERT, SQL_UPDATE, SQL_DELETE, SQL_REFRESH, READONLY, PKEY, OPTIONS, IS_EXEC, SQL_INSERTDEF) VALUES ('BFW_IDE_UI_CMD', 'List', 'select * from bfw_ui_cmd 
where uri = :uri
order by uri', NULL, NULL, NULL, 'select * from bfw_ui_cmd where uri = :uri and cmd = :cmd', 1, 'URI;CMD', NULL, 0, NULL);
INSERT INTO BFW_ENT_VIEWS (ENTITYNAME, VIEWNAME, SQL_SELECT, SQL_INSERT, SQL_UPDATE, SQL_DELETE, SQL_REFRESH, READONLY, PKEY, OPTIONS, IS_EXEC, SQL_INSERTDEF) VALUES ('BFW_IDE_UI_CMD', 'Item', 'select * from bfw_ui_cmd where uri = :uri and cmd = :cmd', NULL, 'update bfw_ui_cmd
set params = :params,
      handler = :handler
where uri = :uri and cmd = :cmd', NULL, NULL, 0, NULL, NULL, 0, NULL);
INSERT INTO BFW_ENT_VIEWS (ENTITYNAME, VIEWNAME, SQL_SELECT, SQL_INSERT, SQL_UPDATE, SQL_DELETE, SQL_REFRESH, READONLY, PKEY, OPTIONS, IS_EXEC, SQL_INSERTDEF) VALUES ('BFW_IDE_UI_CMD', 'New', 'select * from bfw_ui_cmd where uri = :uri and cmd is null', 'insert into bfw_ui_cmd(uri, cmd, caption, grp, def, idx, handler, params)
values(:uri, :cmd, :caption, :grp, :def, :idx, :handler, :params)', NULL, NULL, NULL, 0, 'URI;CMD', NULL, 0, 'select uri, cast(0 as integer) idx, cast(0 as integer) def from bfw_ui where uri = :uri');
INSERT INTO BFW_ENT_VIEWS (ENTITYNAME, VIEWNAME, SQL_SELECT, SQL_INSERT, SQL_UPDATE, SQL_DELETE, SQL_REFRESH, READONLY, PKEY, OPTIONS, IS_EXEC, SQL_INSERTDEF) VALUES ('BFW_IDE_EVIEW', 'New', 'select * from bfw_ent_views where entityname is null', 'insert into bfw_ent_views(entityname, viewname, sql_select) values(:entityname, :viewname, :sql_select)', NULL, NULL, NULL, 0, NULL, NULL, 0, '');
INSERT INTO BFW_ENT_VIEWS (ENTITYNAME, VIEWNAME, SQL_SELECT, SQL_INSERT, SQL_UPDATE, SQL_DELETE, SQL_REFRESH, READONLY, PKEY, OPTIONS, IS_EXEC, SQL_INSERTDEF) VALUES ('CBR_MENU', 'List', 'select * from cbr_ev_menu_list(null, 1)', NULL, NULL, 'delete from cbr_menu where id = :id', 'select * from cbr_ev_menu_list(:id, 1)', 1, NULL, NULL, 0, NULL);
INSERT INTO BFW_ENT_VIEWS (ENTITYNAME, VIEWNAME, SQL_SELECT, SQL_INSERT, SQL_UPDATE, SQL_DELETE, SQL_REFRESH, READONLY, PKEY, OPTIONS, IS_EXEC, SQL_INSERTDEF) VALUES ('CBR_PRICE_TYP', 'List', 'select id, name from cbr_price_typ order by name', NULL, NULL, 'delete from cbr_price_typ where id = :id', 'select * from cbr_price_typ where id = :id', 1, NULL, NULL, 0, NULL);
INSERT INTO BFW_ENT_VIEWS (ENTITYNAME, VIEWNAME, SQL_SELECT, SQL_INSERT, SQL_UPDATE, SQL_DELETE, SQL_REFRESH, READONLY, PKEY, OPTIONS, IS_EXEC, SQL_INSERTDEF) VALUES ('CBR_MENU', 'New', 'select * from cbr_ev_menu_new', '', 'execute procedure cbr_ev_menu_new_u(:id, :name, :grp_id, :unt)', NULL, NULL, 0, NULL, NULL, 0, '');
INSERT INTO BFW_ENT_VIEWS (ENTITYNAME, VIEWNAME, SQL_SELECT, SQL_INSERT, SQL_UPDATE, SQL_DELETE, SQL_REFRESH, READONLY, PKEY, OPTIONS, IS_EXEC, SQL_INSERTDEF) VALUES ('CBR_PRICE_TYP', 'New', 'select id, name from cbr_price_typ where id is null', 'insert into cbr_price_typ(id, name) values(:id, :name)', NULL, NULL, NULL, 0, NULL, NULL, 0, 'select gen_id(cbr_gen, 1) id from rdb$database');
INSERT INTO BFW_ENT_VIEWS (ENTITYNAME, VIEWNAME, SQL_SELECT, SQL_INSERT, SQL_UPDATE, SQL_DELETE, SQL_REFRESH, READONLY, PKEY, OPTIONS, IS_EXEC, SQL_INSERTDEF) VALUES ('CBR_PRICE_TYP', 'Item', 'select id, name from cbr_price_typ where id = :id', NULL, 'update cbr_price_typ set name = :name where id = :id', NULL, NULL, 0, NULL, NULL, 0, NULL);
INSERT INTO BFW_ENT_VIEWS (ENTITYNAME, VIEWNAME, SQL_SELECT, SQL_INSERT, SQL_UPDATE, SQL_DELETE, SQL_REFRESH, READONLY, PKEY, OPTIONS, IS_EXEC, SQL_INSERTDEF) VALUES ('CBR_PRICE', 'List', 'select * from cbr_ev_price_list(:dat, :typ_id)', NULL, 'execute procedure cbr_ev_price_list_u(:menu_id, :dat, :typ_id, :price_new)', NULL, NULL, 0, 'MENU_ID', NULL, 0, NULL);
INSERT INTO BFW_ENT_VIEWS (ENTITYNAME, VIEWNAME, SQL_SELECT, SQL_INSERT, SQL_UPDATE, SQL_DELETE, SQL_REFRESH, READONLY, PKEY, OPTIONS, IS_EXEC, SQL_INSERTDEF) VALUES ('CBR_MENU', 'States', 'select * from inf_sp_enum_lookup(''CBR'', ''-'', 1)', NULL, NULL, NULL, NULL, 1, NULL, NULL, 0, NULL);
INSERT INTO BFW_ENT_VIEWS (ENTITYNAME, VIEWNAME, SQL_SELECT, SQL_INSERT, SQL_UPDATE, SQL_DELETE, SQL_REFRESH, READONLY, PKEY, OPTIONS, IS_EXEC, SQL_INSERTDEF) VALUES ('CBR_MENU', 'Item', 'select * from cbr_ev_menu_item(:id)', NULL, 'execute procedure cbr_ev_menu_item_u(:id, :name, :grp_id, :state_id, :unt)', NULL, NULL, 0, NULL, NULL, 0, NULL);
INSERT INTO BFW_ENT_VIEWS (ENTITYNAME, VIEWNAME, SQL_SELECT, SQL_INSERT, SQL_UPDATE, SQL_DELETE, SQL_REFRESH, READONLY, PKEY, OPTIONS, IS_EXEC, SQL_INSERTDEF) VALUES ('CBR_UI', 'MainMenu', 'select  u.uri, u.title from bfw_ui u 
where u.pkg = ''CBR'' and coalesce(u.grp, '''') <> '''' and u.menuidx <> -1
order by u.menuidx', NULL, NULL, NULL, NULL, 0, NULL, NULL, 0, NULL);
INSERT INTO BFW_ENT_VIEWS (ENTITYNAME, VIEWNAME, SQL_SELECT, SQL_INSERT, SQL_UPDATE, SQL_DELETE, SQL_REFRESH, READONLY, PKEY, OPTIONS, IS_EXEC, SQL_INSERTDEF) VALUES ('CBR_MENU_GRP', 'List', 'select g.id, g.name from cbr_menu_grp g order  by g.name', NULL, NULL, 'delete from cbr_menu_grp where id = :id', 'select g.id, g.name from cbr_menu_grp g where g.id = :id', 1, NULL, NULL, 0, NULL);
INSERT INTO BFW_ENT_VIEWS (ENTITYNAME, VIEWNAME, SQL_SELECT, SQL_INSERT, SQL_UPDATE, SQL_DELETE, SQL_REFRESH, READONLY, PKEY, OPTIONS, IS_EXEC, SQL_INSERTDEF) VALUES ('CBR_MENU_GRP', 'New', 'select id, name from cbr_menu_grp where id is null', 'insert into cbr_menu_grp(id, name) values(:id, :name)', NULL, NULL, NULL, 0, NULL, NULL, 0, 'select gen_id(cbr_gen, 1) id from rdb$database');
INSERT INTO BFW_ENT_VIEWS (ENTITYNAME, VIEWNAME, SQL_SELECT, SQL_INSERT, SQL_UPDATE, SQL_DELETE, SQL_REFRESH, READONLY, PKEY, OPTIONS, IS_EXEC, SQL_INSERTDEF) VALUES ('CBR_MENU_GRP', 'Item', 'select id, name from cbr_menu_grp where id = :id', NULL, 'update cbr_menu_grp set name = :name where id = :id', NULL, NULL, 0, NULL, NULL, 0, NULL);
INSERT INTO BFW_ENT_VIEWS (ENTITYNAME, VIEWNAME, SQL_SELECT, SQL_INSERT, SQL_UPDATE, SQL_DELETE, SQL_REFRESH, READONLY, PKEY, OPTIONS, IS_EXEC, SQL_INSERTDEF) VALUES ('CBR_MENU_GRP', 'Lookup', 'select id, name from cbr_menu_grp order by name', NULL, NULL, NULL, NULL, 1, NULL, NULL, 0, NULL);
INSERT INTO BFW_ENT_VIEWS (ENTITYNAME, VIEWNAME, SQL_SELECT, SQL_INSERT, SQL_UPDATE, SQL_DELETE, SQL_REFRESH, READONLY, PKEY, OPTIONS, IS_EXEC, SQL_INSERTDEF) VALUES ('CBR_TBL', 'List', 'select t.id, t.name, r.name room, 
(select e.name from inf_sp_enum_get(''cbr'', ''-'', t.state_id) e)  state
from  cbr_tbl t left join cbr_rooms r on (r.id = t.room_id)', NULL, NULL, 'delete from cbr_tbl where id = :id', 'select t.id, t.name, r.name room, 
(select e.name from inf_sp_enum_get(''cbr'', ''-'', t.state_id) e)  state
from  cbr_tbl t  left join cbr_rooms r on (r.id = t.room_id) where t.id = :id', 1, 'ID', NULL, 0, NULL);
INSERT INTO BFW_ENT_VIEWS (ENTITYNAME, VIEWNAME, SQL_SELECT, SQL_INSERT, SQL_UPDATE, SQL_DELETE, SQL_REFRESH, READONLY, PKEY, OPTIONS, IS_EXEC, SQL_INSERTDEF) VALUES ('CBR_TBL', 'New', 'select id, name, room_id from cbr_tbl where id is null', 'insert into cbr_tbl(id, name, room_id, state_id) values(:id, :name, :room_id, 1)', NULL, NULL, NULL, 0, NULL, NULL, 0, 'select gen_id(cbr_gen, 1) id from rdb$database');
INSERT INTO BFW_ENT_VIEWS (ENTITYNAME, VIEWNAME, SQL_SELECT, SQL_INSERT, SQL_UPDATE, SQL_DELETE, SQL_REFRESH, READONLY, PKEY, OPTIONS, IS_EXEC, SQL_INSERTDEF) VALUES ('CBR_ROOM', 'Lookup', 'select id, name from cbr_rooms order by name', NULL, NULL, NULL, NULL, 1, NULL, NULL, 0, NULL);
INSERT INTO BFW_ENT_VIEWS (ENTITYNAME, VIEWNAME, SQL_SELECT, SQL_INSERT, SQL_UPDATE, SQL_DELETE, SQL_REFRESH, READONLY, PKEY, OPTIONS, IS_EXEC, SQL_INSERTDEF) VALUES ('CBR_ROOM', 'List', 'select id, name from cbr_rooms', NULL, NULL, 'delete from cbr_rooms where id = :id', 'select id, name from cbr_rooms where id = :id', 1, 'ID', NULL, 0, NULL);
INSERT INTO BFW_ENT_VIEWS (ENTITYNAME, VIEWNAME, SQL_SELECT, SQL_INSERT, SQL_UPDATE, SQL_DELETE, SQL_REFRESH, READONLY, PKEY, OPTIONS, IS_EXEC, SQL_INSERTDEF) VALUES ('CBR_ROOM', 'New', 'select id, name from cbr_rooms where id is null', 'insert into cbr_rooms(id, name) values(:id, :name)', NULL, NULL, NULL, 0, NULL, NULL, 0, 'select gen_id(cbr_gen, 1) id from rdb$database');
INSERT INTO BFW_ENT_VIEWS (ENTITYNAME, VIEWNAME, SQL_SELECT, SQL_INSERT, SQL_UPDATE, SQL_DELETE, SQL_REFRESH, READONLY, PKEY, OPTIONS, IS_EXEC, SQL_INSERTDEF) VALUES ('CBR_TBL', 'Item', 'select id, name, room_id, state_id from cbr_tbl where id = :id', NULL, 'update cbr_tbl set name = :name, room_id = :room_id, state_id = :state_id where id = :id', NULL, NULL, 0, NULL, NULL, 0, NULL);
INSERT INTO BFW_ENT_VIEWS (ENTITYNAME, VIEWNAME, SQL_SELECT, SQL_INSERT, SQL_UPDATE, SQL_DELETE, SQL_REFRESH, READONLY, PKEY, OPTIONS, IS_EXEC, SQL_INSERTDEF) VALUES ('CBR_TBL', 'States', 'select * from inf_sp_enum_lookup(''CBR'', ''-'', 1)', NULL, NULL, NULL, NULL, 1, NULL, NULL, 0, NULL);
INSERT INTO BFW_ENT_VIEWS (ENTITYNAME, VIEWNAME, SQL_SELECT, SQL_INSERT, SQL_UPDATE, SQL_DELETE, SQL_REFRESH, READONLY, PKEY, OPTIONS, IS_EXEC, SQL_INSERTDEF) VALUES ('CBR_ROOM', 'Item', 'select id, name from cbr_rooms where id = :id', NULL, 'update cbr_rooms set name = :name where id = :id', NULL, NULL, 0, NULL, NULL, 0, NULL);
INSERT INTO BFW_ENT_VIEWS (ENTITYNAME, VIEWNAME, SQL_SELECT, SQL_INSERT, SQL_UPDATE, SQL_DELETE, SQL_REFRESH, READONLY, PKEY, OPTIONS, IS_EXEC, SQL_INSERTDEF) VALUES ('CBR_PRICE_TYP', 'Lookup', 'select id, name from cbr_price_typ order by name', NULL, NULL, NULL, NULL, 1, NULL, NULL, 0, NULL);
INSERT INTO BFW_ENT_VIEWS (ENTITYNAME, VIEWNAME, SQL_SELECT, SQL_INSERT, SQL_UPDATE, SQL_DELETE, SQL_REFRESH, READONLY, PKEY, OPTIONS, IS_EXEC, SQL_INSERTDEF) VALUES ('CBR_PRICE', 'Selector', 'select * from cbr_ev_price_list_sel(:dat, :typ_id)', NULL, NULL, NULL, NULL, 0, NULL, NULL, 0, NULL);
INSERT INTO BFW_ENT_VIEWS (ENTITYNAME, VIEWNAME, SQL_SELECT, SQL_INSERT, SQL_UPDATE, SQL_DELETE, SQL_REFRESH, READONLY, PKEY, OPTIONS, IS_EXEC, SQL_INSERTDEF) VALUES ('CBR_WD_VIEW', 'Tables', 'select t.id, r.name room, t.name 
from cbr_tbl t left join cbr_rooms r on (r.id = t.room_id) 
where (t.room_id = :room_id) or (:room_id = -1)
order by r.name, t.name', NULL, NULL, NULL, NULL, 1, NULL, NULL, 0, NULL);
INSERT INTO BFW_ENT_VIEWS (ENTITYNAME, VIEWNAME, SQL_SELECT, SQL_INSERT, SQL_UPDATE, SQL_DELETE, SQL_REFRESH, READONLY, PKEY, OPTIONS, IS_EXEC, SQL_INSERTDEF) VALUES ('CBR_PRICE', 'SelectorInfo', 'select * from cbr_ev_price_list_sel(:dat, :typ_id)', NULL, NULL, NULL, NULL, 1, NULL, NULL, 0, NULL);
INSERT INTO BFW_ENT_VIEWS (ENTITYNAME, VIEWNAME, SQL_SELECT, SQL_INSERT, SQL_UPDATE, SQL_DELETE, SQL_REFRESH, READONLY, PKEY, OPTIONS, IS_EXEC, SQL_INSERTDEF) VALUES ('CBR_ORD_DESK', 'Menu', 'select id, name, grp_id from cbr_menu m where grp_id = :grp_id', NULL, NULL, NULL, NULL, 1, NULL, NULL, 0, NULL);
INSERT INTO BFW_ENT_VIEWS (ENTITYNAME, VIEWNAME, SQL_SELECT, SQL_INSERT, SQL_UPDATE, SQL_DELETE, SQL_REFRESH, READONLY, PKEY, OPTIONS, IS_EXEC, SQL_INSERTDEF) VALUES ('CBR_ORD', 'Journal', 'select *from cbr_ev_ord_jrn(null, :state_id, :date1, :date2)', NULL, NULL, 'execute procedure cbr_ev_ord_del(:id)', 'select *from cbr_ev_ord_jrn(:id, :state_id, :dend, :dbeg)', 1, NULL, NULL, 0, NULL);
INSERT INTO BFW_ENT_VIEWS (ENTITYNAME, VIEWNAME, SQL_SELECT, SQL_INSERT, SQL_UPDATE, SQL_DELETE, SQL_REFRESH, READONLY, PKEY, OPTIONS, IS_EXEC, SQL_INSERTDEF) VALUES ('CBR_ORD_DESK', 'Header', 'select h.id, t.name tbl, r.name room,  h.idat, 
          h.state_id,
          (select e.name from inf_sp_enum_get(''cbr_ord'', ''state_id'', h.state_id) e)  state,
         sum(i.qty * i.price) summ
from cbr_ord h
     left join cbr_tbl t on (h.tbl_id = t.id) 
     left join cbr_rooms r on (r.id = t.room_id)
     left join cbr_ordi i on (i.hid = h.id)
where h.id = :id
group by h.id, t.name, r.name, h.idat, h.state_id', NULL, NULL, NULL, NULL, 1, NULL, NULL, 0, NULL);
INSERT INTO BFW_ENT_VIEWS (ENTITYNAME, VIEWNAME, SQL_SELECT, SQL_INSERT, SQL_UPDATE, SQL_DELETE, SQL_REFRESH, READONLY, PKEY, OPTIONS, IS_EXEC, SQL_INSERTDEF) VALUES ('CBR_WD_VIEW', 'TableInfo', 'select t.id, r.name room, t.name from cbr_tbl t left join cbr_rooms r on (r.id = t.room_id)  where t.id = :tbl_id', NULL, NULL, NULL, NULL, 1, NULL, NULL, 0, NULL);
INSERT INTO BFW_ENT_VIEWS (ENTITYNAME, VIEWNAME, SQL_SELECT, SQL_INSERT, SQL_UPDATE, SQL_DELETE, SQL_REFRESH, READONLY, PKEY, OPTIONS, IS_EXEC, SQL_INSERTDEF) VALUES ('CBR_WD_VIEW', 'Orders', 'select h.id, 
         (select e.name from inf_sp_enum_get(''cbr_ord'', ''state_id'', h.state_id) e)  state,
        h.last_act_time, 
        sum(i.qty * i.price) summ
from cbr_ord h    
     left join cbr_ordi i on (i.hid = h.id)
where h.tbl_id = :tbl_id and h.state_id < 3
group by   h.last_act_time, h.state_id,  h.id', NULL, NULL, NULL, NULL, 1, NULL, NULL, 0, NULL);
INSERT INTO BFW_ENT_VIEWS (ENTITYNAME, VIEWNAME, SQL_SELECT, SQL_INSERT, SQL_UPDATE, SQL_DELETE, SQL_REFRESH, READONLY, PKEY, OPTIONS, IS_EXEC, SQL_INSERTDEF) VALUES ('CBR_ORD', 'States', 'select * from inf_sp_states_list(''CBR_ORD'')', NULL, NULL, NULL, NULL, 1, NULL, NULL, 0, NULL);
INSERT INTO BFW_ENT_VIEWS (ENTITYNAME, VIEWNAME, SQL_SELECT, SQL_INSERT, SQL_UPDATE, SQL_DELETE, SQL_REFRESH, READONLY, PKEY, OPTIONS, IS_EXEC, SQL_INSERTDEF) VALUES ('UTL_JRN', 'Selector', 'select * from utl_ev_jrn_selector(:date1, :date2)', NULL, NULL, NULL, NULL, 0, NULL, NULL, 0, NULL);
INSERT INTO BFW_ENT_VIEWS (ENTITYNAME, VIEWNAME, SQL_SELECT, SQL_INSERT, SQL_UPDATE, SQL_DELETE, SQL_REFRESH, READONLY, PKEY, OPTIONS, IS_EXEC, SQL_INSERTDEF) VALUES ('UTL_JRN', 'SelectorInfo', 'select * from utl_ev_jrn_selectorinfo(:use_drange, :date1, :date2)', NULL, NULL, NULL, NULL, 1, NULL, NULL, 0, NULL);
INSERT INTO BFW_ENT_VIEWS (ENTITYNAME, VIEWNAME, SQL_SELECT, SQL_INSERT, SQL_UPDATE, SQL_DELETE, SQL_REFRESH, READONLY, PKEY, OPTIONS, IS_EXEC, SQL_INSERTDEF) VALUES ('CBR_ORD_DESK', 'MenuGrp', 'select id, name from cbr_menu_grp order by name', NULL, NULL, NULL, NULL, 1, NULL, NULL, 0, NULL);
INSERT INTO BFW_ENT_VIEWS (ENTITYNAME, VIEWNAME, SQL_SELECT, SQL_INSERT, SQL_UPDATE, SQL_DELETE, SQL_REFRESH, READONLY, PKEY, OPTIONS, IS_EXEC, SQL_INSERTDEF) VALUES ('CBR_ORD_DESK', 'CreateHeader', 'select * from cbr_ev_ord_desk_ord_create(:tbl_id)', NULL, NULL, NULL, NULL, 1, NULL, NULL, 0, NULL);
INSERT INTO BFW_ENT_VIEWS (ENTITYNAME, VIEWNAME, SQL_SELECT, SQL_INSERT, SQL_UPDATE, SQL_DELETE, SQL_REFRESH, READONLY, PKEY, OPTIONS, IS_EXEC, SQL_INSERTDEF) VALUES ('UTL_JRN', 'States', 'select * from utl_ev_jrn_states(:tablename)', NULL, NULL, NULL, NULL, 1, NULL, NULL, 0, NULL);
INSERT INTO BFW_ENT_VIEWS (ENTITYNAME, VIEWNAME, SQL_SELECT, SQL_INSERT, SQL_UPDATE, SQL_DELETE, SQL_REFRESH, READONLY, PKEY, OPTIONS, IS_EXEC, SQL_INSERTDEF) VALUES ('CBR_ORD', 'Head', 'select h.id, h.dat, r.name room, t.name tbl
from cbr_ord h
left join cbr_tbl t on (h.tbl_id = t.id)
left join cbr_rooms r on (r.id = t.room_id)
where h.id = :id', NULL, NULL, NULL, NULL, 0, NULL, NULL, 0, NULL);
INSERT INTO BFW_ENT_VIEWS (ENTITYNAME, VIEWNAME, SQL_SELECT, SQL_INSERT, SQL_UPDATE, SQL_DELETE, SQL_REFRESH, READONLY, PKEY, OPTIONS, IS_EXEC, SQL_INSERTDEF) VALUES ('CBR_ORD_DESK', 'Items', 'select * from cbr_ev_ord_desk_ordi(:hid, :menu_id)', 'insert into cbr_ordi(id, hid, menu_id, qty, price) values(:id, :hid, :menu_id, :qty, :price)', 'update cbr_ordi set qty = :qty where id = :id', 'delete from cbr_ordi where id = :id', NULL, 0, NULL, NULL, 0, 'select * from cbr_ev_ord_desk_ordi_i(:hid, :menu_id)');
INSERT INTO BFW_ENT_VIEWS (ENTITYNAME, VIEWNAME, SQL_SELECT, SQL_INSERT, SQL_UPDATE, SQL_DELETE, SQL_REFRESH, READONLY, PKEY, OPTIONS, IS_EXEC, SQL_INSERTDEF) VALUES ('CBR_ORD_DESK', 'KOrd', 'select * from cbr_ev_kord_create(:ord_id)', NULL, NULL, NULL, NULL, 1, NULL, NULL, 0, NULL);
INSERT INTO BFW_ENT_VIEWS (ENTITYNAME, VIEWNAME, SQL_SELECT, SQL_INSERT, SQL_UPDATE, SQL_DELETE, SQL_REFRESH, READONLY, PKEY, OPTIONS, IS_EXEC, SQL_INSERTDEF) VALUES ('CBR_KORD', 'Create', 'select * from cbr_ev_kord_create(:ord_id)', NULL, NULL, NULL, NULL, 1, NULL, NULL, 0, NULL);
INSERT INTO BFW_ENT_VIEWS (ENTITYNAME, VIEWNAME, SQL_SELECT, SQL_INSERT, SQL_UPDATE, SQL_DELETE, SQL_REFRESH, READONLY, PKEY, OPTIONS, IS_EXEC, SQL_INSERTDEF) VALUES ('CBR_ORD', 'PreCheck', 'execute procedure cbr_ev_ord_precheck(:id)', NULL, NULL, NULL, NULL, 1, NULL, NULL, 1, NULL);
INSERT INTO BFW_ENT_VIEWS (ENTITYNAME, VIEWNAME, SQL_SELECT, SQL_INSERT, SQL_UPDATE, SQL_DELETE, SQL_REFRESH, READONLY, PKEY, OPTIONS, IS_EXEC, SQL_INSERTDEF) VALUES ('CBR_ORD', 'Details', 'select i.id from cbr_ordi i where hid = :hid', NULL, NULL, NULL, NULL, 1, NULL, NULL, 0, NULL);
INSERT INTO BFW_ENT_VIEWS (ENTITYNAME, VIEWNAME, SQL_SELECT, SQL_INSERT, SQL_UPDATE, SQL_DELETE, SQL_REFRESH, READONLY, PKEY, OPTIONS, IS_EXEC, SQL_INSERTDEF) VALUES ('CBR_ORD', 'Payt', 'update cbr_ord set state_id = 3 where id = :id', NULL, NULL, NULL, NULL, 1, NULL, NULL, 1, NULL);
INSERT INTO BFW_ENT_VIEWS (ENTITYNAME, VIEWNAME, SQL_SELECT, SQL_INSERT, SQL_UPDATE, SQL_DELETE, SQL_REFRESH, READONLY, PKEY, OPTIONS, IS_EXEC, SQL_INSERTDEF) VALUES ('CBR_WD_VIEW', 'Rooms', 'select id, name from cbr_rooms union select cast(-1 as integer) id, cast('' Все залы'' as varchar(50)) name from rdb$database order by 2 ', NULL, NULL, NULL, NULL, 1, NULL, NULL, 0, NULL);

COMMIT WORK;

INSERT INTO BFW_SEC_POLICIES (POLID, NAME, PARENTID, STATE, USE_RES, RES_PROVID, RES_PARENT_SQL) VALUES ('BUILT-IN', 'Administrators', NULL, 1, 0, NULL, NULL);
INSERT INTO BFW_SEC_POLICIES (POLID, NAME, PARENTID, STATE, USE_RES, RES_PROVID, RES_PARENT_SQL) VALUES ('BUILT-IN.Activities', 'Доступ к функциям программы', NULL, 1, 1, 'security.resprovider.app.activities', NULL);

COMMIT WORK;

INSERT INTO BFW_SEC_PERMISSIONS (PERMID, NAME, POLID, INHERITBY, DESCRIPTION) VALUES ('app.activity.execute', 'Выполнить', 'BUILT-IN.Activities', NULL, NULL);
INSERT INTO BFW_SEC_PERMISSIONS (PERMID, NAME, POLID, INHERITBY, DESCRIPTION) VALUES ('builtin.unrestricted', 'Неограниченный доступ', 'BUILT-IN', NULL, NULL);

COMMIT WORK;

INSERT INTO BFW_SEC_USERS (USERID, NAME, ISROLE) VALUES ('SYSDBA', 'SYSDBA', 0);

COMMIT WORK;

INSERT INTO BFW_SEC_ACL (PERMID, USERID, RESID, STATE) VALUES ('builtin.unrestricted', 'SYSDBA', '', 1);

COMMIT WORK;

INSERT INTO BFW_UI (URI, CLS, ENTITYNAME, VIEWNAME, TITLE, GRP, MENUIDX, OPTIONS, PARAMS, OUTS, USEPERM, PKG) VALUES ('views.BFW_IDE.Packages', 'IEntityListView', 'BFW_IDE', 'Packages', 'Packages', NULL, 0, NULL, NULL, NULL, 1, NULL);
INSERT INTO BFW_UI (URI, CLS, ENTITYNAME, VIEWNAME, TITLE, GRP, MENUIDX, OPTIONS, PARAMS, OUTS, USEPERM, PKG) VALUES ('views.BFW_IDE_ENT.List', 'IEntityListView', 'BFW_IDE_ENT', 'List', 'Entities', NULL, 0, 'CanEdit', NULL, NULL, 1, NULL);
INSERT INTO BFW_UI (URI, CLS, ENTITYNAME, VIEWNAME, TITLE, GRP, MENUIDX, OPTIONS, PARAMS, OUTS, USEPERM, PKG) VALUES ('views.BFW_IDE_ENT.Item', 'IEntityItemView', 'BFW_IDE_ENT', 'Item', 'Entity', NULL, 0, NULL, 'ID', NULL, 1, NULL);
INSERT INTO BFW_UI (URI, CLS, ENTITYNAME, VIEWNAME, TITLE, GRP, MENUIDX, OPTIONS, PARAMS, OUTS, USEPERM, PKG) VALUES ('views.BFW_IDE_EVIEW.List', 'IEntityListView', 'BFW_IDE_EVIEW', 'List', 'EViews', NULL, 0, 'CanEdit', 'ENTITYNAME', NULL, 1, NULL);
INSERT INTO BFW_UI (URI, CLS, ENTITYNAME, VIEWNAME, TITLE, GRP, MENUIDX, OPTIONS, PARAMS, OUTS, USEPERM, PKG) VALUES ('views.BFW_IDE_EVIEW.Item', 'IEntityItemView', 'BFW_IDE_EVIEW', 'Item', 'EView', NULL, 0, NULL, 'ENTITYNAME;VIEWNAME', NULL, 1, NULL);
INSERT INTO BFW_UI (URI, CLS, ENTITYNAME, VIEWNAME, TITLE, GRP, MENUIDX, OPTIONS, PARAMS, OUTS, USEPERM, PKG) VALUES ('views.BFW_IDE_UI_CLS.Item', 'IEntityItemView', 'BFW_IDE_UI_CLS', 'Item', 'UI Class Item', NULL, 0, NULL, 'ID', NULL, 0, NULL);
INSERT INTO BFW_UI (URI, CLS, ENTITYNAME, VIEWNAME, TITLE, GRP, MENUIDX, OPTIONS, PARAMS, OUTS, USEPERM, PKG) VALUES ('views.BFW_IDE_UI.ListTop', 'IEntityListView', 'BFW_IDE_UI', 'List', 'Конфигуратор', 'Сервис', 0, 'CanEdit', NULL, NULL, 1, NULL);
INSERT INTO BFW_UI (URI, CLS, ENTITYNAME, VIEWNAME, TITLE, GRP, MENUIDX, OPTIONS, PARAMS, OUTS, USEPERM, PKG) VALUES ('views.BFW_IDE_UI.List', 'IEntityListView', 'BFW_IDE_UI', 'List', 'UI List', NULL, 0, 'CanEdit;Title=ListTitle', 'PKG', NULL, 1, NULL);
INSERT INTO BFW_UI (URI, CLS, ENTITYNAME, VIEWNAME, TITLE, GRP, MENUIDX, OPTIONS, PARAMS, OUTS, USEPERM, PKG) VALUES ('views.BFW_IDE_UI.New', 'IEntityNewView', 'BFW_IDE_UI', 'New', 'UI Item (New)', NULL, 0, 'Next', NULL, NULL, 0, NULL);
INSERT INTO BFW_UI (URI, CLS, ENTITYNAME, VIEWNAME, TITLE, GRP, MENUIDX, OPTIONS, PARAMS, OUTS, USEPERM, PKG) VALUES ('views.BFW_IDE_UI.Item', 'IEntityItemView', 'BFW_IDE_UI', 'Item', 'UI Item', NULL, 0, NULL, 'URI', NULL, 0, NULL);
INSERT INTO BFW_UI (URI, CLS, ENTITYNAME, VIEWNAME, TITLE, GRP, MENUIDX, OPTIONS, PARAMS, OUTS, USEPERM, PKG) VALUES ('views.BFW_IDE_UI_FIELDS.List', 'IEntityListView', 'BFW_IDE_UI_FIELDS', 'List', 'Fields for UI', NULL, 0, 'CanEdit', 'ENTITYNAME;VIEWNAME', NULL, 0, NULL);
INSERT INTO BFW_UI (URI, CLS, ENTITYNAME, VIEWNAME, TITLE, GRP, MENUIDX, OPTIONS, PARAMS, OUTS, USEPERM, PKG) VALUES ('views.BFW_IDE_UI.TreeList', 'IEntityTreeListView', 'BFW_IDE_UI', 'TreeList', 'UI', NULL, 0, 'CanOpen', NULL, NULL, 0, NULL);
INSERT INTO BFW_UI (URI, CLS, ENTITYNAME, VIEWNAME, TITLE, GRP, MENUIDX, OPTIONS, PARAMS, OUTS, USEPERM, PKG) VALUES ('views.BFW_IDE.MainMenu', 'IEntityDeskMenuView', 'BFW_IDE', 'MainMenu', 'Конфигуратор2', 'Сервис', 0, NULL, NULL, NULL, 1, NULL);
INSERT INTO BFW_UI (URI, CLS, ENTITYNAME, VIEWNAME, TITLE, GRP, MENUIDX, OPTIONS, PARAMS, OUTS, USEPERM, PKG) VALUES ('views.BFW_IDE_UI.ItemQ', 'IEntityItemDef', 'BFW_IDE_UI', 'ItemURI', '-', NULL, 0, 'DefaultURI=views.%s.Item;EViewURI=ItemURI;EViewURIField=ViewURI', 'URI', NULL, 0, NULL);
INSERT INTO BFW_UI (URI, CLS, ENTITYNAME, VIEWNAME, TITLE, GRP, MENUIDX, OPTIONS, PARAMS, OUTS, USEPERM, PKG) VALUES ('views.BFW_IDE_EVIEW.New', 'IEntityNewView', 'BFW_IDE_EVIEW', 'New', 'New EView', NULL, 0, NULL, 'ENTITYNAME', NULL, 0, NULL);
INSERT INTO BFW_UI (URI, CLS, ENTITYNAME, VIEWNAME, TITLE, GRP, MENUIDX, OPTIONS, PARAMS, OUTS, USEPERM, PKG) VALUES ('views.BFW_IDE_UI_FIELDS.Item', 'IEntityItemView', 'BFW_IDE_UI_FIELDS', 'Item', 'Entity view field', NULL, 0, NULL, 'ENTITYNAME,VIEWNAME,FIELDNAME', NULL, 0, NULL);
INSERT INTO BFW_UI (URI, CLS, ENTITYNAME, VIEWNAME, TITLE, GRP, MENUIDX, OPTIONS, PARAMS, OUTS, USEPERM, PKG) VALUES ('views.BFW_IDE_UI_FIELDS.New', 'IEntityNewView', 'BFW_IDE_UI_FIELDS', 'New', 'New field for UI', '', 0, 'Next', 'ENTITYNAME,VIEWNAME', NULL, 0, NULL);
INSERT INTO BFW_UI (URI, CLS, ENTITYNAME, VIEWNAME, TITLE, GRP, MENUIDX, OPTIONS, PARAMS, OUTS, USEPERM, PKG) VALUES ('views.BFW_IDE_ENT.New', 'IEntityNewView', 'BFW_IDE_ENT', 'New', 'New Entity', NULL, 0, NULL, NULL, NULL, 0, NULL);
INSERT INTO BFW_UI (URI, CLS, ENTITYNAME, VIEWNAME, TITLE, GRP, MENUIDX, OPTIONS, PARAMS, OUTS, USEPERM, PKG) VALUES ('views.BFW_IDE_UI_CMD.List', 'IEntityListView', 'BFW_IDE_UI_CMD', 'List', 'UI Commands', NULL, 0, 'CanEdit', 'URI', NULL, 0, NULL);
INSERT INTO BFW_UI (URI, CLS, ENTITYNAME, VIEWNAME, TITLE, GRP, MENUIDX, OPTIONS, PARAMS, OUTS, USEPERM, PKG) VALUES ('views.BFW_IDE_UI_CMD.Item', 'IEntityItemView', 'BFW_IDE_UI_CMD', 'Item', 'Command', NULL, 0, NULL, 'URI;CMD', NULL, 0, NULL);
INSERT INTO BFW_UI (URI, CLS, ENTITYNAME, VIEWNAME, TITLE, GRP, MENUIDX, OPTIONS, PARAMS, OUTS, USEPERM, PKG) VALUES ('views.BFW_IDE_UI_CMD.New', 'IEntityNewView', 'BFW_IDE_UI_CMD', 'New', 'UI Command (New)', NULL, 0, NULL, 'URI', NULL, 0, NULL);
INSERT INTO BFW_UI (URI, CLS, ENTITYNAME, VIEWNAME, TITLE, GRP, MENUIDX, OPTIONS, PARAMS, OUTS, USEPERM, PKG) VALUES ('views.CBR_MENU.List', 'IEntityListView', 'CBR_MENU', 'List', 'Меню', 'Система', 1, 'CanEdit', NULL, NULL, 0, 'CBR');
INSERT INTO BFW_UI (URI, CLS, ENTITYNAME, VIEWNAME, TITLE, GRP, MENUIDX, OPTIONS, PARAMS, OUTS, USEPERM, PKG) VALUES ('views.CBR_PRICE_TYP.List', 'IEntityListView', 'CBR_PRICE_TYP', 'List', 'Типы цен', NULL, 0, 'CanEdit', NULL, NULL, 0, 'CBR');
INSERT INTO BFW_UI (URI, CLS, ENTITYNAME, VIEWNAME, TITLE, GRP, MENUIDX, OPTIONS, PARAMS, OUTS, USEPERM, PKG) VALUES ('views.CBR_WAITER_DESK.view', 'views.CBR_WAITER_DESK.view', '-', NULL, 'Заказы', 'Система', 5, NULL, NULL, NULL, 0, 'CBR');
INSERT INTO BFW_UI (URI, CLS, ENTITYNAME, VIEWNAME, TITLE, GRP, MENUIDX, OPTIONS, PARAMS, OUTS, USEPERM, PKG) VALUES ('views.CBR_PRICE_TYP.New', 'IEntityNewView', 'CBR_PRICE_TYP', 'New', 'Новый тип цены', NULL, 0, NULL, NULL, NULL, 0, 'CBR');
INSERT INTO BFW_UI (URI, CLS, ENTITYNAME, VIEWNAME, TITLE, GRP, MENUIDX, OPTIONS, PARAMS, OUTS, USEPERM, PKG) VALUES ('views.CBR_PRICE_TYP.Item', 'IEntityItemView', 'CBR_PRICE_TYP', 'Item', 'Тип цены', NULL, 0, NULL, 'ID', NULL, 0, 'CBR');
INSERT INTO BFW_UI (URI, CLS, ENTITYNAME, VIEWNAME, TITLE, GRP, MENUIDX, OPTIONS, PARAMS, OUTS, USEPERM, PKG) VALUES ('views.CBR_MENU.New', 'IEntityNewView', 'CBR_MENU', 'New', 'Новое блюдо', NULL, 0, NULL, NULL, NULL, 0, 'CBR');
INSERT INTO BFW_UI (URI, CLS, ENTITYNAME, VIEWNAME, TITLE, GRP, MENUIDX, OPTIONS, PARAMS, OUTS, USEPERM, PKG) VALUES ('views.CBR_ORDER_DESK.Item', 'views.CBR_ORDER_DESK.Item', '-', NULL, 'Заказ', NULL, 0, NULL, 'ID', NULL, 0, NULL);
INSERT INTO BFW_UI (URI, CLS, ENTITYNAME, VIEWNAME, TITLE, GRP, MENUIDX, OPTIONS, PARAMS, OUTS, USEPERM, PKG) VALUES ('views.ENTITY.NewDef', 'IEntityNewDef', '-', '-', '-', NULL, 0, 'DefaultURI=views.%s.New', NULL, NULL, 0, NULL);
INSERT INTO BFW_UI (URI, CLS, ENTITYNAME, VIEWNAME, TITLE, GRP, MENUIDX, OPTIONS, PARAMS, OUTS, USEPERM, PKG) VALUES ('views.ENTITY.ItemDef', 'IEntityItemDef', '-', '-', '-', NULL, 0, 'DefaultURI=views.%s.Item;EViewURI=ItemURI;EViewURIField=URI', NULL, NULL, 0, NULL);
INSERT INTO BFW_UI (URI, CLS, ENTITYNAME, VIEWNAME, TITLE, GRP, MENUIDX, OPTIONS, PARAMS, OUTS, USEPERM, PKG) VALUES ('views.CBR_ORDER_DESK.New', 'views.CBR_ORDER_DESK.New', '-', NULL, 'Новый заказ', NULL, 0, NULL, 'TBL_ID', NULL, 0, NULL);
INSERT INTO BFW_UI (URI, CLS, ENTITYNAME, VIEWNAME, TITLE, GRP, MENUIDX, OPTIONS, PARAMS, OUTS, USEPERM, PKG) VALUES ('views.CBR_PRICE.List', 'IEntityListView', 'CBR_PRICE', 'List', 'Цены', 'Система', 2, 'UseSelector', NULL, NULL, 0, 'CBR');
INSERT INTO BFW_UI (URI, CLS, ENTITYNAME, VIEWNAME, TITLE, GRP, MENUIDX, OPTIONS, PARAMS, OUTS, USEPERM, PKG) VALUES ('views.CBR_PRICE.Selector', 'IEntitySelectorView', 'CBR_PRICE', 'Selector', 'Параметры', NULL, 0, NULL, 'DAT;TYP_ID', 'DAT;TYP_ID', 0, 'CBR');
INSERT INTO BFW_UI (URI, CLS, ENTITYNAME, VIEWNAME, TITLE, GRP, MENUIDX, OPTIONS, PARAMS, OUTS, USEPERM, PKG) VALUES ('views.CBR_MENU.Item', 'IEntityItemView', 'CBR_MENU', 'Item', 'Блюдо', NULL, 0, NULL, 'id', NULL, 0, 'CBR');
INSERT INTO BFW_UI (URI, CLS, ENTITYNAME, VIEWNAME, TITLE, GRP, MENUIDX, OPTIONS, PARAMS, OUTS, USEPERM, PKG) VALUES ('views.CBR_UI.MainMenu', 'IEntityDeskMenuView', 'CBR_UI', 'MainMenu', 'CaBaRe System', NULL, 0, NULL, NULL, NULL, 0, 'CBR');
INSERT INTO BFW_UI (URI, CLS, ENTITYNAME, VIEWNAME, TITLE, GRP, MENUIDX, OPTIONS, PARAMS, OUTS, USEPERM, PKG) VALUES ('views.CBR_MENU_GRP.List', 'IEntityListView', 'CBR_MENU_GRP', 'List', 'Группы меню', NULL, 0, 'CanEdit', NULL, NULL, 0, 'CBR');
INSERT INTO BFW_UI (URI, CLS, ENTITYNAME, VIEWNAME, TITLE, GRP, MENUIDX, OPTIONS, PARAMS, OUTS, USEPERM, PKG) VALUES ('views.CBR_MENU_GRP.New', 'IEntityNewView', 'CBR_MENU_GRP', 'New', 'Новая группа меню', NULL, 0, NULL, NULL, NULL, 0, 'CBR');
INSERT INTO BFW_UI (URI, CLS, ENTITYNAME, VIEWNAME, TITLE, GRP, MENUIDX, OPTIONS, PARAMS, OUTS, USEPERM, PKG) VALUES ('views.CBR_MENU_GRP.Item', 'IEntityItemView', 'CBR_MENU_GRP', 'Item', 'Группа меню', NULL, 0, NULL, 'ID', NULL, 0, 'CBR');
INSERT INTO BFW_UI (URI, CLS, ENTITYNAME, VIEWNAME, TITLE, GRP, MENUIDX, OPTIONS, PARAMS, OUTS, USEPERM, PKG) VALUES ('views.CBR_TBL.List', 'IEntityListView', 'CBR_TBL', 'List', 'Столы', 'Система', 3, 'CanEdit', NULL, NULL, 0, 'CBR');
INSERT INTO BFW_UI (URI, CLS, ENTITYNAME, VIEWNAME, TITLE, GRP, MENUIDX, OPTIONS, PARAMS, OUTS, USEPERM, PKG) VALUES ('views.CBR_TBL.New', 'IEntityNewView', 'CBR_TBL', 'New', 'Новый стол', NULL, 0, NULL, NULL, NULL, 0, 'CBR');
INSERT INTO BFW_UI (URI, CLS, ENTITYNAME, VIEWNAME, TITLE, GRP, MENUIDX, OPTIONS, PARAMS, OUTS, USEPERM, PKG) VALUES ('views.CBR_ROOM.List', 'IEntityListView', 'CBR_ROOM', 'List', 'Список залов', NULL, 0, 'CanEdit', NULL, NULL, 0, 'CBR');
INSERT INTO BFW_UI (URI, CLS, ENTITYNAME, VIEWNAME, TITLE, GRP, MENUIDX, OPTIONS, PARAMS, OUTS, USEPERM, PKG) VALUES ('views.CBR_ROOM.New', 'IEntityNewView', 'CBR_ROOM', 'New', 'Новый зал', NULL, 0, NULL, NULL, NULL, 0, 'CBR');
INSERT INTO BFW_UI (URI, CLS, ENTITYNAME, VIEWNAME, TITLE, GRP, MENUIDX, OPTIONS, PARAMS, OUTS, USEPERM, PKG) VALUES ('views.CBR_TBL.Item', 'IEntityItemView', 'CBR_TBL', 'Item', 'Стол', NULL, 0, NULL, 'ID', NULL, 0, 'CBR');
INSERT INTO BFW_UI (URI, CLS, ENTITYNAME, VIEWNAME, TITLE, GRP, MENUIDX, OPTIONS, PARAMS, OUTS, USEPERM, PKG) VALUES ('views.CBR_ROOM.Item', 'IEntityItemView', 'CBR_ROOM', 'Item', 'Зал', NULL, 0, NULL, 'id', NULL, 0, 'CBR');
INSERT INTO BFW_UI (URI, CLS, ENTITYNAME, VIEWNAME, TITLE, GRP, MENUIDX, OPTIONS, PARAMS, OUTS, USEPERM, PKG) VALUES ('activities.KORDER.Create', 'activities.KORDER.Create', '-', '-', '-', NULL, 0, NULL, 'ORD_ID', NULL, 0, '');
INSERT INTO BFW_UI (URI, CLS, ENTITYNAME, VIEWNAME, TITLE, GRP, MENUIDX, OPTIONS, PARAMS, OUTS, USEPERM, PKG) VALUES ('views.CBR_ORD.Journal', 'IEntityJournalView', 'CBR_ORD', 'Journal', 'Журанал заказов', 'Система', 4, 'CanOpen', NULL, NULL, 0, 'CBR');
INSERT INTO BFW_UI (URI, CLS, ENTITYNAME, VIEWNAME, TITLE, GRP, MENUIDX, OPTIONS, PARAMS, OUTS, USEPERM, PKG) VALUES ('views.UTL_JRN.Selector', 'IEntitySelectorView', 'UTL_JRN', 'Selector', 'Отбор', NULL, 0, '', 'DATE1;DATE2', 'DATE1;DATE2', 0, 'MISC');
INSERT INTO BFW_UI (URI, CLS, ENTITYNAME, VIEWNAME, TITLE, GRP, MENUIDX, OPTIONS, PARAMS, OUTS, USEPERM, PKG) VALUES ('views.CBR_ORD.Item', 'IEntityComplexView', 'CBR_ORD', 'Head', 'Заказ', NULL, 0, NULL, 'ID', NULL, 0, 'CBR');

COMMIT WORK;

INSERT INTO BFW_UI_CLS (CLS, VIEWNAME, DESCRIPTION, OPTIONS) VALUES ('IEntityListView', 'List', '{Selector;SelectorInfo,NewURI,ItemURI}', NULL);
INSERT INTO BFW_UI_CLS (CLS, VIEWNAME, DESCRIPTION, OPTIONS) VALUES ('IEntityJournalView', 'Journal', 'States{Selector;SelectorInfo,NewURI,ItemURI}', NULL);
INSERT INTO BFW_UI_CLS (CLS, VIEWNAME, DESCRIPTION, OPTIONS) VALUES ('IEntityItemView', 'Item', NULL, NULL);
INSERT INTO BFW_UI_CLS (CLS, VIEWNAME, DESCRIPTION, OPTIONS) VALUES ('IEntityNewView', 'New', NULL, NULL);
INSERT INTO BFW_UI_CLS (CLS, VIEWNAME, DESCRIPTION, OPTIONS) VALUES ('IEntityComplexView', 'Head', 'Details{DetailNewURI,DetailItemURI}', NULL);
INSERT INTO BFW_UI_CLS (CLS, VIEWNAME, DESCRIPTION, OPTIONS) VALUES ('IEntityPickListView', 'PickList', NULL, NULL);
INSERT INTO BFW_UI_CLS (CLS, VIEWNAME, DESCRIPTION, OPTIONS) VALUES ('IEntityOrgChartView', 'OrgChart', NULL, NULL);
INSERT INTO BFW_UI_CLS (CLS, VIEWNAME, DESCRIPTION, OPTIONS) VALUES ('IEntitySelectorView', 'Selector', NULL, NULL);
INSERT INTO BFW_UI_CLS (CLS, VIEWNAME, DESCRIPTION, OPTIONS) VALUES ('ISecurityResProvider', 'TopNodes', 'Node;ChildNodes;', NULL);
INSERT INTO BFW_UI_CLS (CLS, VIEWNAME, DESCRIPTION, OPTIONS) VALUES ('IEntityActivity', '-', NULL, NULL);
INSERT INTO BFW_UI_CLS (CLS, VIEWNAME, DESCRIPTION, OPTIONS) VALUES ('IEntityDeskView', 'Desk', NULL, NULL);
INSERT INTO BFW_UI_CLS (CLS, VIEWNAME, DESCRIPTION, OPTIONS) VALUES ('IEntityCollectView', '-', 'CollectInfo;CollectList;CollectItems', NULL);
INSERT INTO BFW_UI_CLS (CLS, VIEWNAME, DESCRIPTION, OPTIONS) VALUES ('IEntityDeskMenuView', 'Items', NULL, NULL);
INSERT INTO BFW_UI_CLS (CLS, VIEWNAME, DESCRIPTION, OPTIONS) VALUES ('IEntityTreeListView', 'List', NULL, NULL);

COMMIT WORK;

INSERT INTO BFW_UI_CMD (URI, CMD, CAPTION, IDX, GRP, DEF, HANDLER, PARAMS, OUTS, OPTIONS) VALUES ('views.BFW_IDE_ENT.List', 'cmd.EView', 'Views', 0, NULL, 0, 'views.BFW_IDE_EVIEW.List', 'ENTITYNAME=ITEM_ID', NULL, NULL);
INSERT INTO BFW_UI_CMD (URI, CMD, CAPTION, IDX, GRP, DEF, HANDLER, PARAMS, OUTS, OPTIONS) VALUES ('views.BFW_IDE_UI_CMD.List', 'commands.view.open', 'Open', 0, NULL, 0, 'views.BFW_IDE_UI_CMD.Item', 'URI=URI;CMD=EV.CMD', NULL, NULL);
INSERT INTO BFW_UI_CMD (URI, CMD, CAPTION, IDX, GRP, DEF, HANDLER, PARAMS, OUTS, OPTIONS) VALUES ('views.BFW_IDE_UI.ListTop', 'cmd.ent.list', 'Entities', 0, NULL, 0, 'views.BFW_IDE_ENT.List', NULL, NULL, NULL);
INSERT INTO BFW_UI_CMD (URI, CMD, CAPTION, IDX, GRP, DEF, HANDLER, PARAMS, OUTS, OPTIONS) VALUES ('views.BFW_IDE_UI.ListTop', 'cmd.fields', 'Fields', 0, NULL, 0, 'views.BFW_IDE_UI_FIELDS.List', NULL, NULL, NULL);
INSERT INTO BFW_UI_CMD (URI, CMD, CAPTION, IDX, GRP, DEF, HANDLER, PARAMS, OUTS, OPTIONS) VALUES ('views.BFW_IDE_UI.ListTop', 'commands.view.open', 'Open1', 0, NULL, 0, 'views.BFW_IDE_UI.Item', 'URI=EV.URI', NULL, NULL);
INSERT INTO BFW_UI_CMD (URI, CMD, CAPTION, IDX, GRP, DEF, HANDLER, PARAMS, OUTS, OPTIONS) VALUES ('views.BFW_IDE_UI.Item', 'cmd.fields', 'Fields', 0, NULL, 0, 'views.BFW_IDE_UI_FIELDS.List', 'ENTITYNAME=ENT;VIEWNAME=ENT_VIEW', NULL, NULL);
INSERT INTO BFW_UI_CMD (URI, CMD, CAPTION, IDX, GRP, DEF, HANDLER, PARAMS, OUTS, OPTIONS) VALUES ('views.BFW_IDE_UI.Item', 'cmd.commands', 'Commands', 0, NULL, 0, 'views.BFW_IDE_UI_CMD.List', NULL, NULL, NULL);
INSERT INTO BFW_UI_CMD (URI, CMD, CAPTION, IDX, GRP, DEF, HANDLER, PARAMS, OUTS, OPTIONS) VALUES ('views.BFW_IDE_UI_CMD.List', 'commands.view.new', 'Add', 0, NULL, 0, 'views.BFW_IDE_UI_CMD.New', 'URI=URI', NULL, NULL);
INSERT INTO BFW_UI_CMD (URI, CMD, CAPTION, IDX, GRP, DEF, HANDLER, PARAMS, OUTS, OPTIONS) VALUES ('views.BFW_IDE_EVIEW.List', 'commands.view.open', 'Open', 0, NULL, 0, 'views.BFW_IDE_EVIEW.Item', NULL, NULL, NULL);
INSERT INTO BFW_UI_CMD (URI, CMD, CAPTION, IDX, GRP, DEF, HANDLER, PARAMS, OUTS, OPTIONS) VALUES ('views.BFW_IDE_UI_FIELDS.List', 'commands.view.open', 'Open', 0, NULL, 0, 'views.BFW_IDE_UI_FIELDS.Item', 'ENTITYNAME=EV.ENTITYNAME;VIEWNAME=EV.VIEWNAME;FIELDNAME=EV.FIELDNAME', NULL, NULL);
INSERT INTO BFW_UI_CMD (URI, CMD, CAPTION, IDX, GRP, DEF, HANDLER, PARAMS, OUTS, OPTIONS) VALUES ('views.BFW_IDE_UI.ListTop', 'cmd.tree', 'UI Tree', 0, NULL, 0, 'views.BFW_IDE_UI.TreeList', NULL, NULL, NULL);
INSERT INTO BFW_UI_CMD (URI, CMD, CAPTION, IDX, GRP, DEF, HANDLER, PARAMS, OUTS, OPTIONS) VALUES ('views.BFW_IDE_UI.TreeList', 'commands.view.open', 'Open', 0, NULL, 0, 'views.BFW_IDE_UI.ItemQ', 'URI=EV.ID', NULL, NULL);
INSERT INTO BFW_UI_CMD (URI, CMD, CAPTION, IDX, GRP, DEF, HANDLER, PARAMS, OUTS, OPTIONS) VALUES ('views.BFW_IDE_UI.List', 'commands.view.open', 'Open', 0, NULL, 0, 'views.BFW_IDE_UI.Item', 'URI=EV.URI', NULL, NULL);
INSERT INTO BFW_UI_CMD (URI, CMD, CAPTION, IDX, GRP, DEF, HANDLER, PARAMS, OUTS, OPTIONS) VALUES ('views.BFW_IDE_UI_FIELDS.List', 'commands.view.new', 'Add', 0, NULL, 0, 'views.BFW_IDE_UI_FIELDS.New', 'ENTITYNAME=ENTITYNAME;VIEWNAME=VIEWNAME', NULL, NULL);
INSERT INTO BFW_UI_CMD (URI, CMD, CAPTION, IDX, GRP, DEF, HANDLER, PARAMS, OUTS, OPTIONS) VALUES ('views.BFW_IDE_UI.List', 'commands.view.new', 'New', 0, NULL, 0, 'views.BFW_IDE_UI.New', NULL, NULL, NULL);
INSERT INTO BFW_UI_CMD (URI, CMD, CAPTION, IDX, GRP, DEF, HANDLER, PARAMS, OUTS, OPTIONS) VALUES ('IEntityListView', 'commands.view.new', 'Добавить', 0, NULL, 0, 'views.ENTITY.NewDef', '', NULL, NULL);
INSERT INTO BFW_UI_CMD (URI, CMD, CAPTION, IDX, GRP, DEF, HANDLER, PARAMS, OUTS, OPTIONS) VALUES ('IEntityListView', 'commands.view.open', 'Открыть', 0, NULL, 0, 'views.ENTITY.ItemDef', 'ID=ITEM_ID', NULL, NULL);
INSERT INTO BFW_UI_CMD (URI, CMD, CAPTION, IDX, GRP, DEF, HANDLER, PARAMS, OUTS, OPTIONS) VALUES ('views.CBR_PRICE.List', 'cmd.PriceTypList', 'Типы цен', 0, NULL, 0, 'views.CBR_PRICE_TYP.List', NULL, NULL, NULL);
INSERT INTO BFW_UI_CMD (URI, CMD, CAPTION, IDX, GRP, DEF, HANDLER, PARAMS, OUTS, OPTIONS) VALUES ('IEntityJournalView', 'commands.view.open', 'Открыть', 0, NULL, 0, 'views.ENTITY.ItemDef', 'ID=ITEM_ID', NULL, NULL);
INSERT INTO BFW_UI_CMD (URI, CMD, CAPTION, IDX, GRP, DEF, HANDLER, PARAMS, OUTS, OPTIONS) VALUES ('views.CBR_MENU.List', 'cmd.Groups', 'Группы', 0, NULL, 0, 'views.CBR_MENU_GRP.List', NULL, NULL, NULL);
INSERT INTO BFW_UI_CMD (URI, CMD, CAPTION, IDX, GRP, DEF, HANDLER, PARAMS, OUTS, OPTIONS) VALUES ('views.CBR_TBL.List', 'cmd.Rooms', 'Список залов', 0, NULL, 0, 'views.CBR_ROOM.List', NULL, NULL, NULL);

COMMIT WORK;

INSERT INTO CBR_KORD (ID, DAT, IDAT) VALUES (968, '2012-05-04', '2012-05-04 13:29:56');
INSERT INTO CBR_KORD (ID, DAT, IDAT) VALUES (974, '2012-05-04', '2012-05-04 13:30:40');
INSERT INTO CBR_KORD (ID, DAT, IDAT) VALUES (979, '2012-05-04', '2012-05-04 13:31:12');
INSERT INTO CBR_KORD (ID, DAT, IDAT) VALUES (983, '2012-05-04', '2012-05-04 15:21:27');
INSERT INTO CBR_KORD (ID, DAT, IDAT) VALUES (991, '2012-05-04', '2012-05-04 15:25:22');
INSERT INTO CBR_KORD (ID, DAT, IDAT) VALUES (886, '2012-05-04', NULL);
INSERT INTO CBR_KORD (ID, DAT, IDAT) VALUES (890, '2012-05-04', NULL);
INSERT INTO CBR_KORD (ID, DAT, IDAT) VALUES (898, '2012-05-04', NULL);
INSERT INTO CBR_KORD (ID, DAT, IDAT) VALUES (902, '2012-05-04', NULL);
INSERT INTO CBR_KORD (ID, DAT, IDAT) VALUES (910, '2012-05-04', NULL);
INSERT INTO CBR_KORD (ID, DAT, IDAT) VALUES (916, '2012-05-04', NULL);
INSERT INTO CBR_KORD (ID, DAT, IDAT) VALUES (920, '2012-05-04', NULL);
INSERT INTO CBR_KORD (ID, DAT, IDAT) VALUES (930, '2012-05-04', NULL);
INSERT INTO CBR_KORD (ID, DAT, IDAT) VALUES (933, '2012-05-04', NULL);
INSERT INTO CBR_KORD (ID, DAT, IDAT) VALUES (938, '2012-05-04', '2012-05-04 12:46:33');
INSERT INTO CBR_KORD (ID, DAT, IDAT) VALUES (946, '2012-05-04', '2012-05-04 12:53:01');
INSERT INTO CBR_KORD (ID, DAT, IDAT) VALUES (953, '2012-05-04', '2012-05-04 13:11:58');
INSERT INTO CBR_KORD (ID, DAT, IDAT) VALUES (1001, '2012-05-07', '2012-05-07 12:25:40');
INSERT INTO CBR_KORD (ID, DAT, IDAT) VALUES (1028, '2012-05-07', '2012-05-07 12:58:27');
INSERT INTO CBR_KORD (ID, DAT, IDAT) VALUES (1038, '2012-05-07', '2012-05-07 13:01:14');
INSERT INTO CBR_KORD (ID, DAT, IDAT) VALUES (1046, '2012-05-10', '2012-05-10 09:58:04');
INSERT INTO CBR_KORD (ID, DAT, IDAT) VALUES (1050, '2012-05-10', '2012-05-10 09:58:46');
INSERT INTO CBR_KORD (ID, DAT, IDAT) VALUES (1055, '2012-05-10', '2012-05-10 10:21:20');

COMMIT WORK;

INSERT INTO CBR_KORDI (ID, HID, ORDI_ID) VALUES (969, 968, 964);
INSERT INTO CBR_KORDI (ID, HID, ORDI_ID) VALUES (970, 968, 966);
INSERT INTO CBR_KORDI (ID, HID, ORDI_ID) VALUES (975, 974, 972);
INSERT INTO CBR_KORDI (ID, HID, ORDI_ID) VALUES (980, 979, 977);
INSERT INTO CBR_KORDI (ID, HID, ORDI_ID) VALUES (984, 983, 981);
INSERT INTO CBR_KORDI (ID, HID, ORDI_ID) VALUES (992, 991, 987);
INSERT INTO CBR_KORDI (ID, HID, ORDI_ID) VALUES (993, 991, 989);
INSERT INTO CBR_KORDI (ID, HID, ORDI_ID) VALUES (887, 886, 884);
INSERT INTO CBR_KORDI (ID, HID, ORDI_ID) VALUES (891, 890, 888);
INSERT INTO CBR_KORDI (ID, HID, ORDI_ID) VALUES (899, 898, 896);
INSERT INTO CBR_KORDI (ID, HID, ORDI_ID) VALUES (903, 902, 900);
INSERT INTO CBR_KORDI (ID, HID, ORDI_ID) VALUES (911, 910, 904);
INSERT INTO CBR_KORDI (ID, HID, ORDI_ID) VALUES (912, 910, 906);
INSERT INTO CBR_KORDI (ID, HID, ORDI_ID) VALUES (913, 910, 908);
INSERT INTO CBR_KORDI (ID, HID, ORDI_ID) VALUES (917, 916, 914);
INSERT INTO CBR_KORDI (ID, HID, ORDI_ID) VALUES (921, 920, 918);
INSERT INTO CBR_KORDI (ID, HID, ORDI_ID) VALUES (931, 930, 922);
INSERT INTO CBR_KORDI (ID, HID, ORDI_ID) VALUES (932, 930, 924);
INSERT INTO CBR_KORDI (ID, HID, ORDI_ID) VALUES (934, 933, 926);
INSERT INTO CBR_KORDI (ID, HID, ORDI_ID) VALUES (935, 933, 928);
INSERT INTO CBR_KORDI (ID, HID, ORDI_ID) VALUES (939, 938, 936);
INSERT INTO CBR_KORDI (ID, HID, ORDI_ID) VALUES (947, 946, 940);
INSERT INTO CBR_KORDI (ID, HID, ORDI_ID) VALUES (948, 946, 942);
INSERT INTO CBR_KORDI (ID, HID, ORDI_ID) VALUES (949, 946, 944);
INSERT INTO CBR_KORDI (ID, HID, ORDI_ID) VALUES (954, 953, 951);
INSERT INTO CBR_KORDI (ID, HID, ORDI_ID) VALUES (1002, 1001, 997);
INSERT INTO CBR_KORDI (ID, HID, ORDI_ID) VALUES (1003, 1001, 999);
INSERT INTO CBR_KORDI (ID, HID, ORDI_ID) VALUES (1029, 1028, 1026);
INSERT INTO CBR_KORDI (ID, HID, ORDI_ID) VALUES (1030, 1028, 1014);
INSERT INTO CBR_KORDI (ID, HID, ORDI_ID) VALUES (1031, 1028, 1016);
INSERT INTO CBR_KORDI (ID, HID, ORDI_ID) VALUES (1039, 1038, 1032);
INSERT INTO CBR_KORDI (ID, HID, ORDI_ID) VALUES (1040, 1038, 1034);
INSERT INTO CBR_KORDI (ID, HID, ORDI_ID) VALUES (1041, 1038, 1036);
INSERT INTO CBR_KORDI (ID, HID, ORDI_ID) VALUES (1047, 1046, 1044);
INSERT INTO CBR_KORDI (ID, HID, ORDI_ID) VALUES (1051, 1050, 1048);
INSERT INTO CBR_KORDI (ID, HID, ORDI_ID) VALUES (1056, 1055, 1053);

COMMIT WORK;

INSERT INTO CBR_MENU_GRP (ID, NAME) VALUES (35, 'Напитки Горячие');
INSERT INTO CBR_MENU_GRP (ID, NAME) VALUES (41, 'Шаурма');
INSERT INTO CBR_MENU_GRP (ID, NAME) VALUES (47, 'Напитки охлажденные');

COMMIT WORK;

INSERT INTO CBR_MENU (ID, NAME, GRP_ID, STATE_ID, UNT) VALUES (97, 'Сок яблочный 200мл', 47, 1, 'ст');
INSERT INTO CBR_MENU (ID, NAME, GRP_ID, STATE_ID, UNT) VALUES (23, 'Шаурма №2', 41, 1, 'пор.');
INSERT INTO CBR_MENU (ID, NAME, GRP_ID, STATE_ID, UNT) VALUES (98, 'Сок апельсиновый 200мл', 47, 1, 'ст');
INSERT INTO CBR_MENU (ID, NAME, GRP_ID, STATE_ID, UNT) VALUES (27, 'Шаурма №1', 41, 1, 'пор.');
INSERT INTO CBR_MENU (ID, NAME, GRP_ID, STATE_ID, UNT) VALUES (43, 'Чай (ассортимент)', 35, 1, 'ч');
INSERT INTO CBR_MENU (ID, NAME, GRP_ID, STATE_ID, UNT) VALUES (49, 'Кофе "Лате"', 35, 1, 'ч');
INSERT INTO CBR_MENU (ID, NAME, GRP_ID, STATE_ID, UNT) VALUES (55, 'Шаурма с сыром и грибами', 41, 1, 'пор.');

COMMIT WORK;

INSERT INTO CBR_ORD (ID, DAT, STATE_ID, IUSR, IDAT, PUSR, PDAT, TBL_ID, PRICE_TYP_ID, LAST_ACT_TIME) VALUES (985, '2012-05-04', 3, 'SYSDBA', '2012-05-04', NULL, NULL, 85, 77, '2012-05-04 15:24:13');
INSERT INTO CBR_ORD (ID, DAT, STATE_ID, IUSR, IDAT, PUSR, PDAT, TBL_ID, PRICE_TYP_ID, LAST_ACT_TIME) VALUES (971, '2012-05-04', 3, 'SYSDBA', '2012-05-04', NULL, NULL, 89, 77, '2012-05-04 13:30:38');
INSERT INTO CBR_ORD (ID, DAT, STATE_ID, IUSR, IDAT, PUSR, PDAT, TBL_ID, PRICE_TYP_ID, LAST_ACT_TIME) VALUES (986, '2012-05-04', 3, 'SYSDBA', '2012-05-04', NULL, NULL, 89, 77, '2012-05-04 15:25:07');
INSERT INTO CBR_ORD (ID, DAT, STATE_ID, IUSR, IDAT, PUSR, PDAT, TBL_ID, PRICE_TYP_ID, LAST_ACT_TIME) VALUES (976, '2012-05-04', 3, 'SYSDBA', '2012-05-04', NULL, NULL, 89, 77, '2012-05-04 13:31:10');
INSERT INTO CBR_ORD (ID, DAT, STATE_ID, IUSR, IDAT, PUSR, PDAT, TBL_ID, PRICE_TYP_ID, LAST_ACT_TIME) VALUES (994, '2012-05-04', 3, 'SYSDBA', '2012-05-04', NULL, NULL, 89, 77, '2012-05-04 15:25:39');
INSERT INTO CBR_ORD (ID, DAT, STATE_ID, IUSR, IDAT, PUSR, PDAT, TBL_ID, PRICE_TYP_ID, LAST_ACT_TIME) VALUES (879, '2012-05-04', 3, 'SYSDBA', '2012-05-04', NULL, NULL, 87, 77, '2012-05-04 12:10:57');
INSERT INTO CBR_ORD (ID, DAT, STATE_ID, IUSR, IDAT, PUSR, PDAT, TBL_ID, PRICE_TYP_ID, LAST_ACT_TIME) VALUES (892, '2012-05-04', 3, 'SYSDBA', '2012-05-04', NULL, NULL, 89, 77, '2012-05-04 12:17:57');
INSERT INTO CBR_ORD (ID, DAT, STATE_ID, IUSR, IDAT, PUSR, PDAT, TBL_ID, PRICE_TYP_ID, LAST_ACT_TIME) VALUES (895, '2012-05-04', 3, 'SYSDBA', '2012-05-04', NULL, NULL, 87, 77, '2012-05-04 12:20:40');
INSERT INTO CBR_ORD (ID, DAT, STATE_ID, IUSR, IDAT, PUSR, PDAT, TBL_ID, PRICE_TYP_ID, LAST_ACT_TIME) VALUES (950, '2012-05-04', 3, 'SYSDBA', '2012-05-04', NULL, NULL, 89, 77, '2012-05-04 13:11:49');
INSERT INTO CBR_ORD (ID, DAT, STATE_ID, IUSR, IDAT, PUSR, PDAT, TBL_ID, PRICE_TYP_ID, LAST_ACT_TIME) VALUES (955, '2012-05-04', 3, 'SYSDBA', '2012-05-04', NULL, NULL, 89, 77, '2012-05-04 13:17:33');
INSERT INTO CBR_ORD (ID, DAT, STATE_ID, IUSR, IDAT, PUSR, PDAT, TBL_ID, PRICE_TYP_ID, LAST_ACT_TIME) VALUES (958, '2012-05-04', 3, 'SYSDBA', '2012-05-04', NULL, NULL, 87, 77, '2012-05-04 13:19:22');
INSERT INTO CBR_ORD (ID, DAT, STATE_ID, IUSR, IDAT, PUSR, PDAT, TBL_ID, PRICE_TYP_ID, LAST_ACT_TIME) VALUES (963, '2012-05-04', 3, 'SYSDBA', '2012-05-04', NULL, NULL, 89, 77, '2012-05-04 13:21:13');
INSERT INTO CBR_ORD (ID, DAT, STATE_ID, IUSR, IDAT, PUSR, PDAT, TBL_ID, PRICE_TYP_ID, LAST_ACT_TIME) VALUES (1042, '2012-05-07', 0, 'SYSDBA', '2012-05-07', NULL, NULL, 95, 77, '2012-05-07 17:32:51');
INSERT INTO CBR_ORD (ID, DAT, STATE_ID, IUSR, IDAT, PUSR, PDAT, TBL_ID, PRICE_TYP_ID, LAST_ACT_TIME) VALUES (1043, '2012-05-10', 1, 'SYSDBA', '2012-05-10', NULL, NULL, 85, 77, '2012-05-10 09:56:46');
INSERT INTO CBR_ORD (ID, DAT, STATE_ID, IUSR, IDAT, PUSR, PDAT, TBL_ID, PRICE_TYP_ID, LAST_ACT_TIME) VALUES (1052, '2012-05-10', 1, 'SYSDBA', '2012-05-10', NULL, NULL, 89, 77, '2012-05-10 10:21:06');

COMMIT WORK;

INSERT INTO CBR_ORDI (ID, HID, MENU_ID, QTY, PRICE, KORD_ID) VALUES (981, 976, 49, 3, 5, 983);
INSERT INTO CBR_ORDI (ID, HID, MENU_ID, QTY, PRICE, KORD_ID) VALUES (997, 986, 98, 1, 3.5, 1001);
INSERT INTO CBR_ORDI (ID, HID, MENU_ID, QTY, PRICE, KORD_ID) VALUES (972, 971, 98, 1, 3.5, 974);
INSERT INTO CBR_ORDI (ID, HID, MENU_ID, QTY, PRICE, KORD_ID) VALUES (977, 976, 98, 1, 3.5, 979);
INSERT INTO CBR_ORDI (ID, HID, MENU_ID, QTY, PRICE, KORD_ID) VALUES (987, 986, 98, 2, 3.5, 991);
INSERT INTO CBR_ORDI (ID, HID, MENU_ID, QTY, PRICE, KORD_ID) VALUES (989, 986, 97, 1, 3.5, 991);
INSERT INTO CBR_ORDI (ID, HID, MENU_ID, QTY, PRICE, KORD_ID) VALUES (884, 879, 49, 1, 2, 886);
INSERT INTO CBR_ORDI (ID, HID, MENU_ID, QTY, PRICE, KORD_ID) VALUES (888, 879, 43, 1, 2, 890);
INSERT INTO CBR_ORDI (ID, HID, MENU_ID, QTY, PRICE, KORD_ID) VALUES (896, 895, 98, 2, 2, 898);
INSERT INTO CBR_ORDI (ID, HID, MENU_ID, QTY, PRICE, KORD_ID) VALUES (900, 895, 98, 3, 3.5, 902);
INSERT INTO CBR_ORDI (ID, HID, MENU_ID, QTY, PRICE, KORD_ID) VALUES (904, 895, 27, 1, 17, 910);
INSERT INTO CBR_ORDI (ID, HID, MENU_ID, QTY, PRICE, KORD_ID) VALUES (906, 895, 27, 1, 17, 910);
INSERT INTO CBR_ORDI (ID, HID, MENU_ID, QTY, PRICE, KORD_ID) VALUES (908, 895, 27, 1, 17, 910);
INSERT INTO CBR_ORDI (ID, HID, MENU_ID, QTY, PRICE, KORD_ID) VALUES (914, 895, 97, 1, 3.5, 916);
INSERT INTO CBR_ORDI (ID, HID, MENU_ID, QTY, PRICE, KORD_ID) VALUES (918, 895, 97, 1, 3.5, 920);
INSERT INTO CBR_ORDI (ID, HID, MENU_ID, QTY, PRICE, KORD_ID) VALUES (922, 895, 97, 1, 3.5, 930);
INSERT INTO CBR_ORDI (ID, HID, MENU_ID, QTY, PRICE, KORD_ID) VALUES (924, 895, 98, 1, 3.5, 930);
INSERT INTO CBR_ORDI (ID, HID, MENU_ID, QTY, PRICE, KORD_ID) VALUES (926, 892, 27, 1, 17, 933);
INSERT INTO CBR_ORDI (ID, HID, MENU_ID, QTY, PRICE, KORD_ID) VALUES (928, 892, 98, 1, 3.5, 933);
INSERT INTO CBR_ORDI (ID, HID, MENU_ID, QTY, PRICE, KORD_ID) VALUES (936, 892, 97, 1, 3.5, 938);
INSERT INTO CBR_ORDI (ID, HID, MENU_ID, QTY, PRICE, KORD_ID) VALUES (940, 892, 27, 1, 17, 946);
INSERT INTO CBR_ORDI (ID, HID, MENU_ID, QTY, PRICE, KORD_ID) VALUES (942, 892, 55, 1, 22, 946);
INSERT INTO CBR_ORDI (ID, HID, MENU_ID, QTY, PRICE, KORD_ID) VALUES (944, 892, 43, 1, 3, 946);
INSERT INTO CBR_ORDI (ID, HID, MENU_ID, QTY, PRICE, KORD_ID) VALUES (951, 950, 98, 3, 3.5, 953);
INSERT INTO CBR_ORDI (ID, HID, MENU_ID, QTY, PRICE, KORD_ID) VALUES (956, 955, 98, 1, 3.5, NULL);
INSERT INTO CBR_ORDI (ID, HID, MENU_ID, QTY, PRICE, KORD_ID) VALUES (959, 958, 98, 1, 3.5, NULL);
INSERT INTO CBR_ORDI (ID, HID, MENU_ID, QTY, PRICE, KORD_ID) VALUES (961, 958, 98, 1, 3.5, NULL);
INSERT INTO CBR_ORDI (ID, HID, MENU_ID, QTY, PRICE, KORD_ID) VALUES (964, 963, 97, 1, 3.5, 968);
INSERT INTO CBR_ORDI (ID, HID, MENU_ID, QTY, PRICE, KORD_ID) VALUES (966, 963, 97, 1, 3.5, 968);
INSERT INTO CBR_ORDI (ID, HID, MENU_ID, QTY, PRICE, KORD_ID) VALUES (999, 986, 97, 1, 3.5, 1001);
INSERT INTO CBR_ORDI (ID, HID, MENU_ID, QTY, PRICE, KORD_ID) VALUES (1026, 994, 98, 1, 3.5, 1028);
INSERT INTO CBR_ORDI (ID, HID, MENU_ID, QTY, PRICE, KORD_ID) VALUES (1014, 994, 98, 1, 3.5, 1028);
INSERT INTO CBR_ORDI (ID, HID, MENU_ID, QTY, PRICE, KORD_ID) VALUES (1016, 994, 98, 1, 3.5, 1028);
INSERT INTO CBR_ORDI (ID, HID, MENU_ID, QTY, PRICE, KORD_ID) VALUES (1032, 994, 98, 1, 3.5, 1038);
INSERT INTO CBR_ORDI (ID, HID, MENU_ID, QTY, PRICE, KORD_ID) VALUES (1034, 994, 98, 1, 3.5, 1038);
INSERT INTO CBR_ORDI (ID, HID, MENU_ID, QTY, PRICE, KORD_ID) VALUES (1036, 994, 98, 1, 3.5, 1038);
INSERT INTO CBR_ORDI (ID, HID, MENU_ID, QTY, PRICE, KORD_ID) VALUES (1044, 1043, 98, 2, 3.5, 1046);
INSERT INTO CBR_ORDI (ID, HID, MENU_ID, QTY, PRICE, KORD_ID) VALUES (1048, 1043, 55, 1, 22, 1050);
INSERT INTO CBR_ORDI (ID, HID, MENU_ID, QTY, PRICE, KORD_ID) VALUES (1053, 1052, 97, 1, 3.5, 1055);

COMMIT WORK;

INSERT INTO CBR_PRICE_TYP (ID, NAME) VALUES (77, 'Обычные');

COMMIT WORK;

INSERT INTO CBR_PRICE (ID, MENU_ID, TYP_ID, DAT, PRICE) VALUES (1, 23, 77, '2012-04-23', 15.6);
INSERT INTO CBR_PRICE (ID, MENU_ID, TYP_ID, DAT, PRICE) VALUES (2, 27, 77, '2012-04-23', 15.66);
INSERT INTO CBR_PRICE (ID, MENU_ID, TYP_ID, DAT, PRICE) VALUES (3, 43, 77, '2012-04-23', 3);
INSERT INTO CBR_PRICE (ID, MENU_ID, TYP_ID, DAT, PRICE) VALUES (4, 27, 77, '2012-04-25', 17);
INSERT INTO CBR_PRICE (ID, MENU_ID, TYP_ID, DAT, PRICE) VALUES (893, 98, 77, '2012-05-01', 3.5);
INSERT INTO CBR_PRICE (ID, MENU_ID, TYP_ID, DAT, PRICE) VALUES (894, 97, 77, '2012-05-01', 3.5);
INSERT INTO CBR_PRICE (ID, MENU_ID, TYP_ID, DAT, PRICE) VALUES (6, 49, 77, '2012-04-23', 5);
INSERT INTO CBR_PRICE (ID, MENU_ID, TYP_ID, DAT, PRICE) VALUES (7, 55, 77, '2012-04-23', 22);

COMMIT WORK;

INSERT INTO CBR_ROOMS (ID, NAME) VALUES (81, 'Основной зал');
INSERT INTO CBR_ROOMS (ID, NAME) VALUES (83, 'Летняя площадка');

COMMIT WORK;

INSERT INTO CBR_TBL (ID, NAME, ROOM_ID, STATE_ID) VALUES (85, 'Барная стойка', 81, 1);
INSERT INTO CBR_TBL (ID, NAME, ROOM_ID, STATE_ID) VALUES (87, '№1', 83, 1);
INSERT INTO CBR_TBL (ID, NAME, ROOM_ID, STATE_ID) VALUES (89, '№2', 83, 1);
INSERT INTO CBR_TBL (ID, NAME, ROOM_ID, STATE_ID) VALUES (95, '№3', 83, 1);

COMMIT WORK;

INSERT INTO INF_ENUM (TABLENAME, FIELDNAME, ID, NAME, CODE) VALUES ('CBR_MENU', 'STATE_ID', 0, 'Новое', NULL);
INSERT INTO INF_ENUM (TABLENAME, FIELDNAME, ID, NAME, CODE) VALUES ('CBR_MENU', 'STATE_ID', 1, 'Активно', NULL);
INSERT INTO INF_ENUM (TABLENAME, FIELDNAME, ID, NAME, CODE) VALUES ('CBR_MENU', 'STATE_ID', 2, 'Не активно', NULL);
INSERT INTO INF_ENUM (TABLENAME, FIELDNAME, ID, NAME, CODE) VALUES ('CBR_MENU', 'STATE_ID', 3, 'Закрыто', '');
INSERT INTO INF_ENUM (TABLENAME, FIELDNAME, ID, NAME, CODE) VALUES ('CBR_ORD', 'STATE_ID', 1, 'Обслуживается', NULL);
INSERT INTO INF_ENUM (TABLENAME, FIELDNAME, ID, NAME, CODE) VALUES ('CBR_ORD', 'STATE_ID', 2, 'Пречек', NULL);
INSERT INTO INF_ENUM (TABLENAME, FIELDNAME, ID, NAME, CODE) VALUES ('CBR_ORD', 'STATE_ID', 3, 'Закрыт', NULL);
INSERT INTO INF_ENUM (TABLENAME, FIELDNAME, ID, NAME, CODE) VALUES ('CBR_ORD', 'STATE_ID', 0, 'Открыт', NULL);
INSERT INTO INF_ENUM (TABLENAME, FIELDNAME, ID, NAME, CODE) VALUES ('CBR', '-', 0, 'Новая', NULL);
INSERT INTO INF_ENUM (TABLENAME, FIELDNAME, ID, NAME, CODE) VALUES ('CBR', '-', 1, 'Активная', NULL);
INSERT INTO INF_ENUM (TABLENAME, FIELDNAME, ID, NAME, CODE) VALUES ('CBR', '-', 2, 'Не активная', NULL);
INSERT INTO INF_ENUM (TABLENAME, FIELDNAME, ID, NAME, CODE) VALUES ('CBR', '-', 3, 'Закрытая', NULL);

COMMIT WORK;

INSERT INTO INF_MSG (CODE, MSG) VALUES ('ERROR.PRECHECK', 'Есть невыполненный заказ!');

COMMIT WORK;

INSERT INTO INF_STATES (TABLENAME, ID, CODE, NAME, DRANGE) VALUES ('CBR_ORD', 0, NULL, 'Открытые', 0);
INSERT INTO INF_STATES (TABLENAME, ID, CODE, NAME, DRANGE) VALUES ('CBR_ORD', 1, NULL, 'Обслуживаются', 0);
INSERT INTO INF_STATES (TABLENAME, ID, CODE, NAME, DRANGE) VALUES ('CBR_ORD', 2, NULL, 'Пречек', 0);
INSERT INTO INF_STATES (TABLENAME, ID, CODE, NAME, DRANGE) VALUES ('CBR_ORD', 3, NULL, 'Закрытые', 1);

COMMIT WORK;



/******************************************************************************/
/***                           Unique Constraints                           ***/
/******************************************************************************/

ALTER TABLE BFW_ENT_VIEW_LINKS ADD CONSTRAINT UNQ1_BFW_ENT_VIEW_LINKS UNIQUE (ENTITYNAME, VIEWNAME, LINKED_ENTITYNAME, LINKED_VIEWNAME, LINKED_FIELD);
ALTER TABLE CBR_PRICE ADD CONSTRAINT UNQ1_CBR_PRICE UNIQUE (MENU_ID, TYP_ID, DAT);


/******************************************************************************/
/***                              Primary Keys                              ***/
/******************************************************************************/

ALTER TABLE BFW_ENT ADD CONSTRAINT PK_BFW_ENT PRIMARY KEY (ENTITYNAME);
ALTER TABLE BFW_ENT_FIELDS ADD CONSTRAINT PK_BFW_ENT_FIELDS PRIMARY KEY (ENTITYNAME, VIEWNAME, FIELDNAME);
ALTER TABLE BFW_ENT_VIEWS ADD CONSTRAINT PK_BFW_ENT_VIEWS PRIMARY KEY (ENTITYNAME, VIEWNAME);
ALTER TABLE BFW_INF_MSG ADD CONSTRAINT PK_BFW_INF_MSG PRIMARY KEY (ID);
ALTER TABLE BFW_INF_SETTINGS ADD CONSTRAINT PK_BFW_INF_SETTINGS PRIMARY KEY (NAME, USR);
ALTER TABLE BFW_INF_SETTINGS_META ADD CONSTRAINT PK_BFW_INF_SETTINGS_META PRIMARY KEY (NAME);
ALTER TABLE BFW_SEC_ACL ADD CONSTRAINT PK_BFW_SEC_ACL PRIMARY KEY (PERMID, USERID, RESID);
ALTER TABLE BFW_SEC_PERMISSIONS ADD CONSTRAINT PK_BFW_SEC_PERMISSIONS PRIMARY KEY (PERMID);
ALTER TABLE BFW_SEC_POLICIES ADD CONSTRAINT PK_BFW_SEC_POLICIES PRIMARY KEY (POLID);
ALTER TABLE BFW_SEC_PROV ADD CONSTRAINT PK_BFW_SEC_PROV PRIMARY KEY (URI);
ALTER TABLE BFW_SEC_USERS ADD CONSTRAINT PK_BFW_SEC_USERS PRIMARY KEY (USERID);
ALTER TABLE BFW_SEC_USER_ROLES ADD CONSTRAINT PK_BFW_SEC_USER_ROLES PRIMARY KEY (USERID, ROLEID);
ALTER TABLE BFW_UI ADD CONSTRAINT PK_BFW_UI PRIMARY KEY (URI);
ALTER TABLE BFW_UI_CLS ADD CONSTRAINT PK_BFW_UI_CLS PRIMARY KEY (CLS);
ALTER TABLE BFW_UI_CMD ADD CONSTRAINT PK_BFW_UI_CMD PRIMARY KEY (URI, CMD);
ALTER TABLE BFW_UI_GRP ADD CONSTRAINT PK_BFW_UI_GRP PRIMARY KEY (GRP);
ALTER TABLE BFW_UI_STYLES ADD CONSTRAINT PK_BFW_UI_STYLES PRIMARY KEY (ID);
ALTER TABLE CBR_KORD ADD CONSTRAINT PK_CBR_KORD PRIMARY KEY (ID);
ALTER TABLE CBR_KORDI ADD CONSTRAINT PK_CBR_KORDI PRIMARY KEY (ID);
ALTER TABLE CBR_MENU ADD CONSTRAINT PK_CBR_MENU PRIMARY KEY (ID);
ALTER TABLE CBR_MENU_GRP ADD CONSTRAINT PK_CBR_MENU_GRP PRIMARY KEY (ID);
ALTER TABLE CBR_ORD ADD CONSTRAINT PK_CBR_ORD PRIMARY KEY (ID);
ALTER TABLE CBR_ORDI ADD CONSTRAINT PK_CBR_ORDI PRIMARY KEY (ID);
ALTER TABLE CBR_PRICE ADD CONSTRAINT PK_CBR_PRICE PRIMARY KEY (ID);
ALTER TABLE CBR_PRICE_TYP ADD CONSTRAINT PK_CBR_PRICE_TYP PRIMARY KEY (ID);
ALTER TABLE CBR_ROOMS ADD CONSTRAINT PK_CBR_ROOMS PRIMARY KEY (ID);
ALTER TABLE CBR_TBL ADD CONSTRAINT PK_CBR_TBL PRIMARY KEY (ID);
ALTER TABLE INF_ENUM ADD CONSTRAINT PK_INF_ENUM PRIMARY KEY (TABLENAME, FIELDNAME, ID);
ALTER TABLE INF_MSG ADD CONSTRAINT PK_INF_MSG PRIMARY KEY (CODE);
ALTER TABLE INF_STATES ADD CONSTRAINT PK_INF_STATES PRIMARY KEY (TABLENAME, ID);


/******************************************************************************/
/***                              Foreign Keys                              ***/
/******************************************************************************/

ALTER TABLE BFW_SEC_ACL ADD CONSTRAINT FK_BFW_SEC_ACL_PERM FOREIGN KEY (PERMID) REFERENCES BFW_SEC_PERMISSIONS (PERMID);
ALTER TABLE BFW_SEC_ACL ADD CONSTRAINT FK_BFW_SEC_ACL_USERID FOREIGN KEY (USERID) REFERENCES BFW_SEC_USERS (USERID);
ALTER TABLE BFW_SEC_PERMISSIONS ADD CONSTRAINT FK_BFW_SEC_PERMISSIONS_INHERITB FOREIGN KEY (INHERITBY) REFERENCES BFW_SEC_PERMISSIONS (PERMID);
ALTER TABLE BFW_SEC_PERMISSIONS ADD CONSTRAINT FK_BFW_SEC_PERMISSIONS_POLID FOREIGN KEY (POLID) REFERENCES BFW_SEC_POLICIES (POLID);
ALTER TABLE BFW_SEC_POLICIES ADD CONSTRAINT FK_BFW_SEC_POLICIES_PARENT FOREIGN KEY (PARENTID) REFERENCES BFW_SEC_POLICIES (POLID);
ALTER TABLE BFW_SEC_USER_ROLES ADD CONSTRAINT FK_BFW_SEC_USER_ROLES_ROLEID FOREIGN KEY (ROLEID) REFERENCES BFW_SEC_USERS (USERID);
ALTER TABLE BFW_SEC_USER_ROLES ADD CONSTRAINT FK_BFW_SEC_USER_ROLES_USERID FOREIGN KEY (USERID) REFERENCES BFW_SEC_USERS (USERID);
ALTER TABLE CBR_MENU ADD CONSTRAINT FK_CBR_MENU_GRP FOREIGN KEY (GRP_ID) REFERENCES CBR_MENU_GRP (ID);
ALTER TABLE CBR_PRICE ADD CONSTRAINT FK_CBR_PRICE_MENU FOREIGN KEY (MENU_ID) REFERENCES CBR_MENU (ID);
ALTER TABLE CBR_PRICE ADD CONSTRAINT FK_CBR_PRICE_TYP FOREIGN KEY (TYP_ID) REFERENCES CBR_PRICE_TYP (ID);
ALTER TABLE CBR_TBL ADD CONSTRAINT FK_CBR_TBL_ROOM FOREIGN KEY (ROOM_ID) REFERENCES CBR_ROOMS (ID);


/******************************************************************************/
/***                                Triggers                                ***/
/******************************************************************************/


SET TERM ^ ;



/******************************************************************************/
/***                          Triggers for tables                           ***/
/******************************************************************************/



/* Trigger: BFW_INF_MSG_BU */
CREATE OR ALTER TRIGGER BFW_INF_MSG_BU FOR BFW_INF_MSG
ACTIVE BEFORE UPDATE POSITION 0
as
begin
  if (new.status <> old.status and old.status = 0) then
    new.rdat = 'NOW';
end
^


/* Trigger: BFW_SEC_PERMISSIONS_BD */
CREATE OR ALTER TRIGGER BFW_SEC_PERMISSIONS_BD FOR BFW_SEC_PERMISSIONS
ACTIVE BEFORE DELETE POSITION 0
as
begin
  delete from bfw_sec_acl a where a.permid = old.permid;
end
^


/* Trigger: BFW_SEC_POLICIES_BD */
CREATE OR ALTER TRIGGER BFW_SEC_POLICIES_BD FOR BFW_SEC_POLICIES
ACTIVE BEFORE DELETE POSITION 0
as
begin
  if (old.polid = 'BUILD-IN') then
    exception bfw_raise 'It is not allowed for built-in policy';
end
^


/* Trigger: BFW_SEC_POLICIES_BU */
CREATE OR ALTER TRIGGER BFW_SEC_POLICIES_BU FOR BFW_SEC_POLICIES
ACTIVE BEFORE UPDATE POSITION 0
as
begin
  if (new.polid = 'BUILT-IN' and new.state <> old.state and new.state = 0) then
    exception bfw_raise 'It is not allowed for built-in policy';
end
^


/* Trigger: BFW_SEC_USERS_BD */
CREATE OR ALTER TRIGGER BFW_SEC_USERS_BD FOR BFW_SEC_USERS
ACTIVE BEFORE DELETE POSITION 0
as
begin
  delete from bfw_sec_acl a where a.userid = old.userid;
  delete from bfw_sec_user_roles r where r.userid = old.userid;
  delete from bfw_sec_user_roles r where r.roleid = old.userid;
end
^


/* Trigger: BFW_SEC_USERS_BI */
CREATE OR ALTER TRIGGER BFW_SEC_USERS_BI FOR BFW_SEC_USERS
ACTIVE BEFORE INSERT POSITION 0
as
begin
  if (new.name is null) then
    new.name = new.userid;
end
^


/* Trigger: BFW_SEC_USERS_BU */
CREATE OR ALTER TRIGGER BFW_SEC_USERS_BU FOR BFW_SEC_USERS
ACTIVE BEFORE UPDATE POSITION 0
as
begin
  if (new.name is null) then
    new.name = new.userid;
end
^


SET TERM ; ^



/******************************************************************************/
/***                           Stored Procedures                            ***/
/******************************************************************************/


SET TERM ^ ;

CREATE OR ALTER PROCEDURE BFW_IDE_EV_UI_ITEM (
    URI_ VARCHAR(50))
RETURNS (
    URI VARCHAR(50),
    CLS VARCHAR(50),
    TITLE VARCHAR(50),
    GRP VARCHAR(50),
    MENUIDX INTEGER,
    OPTIONS VARCHAR(1024),
    PARAMS VARCHAR(1024),
    OUTS VARCHAR(1024),
    USEPERM INTEGER,
    PKG VARCHAR(50),
    ENT VARCHAR(50),
    ENT_VIEW VARCHAR(50),
    ENT_EVIEW VARCHAR(100),
    ENT_VIEW_READONLY INTEGER,
    ENT_VIEW_PKEY VARCHAR(50),
    ENT_SQL_SELECT VARCHAR(1024),
    ENT_SQL_INSERT VARCHAR(1024),
    ENT_SQL_INSERTDEF VARCHAR(1024),
    ENT_SQL_UPDATE VARCHAR(1024),
    ENT_SQL_DELETE VARCHAR(1024),
    ENT_SQL_REFRESH VARCHAR(1024),
    UI_TITLE VARCHAR(250))
AS
begin
  select ui.uri, ui.cls, ui.title, ui.grp, ui.menuidx, ui.options,
         ui.params, ui.outs, ui.useperm, ui.pkg,
         ui.entityname, coalesce(ui.viewname, cls.viewname),
         ev.sql_select, ev.sql_insert, ev.sql_update, ev.sql_delete,
         ev.sql_refresh, ev.sql_insertdef,
         ev.readonly, ev.pkey
  from bfw_ui ui
       left join bfw_ui_cls cls on (cls.cls = ui.cls)
       left join bfw_ent_views ev on (ev.entityname = ui.entityname and ev.viewname = coalesce(ui.viewname, cls.viewname))
  where ui.uri = :uri_
  into :uri, :cls, :title, :grp, :menuidx, :options,
       :params, :outs, :useperm, :pkg,
       :ent, :ent_view,
       :ent_sql_select, :ent_sql_insert, :ent_sql_update, :ent_sql_delete,
       :ent_sql_refresh, :ent_sql_insertdef,
       :ent_view_readonly, :ent_view_pkey;

  ENT_EVIEW = ent || '.' || coalesce(:ent_view, '');

  UI_TITLE = 'UI: ' || title;

  suspend;
end^


CREATE OR ALTER PROCEDURE BFW_IDE_EV_UI_ITEM_U (
    URI VARCHAR(50),
    TITLE VARCHAR(50),
    GRP VARCHAR(50),
    MENUIDX INTEGER,
    OPTIONS VARCHAR(1024),
    PARAMS VARCHAR(1024),
    OUTS VARCHAR(1024),
    USEPERM INTEGER,
    PKG VARCHAR(50),
    ENT VARCHAR(50),
    ENT_VIEW VARCHAR(50),
    ENT_VIEW_READONLY INTEGER,
    ENT_VIEW_PKEY VARCHAR(50),
    ENT_SQL_SELECT VARCHAR(1024),
    ENT_SQL_INSERT VARCHAR(1024),
    ENT_SQL_INSERTDEF VARCHAR(1024),
    ENT_SQL_UPDATE VARCHAR(1024),
    ENT_SQL_DELETE VARCHAR(1024),
    ENT_SQL_REFRESH VARCHAR(1024))
AS
begin
  update bfw_ui
  set title = :title,
      grp = :grp,
      menuidx = :menuidx,
      options = :options,
      params = :params,
      outs = :outs,
      useperm = :useperm,
      pkg = :pkg
  where uri = :uri;


  update bfw_ent_views ev
  set ev.sql_select = :ent_sql_select,
      ev.sql_insert = :ent_sql_insert,
      ev.sql_insertdef = :ent_sql_insertdef,
      ev.sql_update = :ent_sql_update,
      ev.sql_delete = :ent_sql_delete,
      ev.sql_refresh = :ent_sql_refresh,
      ev.pkey = :ent_view_pkey,
      ev.readonly = :ent_view_readonly
  where ev.entityname = :ent and ev.viewname = :ent_view;
end^


CREATE OR ALTER PROCEDURE BFW_IDE_EV_UI_NEW
RETURNS (
    URI VARCHAR(50),
    CLS VARCHAR(50),
    TITLE VARCHAR(50),
    PKG VARCHAR(50),
    ENT VARCHAR(50),
    ENT_VIEW VARCHAR(50),
    ENT_EVIEW VARCHAR(100))
AS
begin

  suspend;
end^


CREATE OR ALTER PROCEDURE BFW_IDE_EV_UI_NEW_U (
    URI VARCHAR(50),
    CLS VARCHAR(50),
    TITLE VARCHAR(50),
    PKG VARCHAR(50),
    ENT VARCHAR(50),
    ENT_VIEW VARCHAR(50))
AS
begin
  ent = upper(ent);

  insert into bfw_ui(uri, cls, title, pkg, entityname, viewname)
  values(:uri, :cls, :title, :pkg, :ent, :ent_view);

  if (not exists(select * from bfw_ent_views where entityname = :ent and viewname = :ent_view)) then
  begin
    insert into bfw_ent_views(entityname, viewname)
    values(:ent, :ent_view);
  end
end^


CREATE OR ALTER PROCEDURE BFW_INF_EV_SETTING_CHECK (
    NAME_ VARCHAR(50),
    USERNAME_ VARCHAR(50))
RETURNS (
    COMMON_EXISTS INTEGER,
    USER_EXISTS INTEGER)
AS
begin
  name_ = upper(name_);
  username_ = upper(coalesce(username_, ''));

  common_exists = 0; user_exists = 0;

  if (exists(select * from  bfw_inf_settings s
      where s.name = :name_ and s.usr = :username_)) then
    user_exists = 1;

  if (exists(select * from bfw_inf_settings s
      where s.name = :name_ and s.usr = '')) then
    common_exists = 1;

  suspend;
end^


CREATE OR ALTER PROCEDURE BFW_INF_EV_SETTING_GET (
    NAME_ VARCHAR(50),
    USERNAME_ VARCHAR(50))
RETURNS (
    VALI INTEGER,
    VALS VARCHAR(250),
    VALN DOUBLE PRECISION,
    VALD DATE)
AS
begin
  name_ = upper(name_);
  username_ = upper(coalesce(username_, ''));
  select s.vali, s.vals, s.valn, s.vald
  from bfw_inf_settings s
  where s.name = :name_ and s.usr = :username_
  into :vali, :vals, :valn, :vald;

  if (vali is null and vals is null and valn is null and vald is null and username_ <> '') then
    select s.vali, s.vals, s.valn, s.vald
    from bfw_inf_settings s
    where s.name = :name_ and s.usr = ''
    into :vali, :vals, :valn, :vald;

  if (vali is null and vals is null and valn is null and vald is null) then
    select s.def_vali, s.def_vals, s.def_valn, s.def_vald
    from bfw_inf_settings_meta s
    where s.name = :name_
    into :vali, :vals, :valn, :vald;

  suspend;
end^


CREATE OR ALTER PROCEDURE BFW_INF_EV_SETTING_SET (
    NAME_ VARCHAR(50),
    USERNAME_ VARCHAR(50),
    VALI_ INTEGER,
    VALS_ VARCHAR(250),
    VALN_ DOUBLE PRECISION,
    VALD_ DATE)
AS
begin
  name_ = upper(name_);
  username_ = upper(coalesce(username_, ''));

  if (vali_ is null and vals_ is null and valn_ is null and vald_ is null) then
    delete from bfw_inf_settings s
    where s.name = :name_ and s.usr = :username_;
  else
  begin
    if (exists(select * from bfw_inf_settings s where s.name = :name_ and usr = :username_)) then
      update bfw_inf_settings s
      set s.vali = :vali_, s.vals = :vals_, s.valn = :valn_, s.vald = :vald_
      where s.name = :name_ and s.usr = :username_;
    else
      insert into bfw_inf_settings(name, usr, vali, vals, valn, vald)
      values(:name_, :username_, :vali_, :vals_, :valn_, :vald_);
  end
end^


CREATE OR ALTER PROCEDURE BFW_INF_SP_MSG_POP (
    FROM_ID_ INTEGER)
RETURNS (
    ID INTEGER,
    SDAT DATE,
    SENDER VARCHAR(38),
    TOPIC VARCHAR(50),
    TXT VARCHAR(250))
AS
declare variable receiver varchar(38);
begin
  receiver = user;
  from_id_ = coalesce(from_id_, 0);

  for
    select m.id, m.idat, coalesce(u.name, m.sender),  m.topic, m.txt
    from bfw_inf_msg m
         left join bfw_sec_users u on (u.userid = m.sender)
    where m.receiver = :receiver and m.status = 0 and m.id > :from_id_
    order by m.id
    into :id, :sdat, :sender, :topic, :txt
  do
    suspend;

end^


CREATE OR ALTER PROCEDURE BFW_INF_SP_MSG_PUSH (
    RECEIVER_ VARCHAR(38),
    TOPIC_ VARCHAR(50),
    TXT_ VARCHAR(250))
AS
declare variable id integer;
begin
  receiver_ = upper(receiver_);
  id = gen_id(bfw_inf_msg_gen, 1);
  insert into bfw_inf_msg(id, receiver, topic, txt)
  values(:id, :receiver_, :topic_, :txt_);

end^


CREATE OR ALTER PROCEDURE BFW_INF_SP_SETTING (
    NAME_ VARCHAR(50))
RETURNS (
    VALI INTEGER,
    VALS VARCHAR(250),
    VALN DOUBLE PRECISION,
    VALD DATE)
AS
declare variable setting_title varchar(50);
begin
  select vali, vals, valn, vald from bfw_inf_sp_setting_(:name_)
  into :vali, :vals, :valn, :vald;

  if (vali is null and vals is null and valn is null and vald is null) then
  begin
    select m.title from bfw_inf_settings_meta m where m.name = :name_
    into :setting_title;

    setting_title = coalesce(setting_title, name_);

    exception bfw_raise 'Value for ''' || :setting_title || ''' undefined';
  end

  suspend;
end^


CREATE OR ALTER PROCEDURE BFW_INF_SP_SETTING_ (
    NAME_ VARCHAR(50))
RETURNS (
    VALI INTEGER,
    VALS VARCHAR(250),
    VALN DOUBLE PRECISION,
    VALD DATE)
AS
begin
  name_ = upper(name_);

  select s.vali, s.vals, s.valn, s.vald
  from  bfw_inf_settings s
  where s.name = :name_ and s.usr = USER
  into :vali, :vals, :valn, :vald;

  if (vali is null and vals is null and valn is null and vald is null) then
    select s.vali, s.vals, s.valn, s.vald
    from  bfw_inf_settings s
    where s.name = :name_ and s.usr = ''
    into :vali, :vals, :valn, :vald;

  if (vali is null and vals is null and valn is null and vald is null) then
    select s.def_vali, s.def_vals, s.def_valn, s.def_vald
    from  bfw_inf_settings_meta s
    where s.name = :name_
    into :vali, :vals, :valn, :vald;

  suspend;
end^


CREATE OR ALTER PROCEDURE BFW_SEC_EV_PERM_EFFECTIVE (
    POLID_ VARCHAR(38),
    PERMID_ VARCHAR(38),
    RESID_ VARCHAR(38))
RETURNS (
    USERID VARCHAR(38),
    USERNAME VARCHAR(50),
    PERM VARCHAR(50),
    STATE INTEGER,
    INHERITBY_PERM VARCHAR(50),
    INHERITBY_RESID VARCHAR(38))
AS
declare variable permcheck varchar(38);
declare variable permid varchar(38);
declare variable resid varchar(38);
begin
  permid_ = nullif(permid_, '');
  for
    select userid, name
    from bfw_sec_users
    into :userid, :username
  do begin
    for
      select p.permid, p.name
      from bfw_sec_policies pl left join bfw_sec_permissions p  on (pl.polid = p.polid)
      where pl.polid = :polid_
            and ((:permid_ is null) or (:permid_ is not null and p.permid = :permid_))
      into :permcheck, :perm
    do begin
      state = null;
      inheritby_perm = null;
      inheritby_resid = null;
      permid = null;
      resid = null;
      select p.state, p.permid, p.resid
      from bfw_sec_ev_perm_effective_(:permcheck, :userid, :resid_) p
      into :state, :permid, :resid;
      if (state is not null) then
      begin
        if (permid <> permcheck) then
          select name from bfw_sec_permissions p
          where p.permid = :permid
          into :inheritby_perm;

        if (coalesce(resid, resid_) <> resid_) then
          inheritby_resid = resid;

        suspend;
      end
    end
  end
end^


CREATE OR ALTER PROCEDURE BFW_SEC_EV_PERM_EFFECTIVE_ (
    PERMID_ VARCHAR(38),
    USERID_ VARCHAR(38),
    RESID_ VARCHAR(38))
RETURNS (
    STATE INTEGER,
    PERMID VARCHAR(38),
    RESID VARCHAR(38))
AS
declare variable inheritby varchar(38);
declare variable parent_resid varchar(38);
declare variable res_parent_sql varchar(1024);
begin
  resid_ = coalesce(resid_, '');
  permid = permid_;
  resid = resid_;

  for
    select a.state
    from bfw_sec_acl a
    where a.resid = :resid_ and a.userid = :userid_ and a.permid = :permid_
    into :state
  do
    if (state in (1, 2)) then
    begin
      suspend;
      exit;
    end

  select p.inheritby, pol.res_parent_sql
  from bfw_sec_permissions p left join bfw_sec_policies pol on (pol.polid = p.polid)
  where p.permid = :permid_
  into :inheritby, :res_parent_sql;

  if (inheritby is null and res_parent_sql is null) then
  begin
    exit;
  end

  parent_resid = '';
  if (coalesce(res_parent_sql, '') <> '') then
  begin
    res_parent_sql = upper(res_parent_sql);
    execute procedure bfw_utl_sp_string_replace(:res_parent_sql, ':RESID', :resid_)
    returning_values :res_parent_sql;
    execute statement res_parent_sql into :parent_resid;
    parent_resid = coalesce(parent_resid, '');

    if (parent_resid <> '') then
      inheritby = permid_;

  end

  if (inheritby is not null) then
  begin
    select state, permid, resid from bfw_sec_ev_perm_effective_(:inheritby, :userid_, :parent_resid)
    into :state, :permid, :resid;

    if (state in (1, 2)) then
      suspend;
  end
end^


CREATE OR ALTER PROCEDURE BFW_SEC_EV_PERM_LIST (
    POLID VARCHAR(38))
RETURNS (
    PERMID VARCHAR(38),
    NAME VARCHAR(50),
    DESCRIPTION VARCHAR(250),
    INHERITBY VARCHAR(50))
AS
begin
  for
    select p.permid, p.name, p.description, pi.name
    from bfw_sec_permissions p
         left join bfw_sec_permissions pi on (p.inheritby = pi.permid)
    where p.polid = :polid
    into :permid, :name, :description, :inheritby
  do
    suspend;
end^


CREATE OR ALTER PROCEDURE BFW_SEC_EV_PERM_STATE_GET (
    PERMID VARCHAR(38),
    USERID VARCHAR(38),
    RESID VARCHAR(38))
RETURNS (
    STATE INTEGER)
AS
begin
  resid = coalesce(resid, '');
  select state
  from bfw_sec_acl p
  where p.resid = :resid and p.userid = :userid and p.permid = :permid
  into :state;
  state = coalesce(state, 0);
  suspend;
end^


CREATE OR ALTER PROCEDURE BFW_SEC_EV_PERM_STATE_SET (
    PERMID VARCHAR(38),
    USERID VARCHAR(38),
    RESID VARCHAR(38),
    STATE INTEGER)
AS
begin
  resid = coalesce(resid, '');

  if (state = 0) then
    delete from bfw_sec_acl p
       where p.resid = :resid and p.userid = :userid and p.permid = :permid;
  else
  begin
    if (exists(select * from bfw_sec_acl p
              where p.resid = :resid
                    and p.userid = :userid and p.permid = :permid)) then
     update bfw_sec_acl p
     set p.state = :state
     where p.resid = :resid and p.userid = :userid and p.permid = :permid;
    else
      insert into bfw_sec_acl(resid, userid, permid, state)
      values (:resid, :userid, :permid, :state);
  end
end^


CREATE OR ALTER PROCEDURE BFW_SEC_EV_POLICY_LIST (
    PARENTID VARCHAR(38))
RETURNS (
    POLID VARCHAR(38),
    NAME VARCHAR(50),
    RES_PROVID VARCHAR(38))
AS
begin
  for
    select p.polid, p.name, p.res_provid
    from bfw_sec_policies p
    where p.parentid is null and coalesce(:parentid, '') = ''
    union all
    select p.polid, p.name, p.res_provid
    from bfw_sec_policies p
    where p.parentid = :parentid and coalesce(:parentid, '') <> ''
    into :polid, :name, :res_provid
  do
    suspend;
end^


CREATE OR ALTER PROCEDURE BFW_SEC_EV_POLICY_RESET (
    POLID_ VARCHAR(38))
AS
begin
  delete from bfw_sec_acl a
  where a.permid in (select p.permid from bfw_sec_permissions p where p.polid = :polid_);
end^


CREATE OR ALTER PROCEDURE BFW_SEC_EV_POLICY_STATE_GET (
    POLID VARCHAR(38))
RETURNS (
    STATE INTEGER)
AS
begin
  select state
  from bfw_sec_policies p where p.polid= :polid
  into :state;
  state = coalesce(state, 0);
  suspend;
end^


CREATE OR ALTER PROCEDURE BFW_SEC_EV_POLICY_STATE_SET (
    POLID VARCHAR(38),
    STATE INTEGER)
AS
begin
  update bfw_sec_policies p
  set p.state = :state
  where p.polid = :polid;
end^


CREATE OR ALTER PROCEDURE BFW_SEC_SP_PERM_CHECK (
    PERMID_ VARCHAR(38),
    USERID_ VARCHAR(38),
    RESID_ VARCHAR(38))
RETURNS (
    STATE INTEGER)
AS
declare variable unrestricted_perm varchar(38) = 'builtin.unrestricted' ;
declare variable pol_state integer;
declare variable roleid varchar(38);
declare variable parent_permid varchar(38);
declare variable parent_resid varchar(38);
declare variable res_parent_sql varchar(1024);
begin
  resid_ = coalesce(resid_, '');

  select a.state
  from bfw_sec_acl a
  where a.permid = :unrestricted_perm and a.userid = :userid_ and a.resid = ''
        and a.state = 1
  into :state;

  if (coalesce(state, 0) = 1) then
  begin
    suspend;
    exit;
  end

  select first 1 a.state
  from bfw_sec_acl a
       left join bfw_sec_user_roles r on (a.userid = r.roleid)
  where a.permid = :unrestricted_perm and r.userid = :userid_ and a.resid = ''
        and a.state = 1
  into :state;

  if (coalesce(state, 0) = 1) then
  begin
    suspend;
    exit;
  end

  select p.inheritby, pol.res_parent_sql, pol.state
  from bfw_sec_permissions p left join bfw_sec_policies pol on (pol.polid = p.polid)
  where p.permid = :permid_
  into :parent_permid, :res_parent_sql, :pol_state;

  if (pol_state <> 1) then
  begin
    state = 1;
    suspend;
    exit;
  end

  for
    select a.state
    from bfw_sec_acl a
    where a.resid = :resid_ and a.userid = :userid_ and a.permid = :permid_
    into :state
  do
    if (state in (1, 2)) then
    begin
      suspend;
      exit;
    end

  for
    select r.roleid
    from bfw_sec_user_roles r
    where r.userid = :userid_
    into :roleid
  do begin
    select a.state
    from bfw_sec_acl a
    where a.resid = :resid_ and a.userid = :roleid and a.permid = :permid_
    into :state;

    if (state in (1, 2)) then
    begin
      suspend;
      exit;
    end
  end

  if (parent_permid is null and res_parent_sql is null) then
  begin
    state = 0;
    suspend;
    exit;
  end

  parent_resid = '';
  if (coalesce(res_parent_sql, '') <> '') then
  begin
    res_parent_sql = upper(res_parent_sql);
    execute procedure bfw_utl_sp_string_replace(:res_parent_sql, ':RESID', :resid_)
    returning_values :res_parent_sql;
    execute statement res_parent_sql into :parent_resid;
    parent_resid = coalesce(parent_resid, '');

    if (parent_resid <> '') then
      parent_permid = permid_;

  end

  if (parent_permid is not null) then
  begin
    select state from bfw_sec_sp_perm_check(:parent_permid, :userid_, :parent_resid)
    into :state;
    suspend;
    exit;
  end
  else
  begin
    state = 0;
    suspend;
    exit;
  end
end^


CREATE OR ALTER PROCEDURE BFW_SEC_SP_PERM_DEMAND (
    PERMID_ VARCHAR(38),
    RESID_ VARCHAR(38))
AS
declare variable userid  varchar(38);
declare variable pstate integer;
declare variable pname varchar(250);
begin
  userid = user;
  select state from bfw_sec_sp_perm_check(:permid_, :userid, :resid_)
  into :pstate;

  if (pstate <> 1) then
  begin
    select name from bfw_sec_permissions p where p.permid = :permid_
    into :pname;

    pname = coalesce(pname, permid_);

    pname = 'No permission for: ' || pname;
    exception bfw_raise :pname;

  end
end^


CREATE OR ALTER PROCEDURE BFW_SEC_SP_PERM_DEMAND_USERS (
    PERMID_ VARCHAR(38),
    RESID_ VARCHAR(38))
RETURNS (
    USERID VARCHAR(38))
AS
declare variable state integer;
begin
  for
    select u.userid
    from bfw_sec_users u
    where u.isrole = 0
    into :userid 
  do begin
    select state from bfw_sec_sp_perm_check(:permid_, :userid, :resid_)
    into :state;

    if (state = 1) then suspend;
  end
end^


CREATE OR ALTER PROCEDURE BFW_SEC_SP_PERM_DEMAND2 (
    PERMID_ VARCHAR(38),
    RESID_ VARCHAR(38))
RETURNS (
    STATE INTEGER)
AS
declare variable userid  varchar(38);
begin
  userid = user;
  select state from bfw_sec_sp_perm_check(:permid_, :userid, :resid_)
  into :state;
  suspend;
end^


CREATE OR ALTER PROCEDURE BFW_UTL_SP_STRING_LEN (
    STRG_IN VARCHAR(1024))
RETURNS (
    STRG_LEN INTEGER)
AS
    begin
      /*
        get string length
      */

      if (strg_in is null)
        then
          strg_len = null;
        else
          begin
            strg_len = 0;
            while (strg_in || '.'  <> '.')
              do
                begin
                  strg_in = substring( strg_in from 2);
                  strg_len = strg_len + 1;
                end
          end

      suspend;
    end^


CREATE OR ALTER PROCEDURE BFW_UTL_SP_STRING_REPLACE (
    STR_IN VARCHAR(1024),
    STR_SEARCH VARCHAR(1024),
    STR_REPLACE VARCHAR(1024))
RETURNS (
    STR_OUT VARCHAR(1024))
AS
declare variable str_beg integer;
declare variable str_comp varchar(1024);
declare variable str_pre varchar(1024);
declare variable str_pst varchar(1024);
declare variable str_len_orig integer;
declare variable str_len_srch integer;
declare variable str_len_repl integer;
begin
  if ((str_in is null) or (str_search is null) or (str_replace is null)) then
  begin
    str_out = null;
    suspend;
    exit;
  end

  execute procedure bfw_utl_sp_string_len :str_in returning_values :str_len_orig;
   -- str_len_orig = strlen(str_in);

  execute procedure bfw_utl_sp_string_len :str_search returning_values :str_len_srch;
    --str_len_srch = strlen(str_search);

  execute procedure bfw_utl_sp_string_len :str_replace  returning_values :str_len_repl;
    --str_len_repl = strlen(str_replace);

  str_beg = 1;
  while (str_len_srch + str_beg - 1 <= str_len_orig) do
  begin
    execute procedure bfw_utl_sp_string_len :str_in returning_values :str_len_orig;
      --str_len_orig = strlen(str_in);


    execute procedure bfw_utl_sp_string_sub :str_in, :str_beg, str_len_srch returning_values :str_comp;

    if (str_comp || '.' = str_search || '.') then
    begin
      execute procedure bfw_utl_sp_string_sub :str_in, 1, :str_beg - 1
        returning_values :str_pre;

      execute procedure bfw_utl_sp_string_sub :str_in, :str_beg + :str_len_srch,
                  :str_len_orig - (:str_beg + :str_len_srch) + 1
                                                         returning_values :str_pst;

      str_in = coalesce(str_pre, '') || str_replace || coalesce(str_pst, '');

      str_beg = str_beg + str_len_repl - str_len_srch;

    end

    str_beg = str_beg + 1;
  end

  str_out = str_in;

  suspend;

end^


CREATE OR ALTER PROCEDURE BFW_UTL_SP_STRING_SUB (
    STR_IN VARCHAR(1024),
    STR_BEG INTEGER,
    STR_LEN INTEGER)
RETURNS (
    STR_OUT VARCHAR(1024))
AS
declare variable str_chr char( 1);
declare variable str_cpy varchar( 1024);

begin
  /*
     get substring
     strg_beg : 1 ..
  */

  if ((str_in is null)
     or (str_beg is null)
     or (str_beg <= 0)
     or (str_len is null)
     or (str_len <= 0))
  then
    str_out = null;
  else
  begin
    str_cpy = str_in;
    while (1 < str_beg) do
    begin
      str_cpy = substring( str_cpy from 2);
      str_beg = str_beg - 1;
    end

    str_out = '';
    while (0 < str_len) do
    begin
      str_chr = substring( str_cpy from 1 for 1);
      if (str_chr || '.' <> '.') then
      begin
        str_out = str_out || str_chr;
        str_cpy = substring( str_cpy from 2);
        str_len = str_len - 1;
      end
      else
      begin
        str_len = 0;
      end
    end
  end

  suspend;
end^


CREATE OR ALTER PROCEDURE CBR_EV_KORD_CREATE (
    ORD_ID_ INTEGER)
RETURNS (
    ID INTEGER)
AS
declare variable check_ integer;
declare variable const_state_active integer = 1;
declare variable const_state_precheck integer = 2;
declare variable ordi_id integer;
declare variable kordi_id integer;
begin
  id = null;

  select count(*)
  from cbr_ord h
       left join cbr_ordi i on (h.id = i.hid)
  where h.id = :ord_id_ and h.state_id < :const_state_precheck
        and i.kord_id is null
        and i.id is not null
  into :check_;

  if (coalesce(check_, 0) > 0) then
  begin
    update cbr_ord
    set state_id = :const_state_active
    where id = :ord_id_;

    id = gen_id(cbr_gen_doc, 1);
    insert into cbr_kord(id, dat)
    values(:id, 'today');

    for
      select i.id
      from cbr_ord h
           left join cbr_ordi i on (h.id = i.hid)
      where h.id = :ord_id_ and i.kord_id is null
      into :ordi_id
    do begin
      kordi_id = gen_id(cbr_gen_doc, 1);
      insert into cbr_kordi(id, hid, ordi_id)
      values(:kordi_id, :id, :ordi_id);

      update cbr_ordi
      set kord_id = :id
      where id = :ordi_id;

    end
  end
  suspend;
end^


CREATE OR ALTER PROCEDURE CBR_EV_MENU_ITEM (
    ID_ INTEGER)
RETURNS (
    ID INTEGER,
    NAME VARCHAR(50),
    GRP_ID INTEGER,
    STATE_ID INTEGER,
    UNT VARCHAR(10))
AS
begin
  select id, name, grp_id, state_id, unt
  from cbr_menu
  where id = :id_
  into :id, :name, :grp_id, :state_id, :unt;
  suspend;
end^


CREATE OR ALTER PROCEDURE CBR_EV_MENU_ITEM_U (
    ID INTEGER,
    NAME VARCHAR(50),
    GRP_ID INTEGER,
    STATE_ID INTEGER,
    UNT VARCHAR(10))
AS
begin
  update cbr_menu
  set name = :name,
      grp_id = :grp_id,
      state_id = :state_id,
      unt = :unt
  where id = :id;
end^


CREATE OR ALTER PROCEDURE CBR_EV_MENU_LIST (
    ID_ INTEGER,
    SHOW_CLOSED_ INTEGER)
RETURNS (
    ID INTEGER,
    GRP VARCHAR(50),
    NAME VARCHAR(50),
    UNT VARCHAR(10),
    STATE VARCHAR(50),
    UI_ROW_STYLE VARCHAR(50))
AS
declare variable state_id integer;
begin
  for
    select i.id, i.name, i.unt, g.name,
       (select e.name from inf_sp_enum_get('cbr_menu', 'state_id', i.state_id) e),
       i.state_id
    from cbr_menu i
         left join cbr_menu_grp g on (g.id = i.grp_id)
    where ((:id_ is not null and i.id = :id_) or (:id_ is null))
          and
            ((:show_closed_ = 1) or (:show_closed_ = 0 and i.state_id < 3))
    order by g.name, i.name
    into :id, :name, :unt, :grp, :state, :state_id
  do begin
    ui_row_style = null;
    if (state_id = 3) then
      ui_row_style = 'Style.Hidden';


    suspend;
  end
end^


CREATE OR ALTER PROCEDURE CBR_EV_MENU_NEW
RETURNS (
    ID INTEGER,
    NAME VARCHAR(50),
    GRP_ID INTEGER,
    UNT VARCHAR(10))
AS
begin
  id = gen_id(cbr_gen, 1);

  suspend;
end^


CREATE OR ALTER PROCEDURE CBR_EV_MENU_NEW_U (
    ID INTEGER,
    NAME VARCHAR(50),
    GRP_ID INTEGER,
    UNT VARCHAR(10))
AS
begin
  insert into cbr_menu(id, name, grp_id, unt, state_id)
  values(:id, :name, :grp_id, :unt, 1);

end^


CREATE OR ALTER PROCEDURE CBR_EV_ORD_DESK_ORD_CREATE (
    TBL_ID_ INTEGER)
RETURNS (
    ID INTEGER)
AS
declare variable price_typ_id integer;
begin
  select first 1 id from cbr_price_typ pt
  into :price_typ_id;

  id = gen_id(cbr_gen_doc, 1);
  insert into cbr_ord(id, dat, tbl_id, price_typ_id)
  values(:id, 'today', :tbl_id_, :price_typ_id);

  suspend;
end^


CREATE OR ALTER PROCEDURE CBR_EV_ORD_DESK_ORDI (
    HID_ INTEGER,
    MENU_ID_ INTEGER)
RETURNS (
    ID INTEGER,
    HID INTEGER,
    RECNO INTEGER,
    MENU_ID INTEGER,
    DISH VARCHAR(50),
    UNT VARCHAR(10),
    QTY DOUBLE PRECISION,
    PRICE DOUBLE PRECISION,
    SUMM DOUBLE PRECISION,
    FKORD INTEGER)
AS
declare variable kord_id integer;
begin
  recno = 0;
  for
    select i.id, i.hid, i.menu_id, m.name, m.unt, i.qty, i.price, i.qty * i.price,
           i.kord_id

    from cbr_ordi i left join cbr_menu m on (m.id = i.menu_id)
    where i.hid = :hid_
    order by i.id
    into :id, :hid, :menu_id, :dish, :unt, :qty, :price, :summ,
         :kord_id
  do begin
    recno = recno + 1;

    if (kord_id is null) then
      fkord = 0;
    else
      fkord = 1;

    suspend;
  end
end^


CREATE OR ALTER PROCEDURE CBR_EV_ORD_DESK_ORDI_I (
    HID_ INTEGER,
    MENU_ID_ INTEGER)
RETURNS (
    ID INTEGER,
    HID INTEGER,
    MENU_ID INTEGER,
    DISH VARCHAR(50),
    UNT VARCHAR(10),
    QTY DOUBLE PRECISION,
    PRICE DOUBLE PRECISION,
    SUMM DOUBLE PRECISION,
    FKORD INTEGER)
AS
declare variable dat date;
declare variable price_typ_id integer;
begin
  id = gen_id(cbr_gen_doc, 1);
  hid = hid_;
  menu_id = menu_id_;
  fkord = 0;

  select name, unt from cbr_menu where id = :menu_id
  into :dish, :unt;

  qty = 1;

  select h.dat, h.price_typ_id
  from cbr_ord h
  where id = :hid
  into :dat, :price_typ_id;

  select first 1 p.price
  from cbr_price p
  where p.menu_id = :menu_id and p.dat <= :dat and p.typ_id = :price_typ_id
  order by p.dat desc
  into :price;

  summ = qty * price;



  suspend;
end^


CREATE OR ALTER PROCEDURE CBR_EV_ORD_JRN (
    ID_ INTEGER,
    STATE_ID_ INTEGER,
    DBEG_ DATE,
    DEND_ DATE)
RETURNS (
    ID INTEGER,
    DAT DATE,
    ROOM VARCHAR(50),
    TBL VARCHAR(50),
    IDAT TIMESTAMP)
AS
begin
  for
    select p.id, p.dat, r.name, t.name, p.idat
    from cbr_ev_ord_jrn_(:id_, :state_id_, :dbeg_, :dend_) p
         left join cbr_tbl t on (t.id = p.tbl_id)
         left join cbr_rooms r on (r.id = t.room_id)
    order by p.dat, r.name, t.name
    into :id, :dat, :room, :tbl, :idat
  do begin

    suspend;
  end
end^


CREATE OR ALTER PROCEDURE CBR_EV_ORD_JRN_ (
    ID_ INTEGER,
    STATE_ID_ INTEGER,
    DBEG_ DATE,
    DEND_ DATE)
RETURNS (
    ID INTEGER,
    DAT DATE,
    STATE_ID INTEGER,
    TBL_ID INTEGER,
    IDAT TIMESTAMP)
AS
declare variable use_drange integer;
begin
  select drange from inf_sp_states_get('cbr_ord', :state_id_)
  into use_drange;

  if (state_id_ = -1) then
    use_drange = 1;

  if (id_ is null) then
  begin
    if (use_drange = 1) then
      for
        select h.id, h.dat, h.state_id, h.tbl_id, h.idat
        from cbr_ord h
        where h.dat between :dbeg_ and :dend_ and h.state_id = :state_id_
        into :id, :dat, :state_id, :tbl_id, :idat
      do suspend;
    else
      for
        select h.id, h.dat, h.state_id, h.tbl_id, h.idat
        from cbr_ord h
        where h.state_id = :state_id_
        into :id, :dat, :state_id, :tbl_id, :idat
      do suspend;
  end
  else
    for
        select h.id, h.dat, h.state_id, h.tbl_id, h.idat
        from cbr_ord h
      where h.id = :id_ and h.state_id = :state_id_
        into :id, :dat, :state_id, :tbl_id, :idat
    do suspend;

end^


CREATE OR ALTER PROCEDURE CBR_EV_ORD_PRECHECK (
    ID INTEGER)
AS
declare variable msg varchar(250);
begin
  if (exists (select * from cbr_ordi i where i.hid = :id and i.kord_id is null )) then
  begin
    select msg from inf_msg where code = 'ERROR.PRECHECK'
    into :msg;

    exception raise :msg;
  end

  update cbr_ord set state_id = 2 where id = :id;
end^


CREATE OR ALTER PROCEDURE CBR_EV_PRICE_LIST (
    DAT_ DATE,
    TYP_ID_ INTEGER)
RETURNS (
    MENU_ID INTEGER,
    DAT DATE,
    TYP_ID INTEGER,
    GRP VARCHAR(50),
    DISH VARCHAR(50),
    UNT VARCHAR(10),
    PRICE DOUBLE PRECISION,
    PRICE_NEW DOUBLE PRECISION)
AS
declare variable price_id integer;
begin
  dat = :dat_;
  typ_id = :typ_id_;

  if (dat is null or typ_id is null) then exit;

  for
    select m.id, g.name, m.name, m.unt
    from cbr_menu m left join cbr_menu_grp g on (m.grp_id = g.id)
    where m.state_id < 3
    order by g.name, m.name
    into :menu_id, :grp, :dish, :unt
  do begin
    price = null;
    price_new = null;
    price_id = null;

    select first 1 p.price
    from cbr_price p
    where p.menu_id = :menu_id and p.typ_id = :typ_id and p.dat < :dat
    order by p.dat desc
    into :price;

    select p.id, p.price
    from cbr_price p
    where p.menu_id = :menu_id and p.typ_id = :typ_id and p.dat = :dat
    into :price_id, :price_new;


    suspend;
  end
end^


CREATE OR ALTER PROCEDURE CBR_EV_PRICE_LIST_SEL (
    DAT_ DATE,
    TYP_ID_ INTEGER)
RETURNS (
    DAT DATE,
    TYP_ID INTEGER,
    INFO VARCHAR(250))
AS
declare variable typ varchar(50);
begin
  dat = coalesce(dat_, 'TODAY');
  typ_id = typ_id_;

  if (typ_id is null) then
    select first 1 id
    from cbr_price_typ
    order by id
    into :typ_id;

  if (typ_id is null) then
    typ = 'УКАЖИТЕ ТИП ЦЕН';
  else
    select name from cbr_price_typ where id = :typ_id
    into :typ;

  info = 'На дату: ' || dat || '   Тип цен:' || typ;

  suspend;
end^


CREATE OR ALTER PROCEDURE CBR_EV_PRICE_LIST_U (
    MENU_ID INTEGER,
    DAT DATE,
    TYP_ID INTEGER,
    PRICE_NEW DOUBLE PRECISION)
AS
declare variable price_id integer;
begin
  select p.id
  from cbr_price p
  where p.menu_id = :menu_id and p.dat = :dat and p.typ_id = :typ_id
  into :price_id;

  if (price_id is null) then
  begin
    if (price_new is null) then exit;
    price_id = gen_id(cbr_gen_doc, 1);
    insert into cbr_price(id, menu_id, typ_id, dat, price)
    values(:price_id, :menu_id, :typ_id, :dat, :price_new);
  end
  else
  begin
    if (price_new is not null) then
      update cbr_price
      set price = :price_new
      where id = :price_id;
    else
      delete from cbr_price where id = :price_id;

  end
end^


CREATE OR ALTER PROCEDURE INF_SP_ENUM_GET (
    TABLENAME_ VARCHAR(50),
    FIELDNAME_ VARCHAR(50),
    ID_ INTEGER)
RETURNS (
    ID INTEGER,
    NAME VARCHAR(50),
    CODE VARCHAR(50))
AS
begin
  select e.id, e.name, e.code
  from inf_enum e
  where e.tablename = upper(:tablename_)
        and e.fieldname = upper(:fieldname_)
        and e.id = :id_
  into :id, :name, :code;
  suspend;
end^


CREATE OR ALTER PROCEDURE INF_SP_ENUM_LOOKUP (
    TABLENAME_ VARCHAR(50),
    FIELDNAME_ VARCHAR(50),
    SHOWNONE_ INTEGER)
RETURNS (
    ID INTEGER,
    NAME VARCHAR(50))
AS
begin
  for
    select e.id, e.name
    from inf_enum e
    where e.tablename = upper(:tablename_)
          and e.fieldname = upper(:fieldname_)
          and e.id = 0 and :shownone_ = 1
    union
    select e.id, e.name
    from inf_enum e
    where e.tablename = upper(:tablename_)
          and e.fieldname = upper(:fieldname_)
          and e.id <> 0
    into :id, :name
  do
    suspend;
end^


CREATE OR ALTER PROCEDURE INF_SP_STATES_GET (
    TABLENAME_ VARCHAR(50),
    ID_ INTEGER)
RETURNS (
    ID INTEGER,
    NAME VARCHAR(50),
    CODE VARCHAR(50),
    DRANGE INTEGER)
AS
begin
  select id, name, code, drange
  from inf_states
  where tablename = upper(:tablename_)
        and id = :id_
  into :id, :name, :code, :drange;
  suspend;
end^


CREATE OR ALTER PROCEDURE INF_SP_STATES_LIST (
    TABLE_NAME_ VARCHAR(50))
RETURNS (
    ID INTEGER,
    NAME VARCHAR(50),
    CODE VARCHAR(50),
    DRANGE INTEGER)
AS
begin
  for
    select s.id, s.name, s.code, s.drange
    from inf_states s
    where s.tablename = upper(:table_name_)
    order by s.id
    into :id, :name, :code, :drange
  do
    suspend;
end^


CREATE OR ALTER PROCEDURE UTL_EV_JRN_SELECTOR (
    DATE1_ DATE,
    DATE2_ DATE)
RETURNS (
    DATE1 DATE,
    DATE2 DATE)
AS
begin
  date1 = coalesce(date1_, 'today');
  date2 = coalesce(date2_, 'today');
  suspend;
end^


CREATE OR ALTER PROCEDURE UTL_EV_JRN_SELECTORINFO (
    USE_DRANGE_ INTEGER,
    DATE1_ DATE,
    DATE2_ DATE)
RETURNS (
    INFO VARCHAR(250))
AS
begin
  use_drange_ = coalesce(use_drange_, 1);

  if (use_drange_ = 1) then
  begin
    if (date1_ is null or date2_ is null) then
      info = '';
    else
      info = 'Интервал дат ' || date1_ || ' - ' || date2_;
  end
  else
    info = '';

  suspend;
end^



SET TERM ; ^


/******************************************************************************/
/***                              Descriptions                              ***/
/******************************************************************************/

DESCRIBE TABLE BFW_UI_STYLES
'OPTIONS:
color={red,yellow,green etc... + InfoBk};
font.style={bold,italic,underline,srikeout};
font.color={color}

Use static:
Set in ENT_FIELDS.OPTIONS "Style=<id style>" for content and
  "Style.Header=<id style>" for header

Use dynamics:
In select or strored procedure define fields
 UI_ROW_STYLE for row style or UI_<FIELD_NAME>_STYLE for field style
 and set id style

Sample define style:
ID = "style1"
OPTIONS = "Color=InfoBk;Font.Style=Bold"';

